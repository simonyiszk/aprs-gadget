/* USER CODE BEGIN Header */
/**
 ******************************************************************************
 * @file           : main.c
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2022 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "dma.h"
#include "i2c.h"
#include "tim.h"
#include "usart.h"
#include "gpio.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <stdio.h>
#include "ssd1306.h"
#include "fsk.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_DMA_Init();
  MX_USART2_UART_Init();
  MX_I2C1_Init();
  MX_TIM3_Init();
  MX_TIM4_Init();
  /* USER CODE BEGIN 2 */

	SSD1306_Init();

	SSD1306_GotoXY (0, 0);
	SSD1306_Puts("HA3PB", &Font_7x10, 1);

	SSD1306_GotoXY(0, 10);
	SSD1306_Puts("APRS GADGET", &Font_11x18, 1);

	char counter[12];

	char menu[4][7] = {"CALL","PERIOD","ICON","QUIT"};

	uint32_t sine[198] = {
			0x7F,0x83,0x87,0x8B,0x8F,0x93,0x97,0x9B,0x9F,0xA3,0xA7,
			0xAB,0xAF,0xB2,0xB6,0xBA,0xBD,0xC1,0xC4,0xC8,0xCB,0xCE,
			0xD1,0xD4,0xD7,0xDA,0xDD,0xE0,0xE2,0xE5,0xE7,0xEA,0xEC,
			0xEE,0xF0,0xF2,0xF3,0xF5,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,
			0xFD,0xFE,0xFE,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFE,0xFE,
			0xFD,0xFC,0xFB,0xFA,0xF9,0xF8,0xF7,0xF5,0xF3,0xF2,0xF0,
			0xEE,0xEC,0xEA,0xE7,0xE5,0xE2,0xE0,0xDD,0xDA,0xD7,0xD4,
			0xD1,0xCE,0xCB,0xC8,0xC4,0xC1,0xBD,0xBA,0xB6,0xB2,0xAF,
			0xAB,0xA7,0xA3,0x9F,0x9B,0x97,0x93,0x8F,0x8B,0x87,0x83,
			0x7F,0x7B,0x77,0x73,0x6F,0x6B,0x67,0x63,0x5F,0x5B,0x57,
			0x53,0x4F,0x4C,0x48,0x44,0x41,0x3D,0x3A,0x36,0x33,0x30,
			0x2D,0x2A,0x27,0x24,0x21,0x1E,0x1C,0x19,0x17,0x14,0x12,
			0x10,0x0E,0x0C,0x0B,0x09,0x07,0x06,0x05,0x04,0x03,0x02,
			0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
			0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x09,0x0B,0x0C,0x0E,
			0x10,0x12,0x14,0x17,0x19,0x1C,0x1E,0x21,0x24,0x27,0x2A,
			0x2D,0x30,0x33,0x36,0x3A,0x3D,0x41,0x44,0x48,0x4C,0x4F,
			0x53,0x57,0x5B,0x5F,0x63,0x67,0x6B,0x6F,0x73,0x77,0x7B
	};


	//FSK_Init();
	HAL_TIM_PWM_Start_DMA(&htim4, TIM_CHANNEL_1, sine, 198);

	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
	// __HAL_TIM_GET_COUNTER(&htim3);

	SSD1306_UpdateScreen();
	HAL_Delay (1000);

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		sprintf(counter, "MENU:%6s", menu[(__HAL_TIM_GET_COUNTER(&htim3))>>2]);
		SSD1306_GotoXY(0, 10);
		SSD1306_Puts(counter, &Font_11x18, 1);
		SSD1306_UpdateScreen();

		HAL_Delay(20);

		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);

	}
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
	{
	}
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
