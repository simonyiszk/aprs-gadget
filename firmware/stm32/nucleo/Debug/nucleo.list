
nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004084  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001550  08004254  08004254  00014254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080057a4  080057a4  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  080057a4  080057a4  000157a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080057ac  080057ac  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080057ac  080057ac  000157ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080057b0  080057b0  000157b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  080057b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000031c  20000080  08005834  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000039c  08005834  0002039c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011b60  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002604  00000000  00000000  00031c10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001028  00000000  00000000  00034218  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f28  00000000  00000000  00035240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023365  00000000  00000000  00036168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001506b  00000000  00000000  000594cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d3a59  00000000  00000000  0006e538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00141f91  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000047b8  00000000  00000000  00141fe4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000080 	.word	0x20000080
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800423c 	.word	0x0800423c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000084 	.word	0x20000084
 800020c:	0800423c 	.word	0x0800423c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80005ba:	f000 fa21 	bl	8000a00 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80005be:	f644 6320 	movw	r3, #20000	; 0x4e20
 80005c2:	2201      	movs	r2, #1
 80005c4:	2178      	movs	r1, #120	; 0x78
 80005c6:	485b      	ldr	r0, [pc, #364]	; (8000734 <SSD1306_Init+0x180>)
 80005c8:	f001 fb40 	bl	8001c4c <HAL_I2C_IsDeviceReady>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80005d2:	2300      	movs	r3, #0
 80005d4:	e0a9      	b.n	800072a <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 80005d6:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80005da:	607b      	str	r3, [r7, #4]
	while(p>0)
 80005dc:	e002      	b.n	80005e4 <SSD1306_Init+0x30>
		p--;
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	3b01      	subs	r3, #1
 80005e2:	607b      	str	r3, [r7, #4]
	while(p>0)
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d1f9      	bne.n	80005de <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80005ea:	22ae      	movs	r2, #174	; 0xae
 80005ec:	2100      	movs	r1, #0
 80005ee:	2078      	movs	r0, #120	; 0x78
 80005f0:	f000 fa82 	bl	8000af8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 80005f4:	2220      	movs	r2, #32
 80005f6:	2100      	movs	r1, #0
 80005f8:	2078      	movs	r0, #120	; 0x78
 80005fa:	f000 fa7d 	bl	8000af8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80005fe:	2210      	movs	r2, #16
 8000600:	2100      	movs	r1, #0
 8000602:	2078      	movs	r0, #120	; 0x78
 8000604:	f000 fa78 	bl	8000af8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000608:	22b0      	movs	r2, #176	; 0xb0
 800060a:	2100      	movs	r1, #0
 800060c:	2078      	movs	r0, #120	; 0x78
 800060e:	f000 fa73 	bl	8000af8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8000612:	22c8      	movs	r2, #200	; 0xc8
 8000614:	2100      	movs	r1, #0
 8000616:	2078      	movs	r0, #120	; 0x78
 8000618:	f000 fa6e 	bl	8000af8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 800061c:	2200      	movs	r2, #0
 800061e:	2100      	movs	r1, #0
 8000620:	2078      	movs	r0, #120	; 0x78
 8000622:	f000 fa69 	bl	8000af8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8000626:	2210      	movs	r2, #16
 8000628:	2100      	movs	r1, #0
 800062a:	2078      	movs	r0, #120	; 0x78
 800062c:	f000 fa64 	bl	8000af8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000630:	2240      	movs	r2, #64	; 0x40
 8000632:	2100      	movs	r1, #0
 8000634:	2078      	movs	r0, #120	; 0x78
 8000636:	f000 fa5f 	bl	8000af8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 800063a:	2281      	movs	r2, #129	; 0x81
 800063c:	2100      	movs	r1, #0
 800063e:	2078      	movs	r0, #120	; 0x78
 8000640:	f000 fa5a 	bl	8000af8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8000644:	22ff      	movs	r2, #255	; 0xff
 8000646:	2100      	movs	r1, #0
 8000648:	2078      	movs	r0, #120	; 0x78
 800064a:	f000 fa55 	bl	8000af8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800064e:	22a1      	movs	r2, #161	; 0xa1
 8000650:	2100      	movs	r1, #0
 8000652:	2078      	movs	r0, #120	; 0x78
 8000654:	f000 fa50 	bl	8000af8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000658:	22a6      	movs	r2, #166	; 0xa6
 800065a:	2100      	movs	r1, #0
 800065c:	2078      	movs	r0, #120	; 0x78
 800065e:	f000 fa4b 	bl	8000af8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8000662:	22a8      	movs	r2, #168	; 0xa8
 8000664:	2100      	movs	r1, #0
 8000666:	2078      	movs	r0, #120	; 0x78
 8000668:	f000 fa46 	bl	8000af8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x1F); //
 800066c:	221f      	movs	r2, #31
 800066e:	2100      	movs	r1, #0
 8000670:	2078      	movs	r0, #120	; 0x78
 8000672:	f000 fa41 	bl	8000af8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000676:	22a4      	movs	r2, #164	; 0xa4
 8000678:	2100      	movs	r1, #0
 800067a:	2078      	movs	r0, #120	; 0x78
 800067c:	f000 fa3c 	bl	8000af8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8000680:	22d3      	movs	r2, #211	; 0xd3
 8000682:	2100      	movs	r1, #0
 8000684:	2078      	movs	r0, #120	; 0x78
 8000686:	f000 fa37 	bl	8000af8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 800068a:	2200      	movs	r2, #0
 800068c:	2100      	movs	r1, #0
 800068e:	2078      	movs	r0, #120	; 0x78
 8000690:	f000 fa32 	bl	8000af8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8000694:	22d5      	movs	r2, #213	; 0xd5
 8000696:	2100      	movs	r1, #0
 8000698:	2078      	movs	r0, #120	; 0x78
 800069a:	f000 fa2d 	bl	8000af8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 800069e:	22f0      	movs	r2, #240	; 0xf0
 80006a0:	2100      	movs	r1, #0
 80006a2:	2078      	movs	r0, #120	; 0x78
 80006a4:	f000 fa28 	bl	8000af8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80006a8:	22d9      	movs	r2, #217	; 0xd9
 80006aa:	2100      	movs	r1, #0
 80006ac:	2078      	movs	r0, #120	; 0x78
 80006ae:	f000 fa23 	bl	8000af8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80006b2:	2222      	movs	r2, #34	; 0x22
 80006b4:	2100      	movs	r1, #0
 80006b6:	2078      	movs	r0, #120	; 0x78
 80006b8:	f000 fa1e 	bl	8000af8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80006bc:	22da      	movs	r2, #218	; 0xda
 80006be:	2100      	movs	r1, #0
 80006c0:	2078      	movs	r0, #120	; 0x78
 80006c2:	f000 fa19 	bl	8000af8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x02);
 80006c6:	2202      	movs	r2, #2
 80006c8:	2100      	movs	r1, #0
 80006ca:	2078      	movs	r0, #120	; 0x78
 80006cc:	f000 fa14 	bl	8000af8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80006d0:	22db      	movs	r2, #219	; 0xdb
 80006d2:	2100      	movs	r1, #0
 80006d4:	2078      	movs	r0, #120	; 0x78
 80006d6:	f000 fa0f 	bl	8000af8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80006da:	2220      	movs	r2, #32
 80006dc:	2100      	movs	r1, #0
 80006de:	2078      	movs	r0, #120	; 0x78
 80006e0:	f000 fa0a 	bl	8000af8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80006e4:	228d      	movs	r2, #141	; 0x8d
 80006e6:	2100      	movs	r1, #0
 80006e8:	2078      	movs	r0, #120	; 0x78
 80006ea:	f000 fa05 	bl	8000af8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80006ee:	2214      	movs	r2, #20
 80006f0:	2100      	movs	r1, #0
 80006f2:	2078      	movs	r0, #120	; 0x78
 80006f4:	f000 fa00 	bl	8000af8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80006f8:	22af      	movs	r2, #175	; 0xaf
 80006fa:	2100      	movs	r1, #0
 80006fc:	2078      	movs	r0, #120	; 0x78
 80006fe:	f000 f9fb 	bl	8000af8 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8000702:	222e      	movs	r2, #46	; 0x2e
 8000704:	2100      	movs	r1, #0
 8000706:	2078      	movs	r0, #120	; 0x78
 8000708:	f000 f9f6 	bl	8000af8 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 800070c:	2000      	movs	r0, #0
 800070e:	f000 f843 	bl	8000798 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 8000712:	f000 f813 	bl	800073c <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 8000716:	4b08      	ldr	r3, [pc, #32]	; (8000738 <SSD1306_Init+0x184>)
 8000718:	2200      	movs	r2, #0
 800071a:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 800071c:	4b06      	ldr	r3, [pc, #24]	; (8000738 <SSD1306_Init+0x184>)
 800071e:	2200      	movs	r2, #0
 8000720:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 8000722:	4b05      	ldr	r3, [pc, #20]	; (8000738 <SSD1306_Init+0x184>)
 8000724:	2201      	movs	r2, #1
 8000726:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8000728:	2301      	movs	r3, #1
}
 800072a:	4618      	mov	r0, r3
 800072c:	3708      	adds	r7, #8
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	200002a4 	.word	0x200002a4
 8000738:	2000029c 	.word	0x2000029c

0800073c <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8000742:	2300      	movs	r3, #0
 8000744:	71fb      	strb	r3, [r7, #7]
 8000746:	e01d      	b.n	8000784 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8000748:	79fb      	ldrb	r3, [r7, #7]
 800074a:	3b50      	subs	r3, #80	; 0x50
 800074c:	b2db      	uxtb	r3, r3
 800074e:	461a      	mov	r2, r3
 8000750:	2100      	movs	r1, #0
 8000752:	2078      	movs	r0, #120	; 0x78
 8000754:	f000 f9d0 	bl	8000af8 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8000758:	2200      	movs	r2, #0
 800075a:	2100      	movs	r1, #0
 800075c:	2078      	movs	r0, #120	; 0x78
 800075e:	f000 f9cb 	bl	8000af8 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8000762:	2210      	movs	r2, #16
 8000764:	2100      	movs	r1, #0
 8000766:	2078      	movs	r0, #120	; 0x78
 8000768:	f000 f9c6 	bl	8000af8 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 800076c:	79fb      	ldrb	r3, [r7, #7]
 800076e:	01db      	lsls	r3, r3, #7
 8000770:	4a08      	ldr	r2, [pc, #32]	; (8000794 <SSD1306_UpdateScreen+0x58>)
 8000772:	441a      	add	r2, r3
 8000774:	2380      	movs	r3, #128	; 0x80
 8000776:	2140      	movs	r1, #64	; 0x40
 8000778:	2078      	movs	r0, #120	; 0x78
 800077a:	f000 f957 	bl	8000a2c <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800077e:	79fb      	ldrb	r3, [r7, #7]
 8000780:	3301      	adds	r3, #1
 8000782:	71fb      	strb	r3, [r7, #7]
 8000784:	79fb      	ldrb	r3, [r7, #7]
 8000786:	2b07      	cmp	r3, #7
 8000788:	d9de      	bls.n	8000748 <SSD1306_UpdateScreen+0xc>
	}
}
 800078a:	bf00      	nop
 800078c:	bf00      	nop
 800078e:	3708      	adds	r7, #8
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	2000009c 	.word	0x2000009c

08000798 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	4603      	mov	r3, r0
 80007a0:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80007a2:	79fb      	ldrb	r3, [r7, #7]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d101      	bne.n	80007ac <SSD1306_Fill+0x14>
 80007a8:	2300      	movs	r3, #0
 80007aa:	e000      	b.n	80007ae <SSD1306_Fill+0x16>
 80007ac:	23ff      	movs	r3, #255	; 0xff
 80007ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007b2:	4619      	mov	r1, r3
 80007b4:	4803      	ldr	r0, [pc, #12]	; (80007c4 <SSD1306_Fill+0x2c>)
 80007b6:	f003 f8cb 	bl	8003950 <memset>
}
 80007ba:	bf00      	nop
 80007bc:	3708      	adds	r7, #8
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	2000009c 	.word	0x2000009c

080007c8 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80007c8:	b480      	push	{r7}
 80007ca:	b083      	sub	sp, #12
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	4603      	mov	r3, r0
 80007d0:	80fb      	strh	r3, [r7, #6]
 80007d2:	460b      	mov	r3, r1
 80007d4:	80bb      	strh	r3, [r7, #4]
 80007d6:	4613      	mov	r3, r2
 80007d8:	70fb      	strb	r3, [r7, #3]
	if (
 80007da:	88fb      	ldrh	r3, [r7, #6]
 80007dc:	2b7f      	cmp	r3, #127	; 0x7f
 80007de:	d848      	bhi.n	8000872 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80007e0:	88bb      	ldrh	r3, [r7, #4]
 80007e2:	2b1f      	cmp	r3, #31
 80007e4:	d845      	bhi.n	8000872 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80007e6:	4b26      	ldr	r3, [pc, #152]	; (8000880 <SSD1306_DrawPixel+0xb8>)
 80007e8:	791b      	ldrb	r3, [r3, #4]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d006      	beq.n	80007fc <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80007ee:	78fb      	ldrb	r3, [r7, #3]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	bf0c      	ite	eq
 80007f4:	2301      	moveq	r3, #1
 80007f6:	2300      	movne	r3, #0
 80007f8:	b2db      	uxtb	r3, r3
 80007fa:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80007fc:	78fb      	ldrb	r3, [r7, #3]
 80007fe:	2b01      	cmp	r3, #1
 8000800:	d11a      	bne.n	8000838 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000802:	88fa      	ldrh	r2, [r7, #6]
 8000804:	88bb      	ldrh	r3, [r7, #4]
 8000806:	08db      	lsrs	r3, r3, #3
 8000808:	b298      	uxth	r0, r3
 800080a:	4603      	mov	r3, r0
 800080c:	01db      	lsls	r3, r3, #7
 800080e:	4413      	add	r3, r2
 8000810:	4a1c      	ldr	r2, [pc, #112]	; (8000884 <SSD1306_DrawPixel+0xbc>)
 8000812:	5cd3      	ldrb	r3, [r2, r3]
 8000814:	b25a      	sxtb	r2, r3
 8000816:	88bb      	ldrh	r3, [r7, #4]
 8000818:	f003 0307 	and.w	r3, r3, #7
 800081c:	2101      	movs	r1, #1
 800081e:	fa01 f303 	lsl.w	r3, r1, r3
 8000822:	b25b      	sxtb	r3, r3
 8000824:	4313      	orrs	r3, r2
 8000826:	b259      	sxtb	r1, r3
 8000828:	88fa      	ldrh	r2, [r7, #6]
 800082a:	4603      	mov	r3, r0
 800082c:	01db      	lsls	r3, r3, #7
 800082e:	4413      	add	r3, r2
 8000830:	b2c9      	uxtb	r1, r1
 8000832:	4a14      	ldr	r2, [pc, #80]	; (8000884 <SSD1306_DrawPixel+0xbc>)
 8000834:	54d1      	strb	r1, [r2, r3]
 8000836:	e01d      	b.n	8000874 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000838:	88fa      	ldrh	r2, [r7, #6]
 800083a:	88bb      	ldrh	r3, [r7, #4]
 800083c:	08db      	lsrs	r3, r3, #3
 800083e:	b298      	uxth	r0, r3
 8000840:	4603      	mov	r3, r0
 8000842:	01db      	lsls	r3, r3, #7
 8000844:	4413      	add	r3, r2
 8000846:	4a0f      	ldr	r2, [pc, #60]	; (8000884 <SSD1306_DrawPixel+0xbc>)
 8000848:	5cd3      	ldrb	r3, [r2, r3]
 800084a:	b25a      	sxtb	r2, r3
 800084c:	88bb      	ldrh	r3, [r7, #4]
 800084e:	f003 0307 	and.w	r3, r3, #7
 8000852:	2101      	movs	r1, #1
 8000854:	fa01 f303 	lsl.w	r3, r1, r3
 8000858:	b25b      	sxtb	r3, r3
 800085a:	43db      	mvns	r3, r3
 800085c:	b25b      	sxtb	r3, r3
 800085e:	4013      	ands	r3, r2
 8000860:	b259      	sxtb	r1, r3
 8000862:	88fa      	ldrh	r2, [r7, #6]
 8000864:	4603      	mov	r3, r0
 8000866:	01db      	lsls	r3, r3, #7
 8000868:	4413      	add	r3, r2
 800086a:	b2c9      	uxtb	r1, r1
 800086c:	4a05      	ldr	r2, [pc, #20]	; (8000884 <SSD1306_DrawPixel+0xbc>)
 800086e:	54d1      	strb	r1, [r2, r3]
 8000870:	e000      	b.n	8000874 <SSD1306_DrawPixel+0xac>
		return;
 8000872:	bf00      	nop
	}
}
 8000874:	370c      	adds	r7, #12
 8000876:	46bd      	mov	sp, r7
 8000878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087c:	4770      	bx	lr
 800087e:	bf00      	nop
 8000880:	2000029c 	.word	0x2000029c
 8000884:	2000009c 	.word	0x2000009c

08000888 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8000888:	b480      	push	{r7}
 800088a:	b083      	sub	sp, #12
 800088c:	af00      	add	r7, sp, #0
 800088e:	4603      	mov	r3, r0
 8000890:	460a      	mov	r2, r1
 8000892:	80fb      	strh	r3, [r7, #6]
 8000894:	4613      	mov	r3, r2
 8000896:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8000898:	4a05      	ldr	r2, [pc, #20]	; (80008b0 <SSD1306_GotoXY+0x28>)
 800089a:	88fb      	ldrh	r3, [r7, #6]
 800089c:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 800089e:	4a04      	ldr	r2, [pc, #16]	; (80008b0 <SSD1306_GotoXY+0x28>)
 80008a0:	88bb      	ldrh	r3, [r7, #4]
 80008a2:	8053      	strh	r3, [r2, #2]
}
 80008a4:	bf00      	nop
 80008a6:	370c      	adds	r7, #12
 80008a8:	46bd      	mov	sp, r7
 80008aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ae:	4770      	bx	lr
 80008b0:	2000029c 	.word	0x2000029c

080008b4 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b086      	sub	sp, #24
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	4603      	mov	r3, r0
 80008bc:	6039      	str	r1, [r7, #0]
 80008be:	71fb      	strb	r3, [r7, #7]
 80008c0:	4613      	mov	r3, r2
 80008c2:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80008c4:	4b3a      	ldr	r3, [pc, #232]	; (80009b0 <SSD1306_Putc+0xfc>)
 80008c6:	881b      	ldrh	r3, [r3, #0]
 80008c8:	461a      	mov	r2, r3
 80008ca:	683b      	ldr	r3, [r7, #0]
 80008cc:	781b      	ldrb	r3, [r3, #0]
 80008ce:	4413      	add	r3, r2
	if (
 80008d0:	2b7f      	cmp	r3, #127	; 0x7f
 80008d2:	dc07      	bgt.n	80008e4 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80008d4:	4b36      	ldr	r3, [pc, #216]	; (80009b0 <SSD1306_Putc+0xfc>)
 80008d6:	885b      	ldrh	r3, [r3, #2]
 80008d8:	461a      	mov	r2, r3
 80008da:	683b      	ldr	r3, [r7, #0]
 80008dc:	785b      	ldrb	r3, [r3, #1]
 80008de:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80008e0:	2b1f      	cmp	r3, #31
 80008e2:	dd01      	ble.n	80008e8 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 80008e4:	2300      	movs	r3, #0
 80008e6:	e05e      	b.n	80009a6 <SSD1306_Putc+0xf2>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80008e8:	2300      	movs	r3, #0
 80008ea:	617b      	str	r3, [r7, #20]
 80008ec:	e04b      	b.n	8000986 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80008ee:	683b      	ldr	r3, [r7, #0]
 80008f0:	685a      	ldr	r2, [r3, #4]
 80008f2:	79fb      	ldrb	r3, [r7, #7]
 80008f4:	3b20      	subs	r3, #32
 80008f6:	6839      	ldr	r1, [r7, #0]
 80008f8:	7849      	ldrb	r1, [r1, #1]
 80008fa:	fb01 f303 	mul.w	r3, r1, r3
 80008fe:	4619      	mov	r1, r3
 8000900:	697b      	ldr	r3, [r7, #20]
 8000902:	440b      	add	r3, r1
 8000904:	005b      	lsls	r3, r3, #1
 8000906:	4413      	add	r3, r2
 8000908:	881b      	ldrh	r3, [r3, #0]
 800090a:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 800090c:	2300      	movs	r3, #0
 800090e:	613b      	str	r3, [r7, #16]
 8000910:	e030      	b.n	8000974 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8000912:	68fa      	ldr	r2, [r7, #12]
 8000914:	693b      	ldr	r3, [r7, #16]
 8000916:	fa02 f303 	lsl.w	r3, r2, r3
 800091a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800091e:	2b00      	cmp	r3, #0
 8000920:	d010      	beq.n	8000944 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8000922:	4b23      	ldr	r3, [pc, #140]	; (80009b0 <SSD1306_Putc+0xfc>)
 8000924:	881a      	ldrh	r2, [r3, #0]
 8000926:	693b      	ldr	r3, [r7, #16]
 8000928:	b29b      	uxth	r3, r3
 800092a:	4413      	add	r3, r2
 800092c:	b298      	uxth	r0, r3
 800092e:	4b20      	ldr	r3, [pc, #128]	; (80009b0 <SSD1306_Putc+0xfc>)
 8000930:	885a      	ldrh	r2, [r3, #2]
 8000932:	697b      	ldr	r3, [r7, #20]
 8000934:	b29b      	uxth	r3, r3
 8000936:	4413      	add	r3, r2
 8000938:	b29b      	uxth	r3, r3
 800093a:	79ba      	ldrb	r2, [r7, #6]
 800093c:	4619      	mov	r1, r3
 800093e:	f7ff ff43 	bl	80007c8 <SSD1306_DrawPixel>
 8000942:	e014      	b.n	800096e <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8000944:	4b1a      	ldr	r3, [pc, #104]	; (80009b0 <SSD1306_Putc+0xfc>)
 8000946:	881a      	ldrh	r2, [r3, #0]
 8000948:	693b      	ldr	r3, [r7, #16]
 800094a:	b29b      	uxth	r3, r3
 800094c:	4413      	add	r3, r2
 800094e:	b298      	uxth	r0, r3
 8000950:	4b17      	ldr	r3, [pc, #92]	; (80009b0 <SSD1306_Putc+0xfc>)
 8000952:	885a      	ldrh	r2, [r3, #2]
 8000954:	697b      	ldr	r3, [r7, #20]
 8000956:	b29b      	uxth	r3, r3
 8000958:	4413      	add	r3, r2
 800095a:	b299      	uxth	r1, r3
 800095c:	79bb      	ldrb	r3, [r7, #6]
 800095e:	2b00      	cmp	r3, #0
 8000960:	bf0c      	ite	eq
 8000962:	2301      	moveq	r3, #1
 8000964:	2300      	movne	r3, #0
 8000966:	b2db      	uxtb	r3, r3
 8000968:	461a      	mov	r2, r3
 800096a:	f7ff ff2d 	bl	80007c8 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 800096e:	693b      	ldr	r3, [r7, #16]
 8000970:	3301      	adds	r3, #1
 8000972:	613b      	str	r3, [r7, #16]
 8000974:	683b      	ldr	r3, [r7, #0]
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	461a      	mov	r2, r3
 800097a:	693b      	ldr	r3, [r7, #16]
 800097c:	4293      	cmp	r3, r2
 800097e:	d3c8      	bcc.n	8000912 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8000980:	697b      	ldr	r3, [r7, #20]
 8000982:	3301      	adds	r3, #1
 8000984:	617b      	str	r3, [r7, #20]
 8000986:	683b      	ldr	r3, [r7, #0]
 8000988:	785b      	ldrb	r3, [r3, #1]
 800098a:	461a      	mov	r2, r3
 800098c:	697b      	ldr	r3, [r7, #20]
 800098e:	4293      	cmp	r3, r2
 8000990:	d3ad      	bcc.n	80008ee <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8000992:	4b07      	ldr	r3, [pc, #28]	; (80009b0 <SSD1306_Putc+0xfc>)
 8000994:	881a      	ldrh	r2, [r3, #0]
 8000996:	683b      	ldr	r3, [r7, #0]
 8000998:	781b      	ldrb	r3, [r3, #0]
 800099a:	b29b      	uxth	r3, r3
 800099c:	4413      	add	r3, r2
 800099e:	b29a      	uxth	r2, r3
 80009a0:	4b03      	ldr	r3, [pc, #12]	; (80009b0 <SSD1306_Putc+0xfc>)
 80009a2:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 80009a4:	79fb      	ldrb	r3, [r7, #7]
}
 80009a6:	4618      	mov	r0, r3
 80009a8:	3718      	adds	r7, #24
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	2000029c 	.word	0x2000029c

080009b4 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b084      	sub	sp, #16
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	60f8      	str	r0, [r7, #12]
 80009bc:	60b9      	str	r1, [r7, #8]
 80009be:	4613      	mov	r3, r2
 80009c0:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 80009c2:	e012      	b.n	80009ea <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	79fa      	ldrb	r2, [r7, #7]
 80009ca:	68b9      	ldr	r1, [r7, #8]
 80009cc:	4618      	mov	r0, r3
 80009ce:	f7ff ff71 	bl	80008b4 <SSD1306_Putc>
 80009d2:	4603      	mov	r3, r0
 80009d4:	461a      	mov	r2, r3
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	781b      	ldrb	r3, [r3, #0]
 80009da:	429a      	cmp	r2, r3
 80009dc:	d002      	beq.n	80009e4 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	781b      	ldrb	r3, [r3, #0]
 80009e2:	e008      	b.n	80009f6 <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	3301      	adds	r3, #1
 80009e8:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	781b      	ldrb	r3, [r3, #0]
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d1e8      	bne.n	80009c4 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	781b      	ldrb	r3, [r3, #0]
}
 80009f6:	4618      	mov	r0, r3
 80009f8:	3710      	adds	r7, #16
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
	...

08000a00 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8000a00:	b480      	push	{r7}
 8000a02:	b083      	sub	sp, #12
 8000a04:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8000a06:	4b08      	ldr	r3, [pc, #32]	; (8000a28 <ssd1306_I2C_Init+0x28>)
 8000a08:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000a0a:	e002      	b.n	8000a12 <ssd1306_I2C_Init+0x12>
		p--;
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	3b01      	subs	r3, #1
 8000a10:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d1f9      	bne.n	8000a0c <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8000a18:	bf00      	nop
 8000a1a:	bf00      	nop
 8000a1c:	370c      	adds	r7, #12
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop
 8000a28:	0003d090 	.word	0x0003d090

08000a2c <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8000a2c:	b590      	push	{r4, r7, lr}
 8000a2e:	b0c7      	sub	sp, #284	; 0x11c
 8000a30:	af02      	add	r7, sp, #8
 8000a32:	4604      	mov	r4, r0
 8000a34:	4608      	mov	r0, r1
 8000a36:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8000a3a:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8000a3e:	600a      	str	r2, [r1, #0]
 8000a40:	4619      	mov	r1, r3
 8000a42:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000a46:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8000a4a:	4622      	mov	r2, r4
 8000a4c:	701a      	strb	r2, [r3, #0]
 8000a4e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000a52:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8000a56:	4602      	mov	r2, r0
 8000a58:	701a      	strb	r2, [r3, #0]
 8000a5a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000a5e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000a62:	460a      	mov	r2, r1
 8000a64:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8000a66:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000a6a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000a6e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000a72:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8000a76:	7812      	ldrb	r2, [r2, #0]
 8000a78:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8000a80:	e015      	b.n	8000aae <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8000a82:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000a86:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000a8a:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8000a8e:	6812      	ldr	r2, [r2, #0]
 8000a90:	441a      	add	r2, r3
 8000a92:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000a96:	3301      	adds	r3, #1
 8000a98:	7811      	ldrb	r1, [r2, #0]
 8000a9a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000a9e:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8000aa2:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8000aa4:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000aa8:	3301      	adds	r3, #1
 8000aaa:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8000aae:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000ab2:	b29b      	uxth	r3, r3
 8000ab4:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000ab8:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8000abc:	8812      	ldrh	r2, [r2, #0]
 8000abe:	429a      	cmp	r2, r3
 8000ac0:	d8df      	bhi.n	8000a82 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8000ac2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000ac6:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	b299      	uxth	r1, r3
 8000ace:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000ad2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000ad6:	881b      	ldrh	r3, [r3, #0]
 8000ad8:	3301      	adds	r3, #1
 8000ada:	b29b      	uxth	r3, r3
 8000adc:	f107 020c 	add.w	r2, r7, #12
 8000ae0:	200a      	movs	r0, #10
 8000ae2:	9000      	str	r0, [sp, #0]
 8000ae4:	4803      	ldr	r0, [pc, #12]	; (8000af4 <ssd1306_I2C_WriteMulti+0xc8>)
 8000ae6:	f000 ffb3 	bl	8001a50 <HAL_I2C_Master_Transmit>
}
 8000aea:	bf00      	nop
 8000aec:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd90      	pop	{r4, r7, pc}
 8000af4:	200002a4 	.word	0x200002a4

08000af8 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b086      	sub	sp, #24
 8000afc:	af02      	add	r7, sp, #8
 8000afe:	4603      	mov	r3, r0
 8000b00:	71fb      	strb	r3, [r7, #7]
 8000b02:	460b      	mov	r3, r1
 8000b04:	71bb      	strb	r3, [r7, #6]
 8000b06:	4613      	mov	r3, r2
 8000b08:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8000b0a:	79bb      	ldrb	r3, [r7, #6]
 8000b0c:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8000b0e:	797b      	ldrb	r3, [r7, #5]
 8000b10:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8000b12:	79fb      	ldrb	r3, [r7, #7]
 8000b14:	b299      	uxth	r1, r3
 8000b16:	f107 020c 	add.w	r2, r7, #12
 8000b1a:	230a      	movs	r3, #10
 8000b1c:	9300      	str	r3, [sp, #0]
 8000b1e:	2302      	movs	r3, #2
 8000b20:	4803      	ldr	r0, [pc, #12]	; (8000b30 <ssd1306_I2C_Write+0x38>)
 8000b22:	f000 ff95 	bl	8001a50 <HAL_I2C_Master_Transmit>
}
 8000b26:	bf00      	nop
 8000b28:	3710      	adds	r7, #16
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	200002a4 	.word	0x200002a4

08000b34 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	607b      	str	r3, [r7, #4]
 8000b3e:	4b10      	ldr	r3, [pc, #64]	; (8000b80 <MX_GPIO_Init+0x4c>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b42:	4a0f      	ldr	r2, [pc, #60]	; (8000b80 <MX_GPIO_Init+0x4c>)
 8000b44:	f043 0301 	orr.w	r3, r3, #1
 8000b48:	6313      	str	r3, [r2, #48]	; 0x30
 8000b4a:	4b0d      	ldr	r3, [pc, #52]	; (8000b80 <MX_GPIO_Init+0x4c>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4e:	f003 0301 	and.w	r3, r3, #1
 8000b52:	607b      	str	r3, [r7, #4]
 8000b54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b56:	2300      	movs	r3, #0
 8000b58:	603b      	str	r3, [r7, #0]
 8000b5a:	4b09      	ldr	r3, [pc, #36]	; (8000b80 <MX_GPIO_Init+0x4c>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	4a08      	ldr	r2, [pc, #32]	; (8000b80 <MX_GPIO_Init+0x4c>)
 8000b60:	f043 0302 	orr.w	r3, r3, #2
 8000b64:	6313      	str	r3, [r2, #48]	; 0x30
 8000b66:	4b06      	ldr	r3, [pc, #24]	; (8000b80 <MX_GPIO_Init+0x4c>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6a:	f003 0302 	and.w	r3, r3, #2
 8000b6e:	603b      	str	r3, [r7, #0]
 8000b70:	683b      	ldr	r3, [r7, #0]

}
 8000b72:	bf00      	nop
 8000b74:	370c      	adds	r7, #12
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop
 8000b80:	40023800 	.word	0x40023800

08000b84 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b88:	4b12      	ldr	r3, [pc, #72]	; (8000bd4 <MX_I2C1_Init+0x50>)
 8000b8a:	4a13      	ldr	r2, [pc, #76]	; (8000bd8 <MX_I2C1_Init+0x54>)
 8000b8c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000b8e:	4b11      	ldr	r3, [pc, #68]	; (8000bd4 <MX_I2C1_Init+0x50>)
 8000b90:	4a12      	ldr	r2, [pc, #72]	; (8000bdc <MX_I2C1_Init+0x58>)
 8000b92:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b94:	4b0f      	ldr	r3, [pc, #60]	; (8000bd4 <MX_I2C1_Init+0x50>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b9a:	4b0e      	ldr	r3, [pc, #56]	; (8000bd4 <MX_I2C1_Init+0x50>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ba0:	4b0c      	ldr	r3, [pc, #48]	; (8000bd4 <MX_I2C1_Init+0x50>)
 8000ba2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ba6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ba8:	4b0a      	ldr	r3, [pc, #40]	; (8000bd4 <MX_I2C1_Init+0x50>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000bae:	4b09      	ldr	r3, [pc, #36]	; (8000bd4 <MX_I2C1_Init+0x50>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bb4:	4b07      	ldr	r3, [pc, #28]	; (8000bd4 <MX_I2C1_Init+0x50>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bba:	4b06      	ldr	r3, [pc, #24]	; (8000bd4 <MX_I2C1_Init+0x50>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000bc0:	4804      	ldr	r0, [pc, #16]	; (8000bd4 <MX_I2C1_Init+0x50>)
 8000bc2:	f000 fe01 	bl	80017c8 <HAL_I2C_Init>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000bcc:	f000 f914 	bl	8000df8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000bd0:	bf00      	nop
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	200002a4 	.word	0x200002a4
 8000bd8:	40005400 	.word	0x40005400
 8000bdc:	00061a80 	.word	0x00061a80

08000be0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b08a      	sub	sp, #40	; 0x28
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be8:	f107 0314 	add.w	r3, r7, #20
 8000bec:	2200      	movs	r2, #0
 8000bee:	601a      	str	r2, [r3, #0]
 8000bf0:	605a      	str	r2, [r3, #4]
 8000bf2:	609a      	str	r2, [r3, #8]
 8000bf4:	60da      	str	r2, [r3, #12]
 8000bf6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a19      	ldr	r2, [pc, #100]	; (8000c64 <HAL_I2C_MspInit+0x84>)
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d12c      	bne.n	8000c5c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c02:	2300      	movs	r3, #0
 8000c04:	613b      	str	r3, [r7, #16]
 8000c06:	4b18      	ldr	r3, [pc, #96]	; (8000c68 <HAL_I2C_MspInit+0x88>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0a:	4a17      	ldr	r2, [pc, #92]	; (8000c68 <HAL_I2C_MspInit+0x88>)
 8000c0c:	f043 0302 	orr.w	r3, r3, #2
 8000c10:	6313      	str	r3, [r2, #48]	; 0x30
 8000c12:	4b15      	ldr	r3, [pc, #84]	; (8000c68 <HAL_I2C_MspInit+0x88>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c16:	f003 0302 	and.w	r3, r3, #2
 8000c1a:	613b      	str	r3, [r7, #16]
 8000c1c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000c1e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c24:	2312      	movs	r3, #18
 8000c26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c2c:	2303      	movs	r3, #3
 8000c2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c30:	2304      	movs	r3, #4
 8000c32:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c34:	f107 0314 	add.w	r3, r7, #20
 8000c38:	4619      	mov	r1, r3
 8000c3a:	480c      	ldr	r0, [pc, #48]	; (8000c6c <HAL_I2C_MspInit+0x8c>)
 8000c3c:	f000 fc30 	bl	80014a0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c40:	2300      	movs	r3, #0
 8000c42:	60fb      	str	r3, [r7, #12]
 8000c44:	4b08      	ldr	r3, [pc, #32]	; (8000c68 <HAL_I2C_MspInit+0x88>)
 8000c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c48:	4a07      	ldr	r2, [pc, #28]	; (8000c68 <HAL_I2C_MspInit+0x88>)
 8000c4a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c4e:	6413      	str	r3, [r2, #64]	; 0x40
 8000c50:	4b05      	ldr	r3, [pc, #20]	; (8000c68 <HAL_I2C_MspInit+0x88>)
 8000c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c58:	60fb      	str	r3, [r7, #12]
 8000c5a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000c5c:	bf00      	nop
 8000c5e:	3728      	adds	r7, #40	; 0x28
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	40005400 	.word	0x40005400
 8000c68:	40023800 	.word	0x40023800
 8000c6c:	40020400 	.word	0x40020400

08000c70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c70:	b5b0      	push	{r4, r5, r7, lr}
 8000c72:	b08a      	sub	sp, #40	; 0x28
 8000c74:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c76:	f000 fa97 	bl	80011a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c7a:	f000 f85d 	bl	8000d38 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c7e:	f7ff ff59 	bl	8000b34 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000c82:	f000 f9f5 	bl	8001070 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000c86:	f7ff ff7d 	bl	8000b84 <MX_I2C1_Init>
  MX_TIM3_Init();
 8000c8a:	f000 f955 	bl	8000f38 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

	SSD1306_Init();
 8000c8e:	f7ff fc91 	bl	80005b4 <SSD1306_Init>

	SSD1306_GotoXY (0, 0);
 8000c92:	2100      	movs	r1, #0
 8000c94:	2000      	movs	r0, #0
 8000c96:	f7ff fdf7 	bl	8000888 <SSD1306_GotoXY>
	SSD1306_Puts("HA3PB", &Font_7x10, 1);
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	491f      	ldr	r1, [pc, #124]	; (8000d1c <main+0xac>)
 8000c9e:	4820      	ldr	r0, [pc, #128]	; (8000d20 <main+0xb0>)
 8000ca0:	f7ff fe88 	bl	80009b4 <SSD1306_Puts>

	SSD1306_GotoXY(0, 10);
 8000ca4:	210a      	movs	r1, #10
 8000ca6:	2000      	movs	r0, #0
 8000ca8:	f7ff fdee 	bl	8000888 <SSD1306_GotoXY>
	SSD1306_Puts("APRS GADGET", &Font_11x18, 1);
 8000cac:	2201      	movs	r2, #1
 8000cae:	491d      	ldr	r1, [pc, #116]	; (8000d24 <main+0xb4>)
 8000cb0:	481d      	ldr	r0, [pc, #116]	; (8000d28 <main+0xb8>)
 8000cb2:	f7ff fe7f 	bl	80009b4 <SSD1306_Puts>

	char counter[12];

	char menu[4][7] = {"CALL","PERIOD","ICON","QUIT"};
 8000cb6:	4b1d      	ldr	r3, [pc, #116]	; (8000d2c <main+0xbc>)
 8000cb8:	463c      	mov	r4, r7
 8000cba:	461d      	mov	r5, r3
 8000cbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cc0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000cc4:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8000cc8:	213c      	movs	r1, #60	; 0x3c
 8000cca:	4819      	ldr	r0, [pc, #100]	; (8000d30 <main+0xc0>)
 8000ccc:	f002 f984 	bl	8002fd8 <HAL_TIM_Encoder_Start>
	// __HAL_TIM_GET_COUNTER(&htim3);

	SSD1306_UpdateScreen();
 8000cd0:	f7ff fd34 	bl	800073c <SSD1306_UpdateScreen>
	HAL_Delay (1000);
 8000cd4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cd8:	f000 fad8 	bl	800128c <HAL_Delay>
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		sprintf(counter, "MENU:%6s", menu[(__HAL_TIM_GET_COUNTER(&htim3))>>2]);
 8000cdc:	4b14      	ldr	r3, [pc, #80]	; (8000d30 <main+0xc0>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ce2:	089a      	lsrs	r2, r3, #2
 8000ce4:	4639      	mov	r1, r7
 8000ce6:	4613      	mov	r3, r2
 8000ce8:	00db      	lsls	r3, r3, #3
 8000cea:	1a9b      	subs	r3, r3, r2
 8000cec:	18ca      	adds	r2, r1, r3
 8000cee:	f107 031c 	add.w	r3, r7, #28
 8000cf2:	4910      	ldr	r1, [pc, #64]	; (8000d34 <main+0xc4>)
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f002 fe33 	bl	8003960 <siprintf>
		SSD1306_GotoXY(0, 10);
 8000cfa:	210a      	movs	r1, #10
 8000cfc:	2000      	movs	r0, #0
 8000cfe:	f7ff fdc3 	bl	8000888 <SSD1306_GotoXY>
		SSD1306_Puts(counter, &Font_11x18, 1);
 8000d02:	f107 031c 	add.w	r3, r7, #28
 8000d06:	2201      	movs	r2, #1
 8000d08:	4906      	ldr	r1, [pc, #24]	; (8000d24 <main+0xb4>)
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f7ff fe52 	bl	80009b4 <SSD1306_Puts>
		SSD1306_UpdateScreen();
 8000d10:	f7ff fd14 	bl	800073c <SSD1306_UpdateScreen>

		HAL_Delay(20);
 8000d14:	2014      	movs	r0, #20
 8000d16:	f000 fab9 	bl	800128c <HAL_Delay>
		sprintf(counter, "MENU:%6s", menu[(__HAL_TIM_GET_COUNTER(&htim3))>>2]);
 8000d1a:	e7df      	b.n	8000cdc <main+0x6c>
 8000d1c:	20000000 	.word	0x20000000
 8000d20:	08004254 	.word	0x08004254
 8000d24:	20000008 	.word	0x20000008
 8000d28:	0800425c 	.word	0x0800425c
 8000d2c:	08004274 	.word	0x08004274
 8000d30:	200002fc 	.word	0x200002fc
 8000d34:	08004268 	.word	0x08004268

08000d38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b094      	sub	sp, #80	; 0x50
 8000d3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d3e:	f107 031c 	add.w	r3, r7, #28
 8000d42:	2234      	movs	r2, #52	; 0x34
 8000d44:	2100      	movs	r1, #0
 8000d46:	4618      	mov	r0, r3
 8000d48:	f002 fe02 	bl	8003950 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d4c:	f107 0308 	add.w	r3, r7, #8
 8000d50:	2200      	movs	r2, #0
 8000d52:	601a      	str	r2, [r3, #0]
 8000d54:	605a      	str	r2, [r3, #4]
 8000d56:	609a      	str	r2, [r3, #8]
 8000d58:	60da      	str	r2, [r3, #12]
 8000d5a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	607b      	str	r3, [r7, #4]
 8000d60:	4b23      	ldr	r3, [pc, #140]	; (8000df0 <SystemClock_Config+0xb8>)
 8000d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d64:	4a22      	ldr	r2, [pc, #136]	; (8000df0 <SystemClock_Config+0xb8>)
 8000d66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d6a:	6413      	str	r3, [r2, #64]	; 0x40
 8000d6c:	4b20      	ldr	r3, [pc, #128]	; (8000df0 <SystemClock_Config+0xb8>)
 8000d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d74:	607b      	str	r3, [r7, #4]
 8000d76:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000d78:	2300      	movs	r3, #0
 8000d7a:	603b      	str	r3, [r7, #0]
 8000d7c:	4b1d      	ldr	r3, [pc, #116]	; (8000df4 <SystemClock_Config+0xbc>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000d84:	4a1b      	ldr	r2, [pc, #108]	; (8000df4 <SystemClock_Config+0xbc>)
 8000d86:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d8a:	6013      	str	r3, [r2, #0]
 8000d8c:	4b19      	ldr	r3, [pc, #100]	; (8000df4 <SystemClock_Config+0xbc>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d94:	603b      	str	r3, [r7, #0]
 8000d96:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d98:	2302      	movs	r3, #2
 8000d9a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000da0:	2310      	movs	r3, #16
 8000da2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000da4:	2300      	movs	r3, #0
 8000da6:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000da8:	f107 031c 	add.w	r3, r7, #28
 8000dac:	4618      	mov	r0, r3
 8000dae:	f001 fdcf 	bl	8002950 <HAL_RCC_OscConfig>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000db8:	f000 f81e 	bl	8000df8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dbc:	230f      	movs	r3, #15
 8000dbe:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000dd0:	f107 0308 	add.w	r3, r7, #8
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f001 fa70 	bl	80022bc <HAL_RCC_ClockConfig>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000de2:	f000 f809 	bl	8000df8 <Error_Handler>
  }
}
 8000de6:	bf00      	nop
 8000de8:	3750      	adds	r7, #80	; 0x50
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	40023800 	.word	0x40023800
 8000df4:	40007000 	.word	0x40007000

08000df8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dfc:	b672      	cpsid	i
}
 8000dfe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000e00:	e7fe      	b.n	8000e00 <Error_Handler+0x8>
	...

08000e04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	607b      	str	r3, [r7, #4]
 8000e0e:	4b10      	ldr	r3, [pc, #64]	; (8000e50 <HAL_MspInit+0x4c>)
 8000e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e12:	4a0f      	ldr	r2, [pc, #60]	; (8000e50 <HAL_MspInit+0x4c>)
 8000e14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e18:	6453      	str	r3, [r2, #68]	; 0x44
 8000e1a:	4b0d      	ldr	r3, [pc, #52]	; (8000e50 <HAL_MspInit+0x4c>)
 8000e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e22:	607b      	str	r3, [r7, #4]
 8000e24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e26:	2300      	movs	r3, #0
 8000e28:	603b      	str	r3, [r7, #0]
 8000e2a:	4b09      	ldr	r3, [pc, #36]	; (8000e50 <HAL_MspInit+0x4c>)
 8000e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2e:	4a08      	ldr	r2, [pc, #32]	; (8000e50 <HAL_MspInit+0x4c>)
 8000e30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e34:	6413      	str	r3, [r2, #64]	; 0x40
 8000e36:	4b06      	ldr	r3, [pc, #24]	; (8000e50 <HAL_MspInit+0x4c>)
 8000e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e3e:	603b      	str	r3, [r7, #0]
 8000e40:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000e42:	2007      	movs	r0, #7
 8000e44:	f000 faf8 	bl	8001438 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e48:	bf00      	nop
 8000e4a:	3708      	adds	r7, #8
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	40023800 	.word	0x40023800

08000e54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e58:	e7fe      	b.n	8000e58 <NMI_Handler+0x4>

08000e5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e5a:	b480      	push	{r7}
 8000e5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e5e:	e7fe      	b.n	8000e5e <HardFault_Handler+0x4>

08000e60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e64:	e7fe      	b.n	8000e64 <MemManage_Handler+0x4>

08000e66 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e66:	b480      	push	{r7}
 8000e68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e6a:	e7fe      	b.n	8000e6a <BusFault_Handler+0x4>

08000e6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e70:	e7fe      	b.n	8000e70 <UsageFault_Handler+0x4>

08000e72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e72:	b480      	push	{r7}
 8000e74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e76:	bf00      	nop
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr

08000e80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e84:	bf00      	nop
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr

08000e8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e8e:	b480      	push	{r7}
 8000e90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e92:	bf00      	nop
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr

08000e9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ea0:	f000 f9d4 	bl	800124c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ea4:	bf00      	nop
 8000ea6:	bd80      	pop	{r7, pc}

08000ea8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b086      	sub	sp, #24
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000eb0:	4a14      	ldr	r2, [pc, #80]	; (8000f04 <_sbrk+0x5c>)
 8000eb2:	4b15      	ldr	r3, [pc, #84]	; (8000f08 <_sbrk+0x60>)
 8000eb4:	1ad3      	subs	r3, r2, r3
 8000eb6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ebc:	4b13      	ldr	r3, [pc, #76]	; (8000f0c <_sbrk+0x64>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d102      	bne.n	8000eca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ec4:	4b11      	ldr	r3, [pc, #68]	; (8000f0c <_sbrk+0x64>)
 8000ec6:	4a12      	ldr	r2, [pc, #72]	; (8000f10 <_sbrk+0x68>)
 8000ec8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eca:	4b10      	ldr	r3, [pc, #64]	; (8000f0c <_sbrk+0x64>)
 8000ecc:	681a      	ldr	r2, [r3, #0]
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	4413      	add	r3, r2
 8000ed2:	693a      	ldr	r2, [r7, #16]
 8000ed4:	429a      	cmp	r2, r3
 8000ed6:	d207      	bcs.n	8000ee8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ed8:	f002 fd10 	bl	80038fc <__errno>
 8000edc:	4603      	mov	r3, r0
 8000ede:	220c      	movs	r2, #12
 8000ee0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ee2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ee6:	e009      	b.n	8000efc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ee8:	4b08      	ldr	r3, [pc, #32]	; (8000f0c <_sbrk+0x64>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000eee:	4b07      	ldr	r3, [pc, #28]	; (8000f0c <_sbrk+0x64>)
 8000ef0:	681a      	ldr	r2, [r3, #0]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	4413      	add	r3, r2
 8000ef6:	4a05      	ldr	r2, [pc, #20]	; (8000f0c <_sbrk+0x64>)
 8000ef8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000efa:	68fb      	ldr	r3, [r7, #12]
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	3718      	adds	r7, #24
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	20020000 	.word	0x20020000
 8000f08:	00000400 	.word	0x00000400
 8000f0c:	200002f8 	.word	0x200002f8
 8000f10:	200003a0 	.word	0x200003a0

08000f14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f18:	4b06      	ldr	r3, [pc, #24]	; (8000f34 <SystemInit+0x20>)
 8000f1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f1e:	4a05      	ldr	r2, [pc, #20]	; (8000f34 <SystemInit+0x20>)
 8000f20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f28:	bf00      	nop
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	e000ed00 	.word	0xe000ed00

08000f38 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b08c      	sub	sp, #48	; 0x30
 8000f3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000f3e:	f107 030c 	add.w	r3, r7, #12
 8000f42:	2224      	movs	r2, #36	; 0x24
 8000f44:	2100      	movs	r1, #0
 8000f46:	4618      	mov	r0, r3
 8000f48:	f002 fd02 	bl	8003950 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f4c:	1d3b      	adds	r3, r7, #4
 8000f4e:	2200      	movs	r2, #0
 8000f50:	601a      	str	r2, [r3, #0]
 8000f52:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f54:	4b20      	ldr	r3, [pc, #128]	; (8000fd8 <MX_TIM3_Init+0xa0>)
 8000f56:	4a21      	ldr	r2, [pc, #132]	; (8000fdc <MX_TIM3_Init+0xa4>)
 8000f58:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000f5a:	4b1f      	ldr	r3, [pc, #124]	; (8000fd8 <MX_TIM3_Init+0xa0>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f60:	4b1d      	ldr	r3, [pc, #116]	; (8000fd8 <MX_TIM3_Init+0xa0>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 15;
 8000f66:	4b1c      	ldr	r3, [pc, #112]	; (8000fd8 <MX_TIM3_Init+0xa0>)
 8000f68:	220f      	movs	r2, #15
 8000f6a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f6c:	4b1a      	ldr	r3, [pc, #104]	; (8000fd8 <MX_TIM3_Init+0xa0>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f72:	4b19      	ldr	r3, [pc, #100]	; (8000fd8 <MX_TIM3_Init+0xa0>)
 8000f74:	2280      	movs	r2, #128	; 0x80
 8000f76:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000f78:	2303      	movs	r3, #3
 8000f7a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8000f7c:	2302      	movs	r3, #2
 8000f7e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000f80:	2301      	movs	r3, #1
 8000f82:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000f84:	2300      	movs	r3, #0
 8000f86:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8000f88:	230a      	movs	r3, #10
 8000f8a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8000f8c:	2302      	movs	r3, #2
 8000f8e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000f90:	2301      	movs	r3, #1
 8000f92:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000f94:	2300      	movs	r3, #0
 8000f96:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8000f98:	230a      	movs	r3, #10
 8000f9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000f9c:	f107 030c 	add.w	r3, r7, #12
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	480d      	ldr	r0, [pc, #52]	; (8000fd8 <MX_TIM3_Init+0xa0>)
 8000fa4:	f001 ff72 	bl	8002e8c <HAL_TIM_Encoder_Init>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8000fae:	f7ff ff23 	bl	8000df8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000fba:	1d3b      	adds	r3, r7, #4
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	4806      	ldr	r0, [pc, #24]	; (8000fd8 <MX_TIM3_Init+0xa0>)
 8000fc0:	f002 f95e 	bl	8003280 <HAL_TIMEx_MasterConfigSynchronization>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000fca:	f7ff ff15 	bl	8000df8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000fce:	bf00      	nop
 8000fd0:	3730      	adds	r7, #48	; 0x30
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	200002fc 	.word	0x200002fc
 8000fdc:	40000400 	.word	0x40000400

08000fe0 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b08a      	sub	sp, #40	; 0x28
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe8:	f107 0314 	add.w	r3, r7, #20
 8000fec:	2200      	movs	r2, #0
 8000fee:	601a      	str	r2, [r3, #0]
 8000ff0:	605a      	str	r2, [r3, #4]
 8000ff2:	609a      	str	r2, [r3, #8]
 8000ff4:	60da      	str	r2, [r3, #12]
 8000ff6:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a19      	ldr	r2, [pc, #100]	; (8001064 <HAL_TIM_Encoder_MspInit+0x84>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d12b      	bne.n	800105a <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001002:	2300      	movs	r3, #0
 8001004:	613b      	str	r3, [r7, #16]
 8001006:	4b18      	ldr	r3, [pc, #96]	; (8001068 <HAL_TIM_Encoder_MspInit+0x88>)
 8001008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100a:	4a17      	ldr	r2, [pc, #92]	; (8001068 <HAL_TIM_Encoder_MspInit+0x88>)
 800100c:	f043 0302 	orr.w	r3, r3, #2
 8001010:	6413      	str	r3, [r2, #64]	; 0x40
 8001012:	4b15      	ldr	r3, [pc, #84]	; (8001068 <HAL_TIM_Encoder_MspInit+0x88>)
 8001014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001016:	f003 0302 	and.w	r3, r3, #2
 800101a:	613b      	str	r3, [r7, #16]
 800101c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800101e:	2300      	movs	r3, #0
 8001020:	60fb      	str	r3, [r7, #12]
 8001022:	4b11      	ldr	r3, [pc, #68]	; (8001068 <HAL_TIM_Encoder_MspInit+0x88>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001026:	4a10      	ldr	r2, [pc, #64]	; (8001068 <HAL_TIM_Encoder_MspInit+0x88>)
 8001028:	f043 0301 	orr.w	r3, r3, #1
 800102c:	6313      	str	r3, [r2, #48]	; 0x30
 800102e:	4b0e      	ldr	r3, [pc, #56]	; (8001068 <HAL_TIM_Encoder_MspInit+0x88>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001032:	f003 0301 	and.w	r3, r3, #1
 8001036:	60fb      	str	r3, [r7, #12]
 8001038:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800103a:	23c0      	movs	r3, #192	; 0xc0
 800103c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103e:	2302      	movs	r3, #2
 8001040:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001042:	2300      	movs	r3, #0
 8001044:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001046:	2300      	movs	r3, #0
 8001048:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800104a:	2302      	movs	r3, #2
 800104c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800104e:	f107 0314 	add.w	r3, r7, #20
 8001052:	4619      	mov	r1, r3
 8001054:	4805      	ldr	r0, [pc, #20]	; (800106c <HAL_TIM_Encoder_MspInit+0x8c>)
 8001056:	f000 fa23 	bl	80014a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800105a:	bf00      	nop
 800105c:	3728      	adds	r7, #40	; 0x28
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	40000400 	.word	0x40000400
 8001068:	40023800 	.word	0x40023800
 800106c:	40020000 	.word	0x40020000

08001070 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001074:	4b11      	ldr	r3, [pc, #68]	; (80010bc <MX_USART2_UART_Init+0x4c>)
 8001076:	4a12      	ldr	r2, [pc, #72]	; (80010c0 <MX_USART2_UART_Init+0x50>)
 8001078:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800107a:	4b10      	ldr	r3, [pc, #64]	; (80010bc <MX_USART2_UART_Init+0x4c>)
 800107c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001080:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001082:	4b0e      	ldr	r3, [pc, #56]	; (80010bc <MX_USART2_UART_Init+0x4c>)
 8001084:	2200      	movs	r2, #0
 8001086:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001088:	4b0c      	ldr	r3, [pc, #48]	; (80010bc <MX_USART2_UART_Init+0x4c>)
 800108a:	2200      	movs	r2, #0
 800108c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800108e:	4b0b      	ldr	r3, [pc, #44]	; (80010bc <MX_USART2_UART_Init+0x4c>)
 8001090:	2200      	movs	r2, #0
 8001092:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001094:	4b09      	ldr	r3, [pc, #36]	; (80010bc <MX_USART2_UART_Init+0x4c>)
 8001096:	220c      	movs	r2, #12
 8001098:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800109a:	4b08      	ldr	r3, [pc, #32]	; (80010bc <MX_USART2_UART_Init+0x4c>)
 800109c:	2200      	movs	r2, #0
 800109e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010a0:	4b06      	ldr	r3, [pc, #24]	; (80010bc <MX_USART2_UART_Init+0x4c>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010a6:	4805      	ldr	r0, [pc, #20]	; (80010bc <MX_USART2_UART_Init+0x4c>)
 80010a8:	f002 f966 	bl	8003378 <HAL_UART_Init>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80010b2:	f7ff fea1 	bl	8000df8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010b6:	bf00      	nop
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	20000344 	.word	0x20000344
 80010c0:	40004400 	.word	0x40004400

080010c4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b08a      	sub	sp, #40	; 0x28
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010cc:	f107 0314 	add.w	r3, r7, #20
 80010d0:	2200      	movs	r2, #0
 80010d2:	601a      	str	r2, [r3, #0]
 80010d4:	605a      	str	r2, [r3, #4]
 80010d6:	609a      	str	r2, [r3, #8]
 80010d8:	60da      	str	r2, [r3, #12]
 80010da:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a19      	ldr	r2, [pc, #100]	; (8001148 <HAL_UART_MspInit+0x84>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d12b      	bne.n	800113e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80010e6:	2300      	movs	r3, #0
 80010e8:	613b      	str	r3, [r7, #16]
 80010ea:	4b18      	ldr	r3, [pc, #96]	; (800114c <HAL_UART_MspInit+0x88>)
 80010ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ee:	4a17      	ldr	r2, [pc, #92]	; (800114c <HAL_UART_MspInit+0x88>)
 80010f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010f4:	6413      	str	r3, [r2, #64]	; 0x40
 80010f6:	4b15      	ldr	r3, [pc, #84]	; (800114c <HAL_UART_MspInit+0x88>)
 80010f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010fe:	613b      	str	r3, [r7, #16]
 8001100:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001102:	2300      	movs	r3, #0
 8001104:	60fb      	str	r3, [r7, #12]
 8001106:	4b11      	ldr	r3, [pc, #68]	; (800114c <HAL_UART_MspInit+0x88>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110a:	4a10      	ldr	r2, [pc, #64]	; (800114c <HAL_UART_MspInit+0x88>)
 800110c:	f043 0301 	orr.w	r3, r3, #1
 8001110:	6313      	str	r3, [r2, #48]	; 0x30
 8001112:	4b0e      	ldr	r3, [pc, #56]	; (800114c <HAL_UART_MspInit+0x88>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001116:	f003 0301 	and.w	r3, r3, #1
 800111a:	60fb      	str	r3, [r7, #12]
 800111c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800111e:	230c      	movs	r3, #12
 8001120:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001122:	2302      	movs	r3, #2
 8001124:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001126:	2300      	movs	r3, #0
 8001128:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800112a:	2303      	movs	r3, #3
 800112c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800112e:	2307      	movs	r3, #7
 8001130:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001132:	f107 0314 	add.w	r3, r7, #20
 8001136:	4619      	mov	r1, r3
 8001138:	4805      	ldr	r0, [pc, #20]	; (8001150 <HAL_UART_MspInit+0x8c>)
 800113a:	f000 f9b1 	bl	80014a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800113e:	bf00      	nop
 8001140:	3728      	adds	r7, #40	; 0x28
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	40004400 	.word	0x40004400
 800114c:	40023800 	.word	0x40023800
 8001150:	40020000 	.word	0x40020000

08001154 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001154:	f8df d034 	ldr.w	sp, [pc, #52]	; 800118c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001158:	480d      	ldr	r0, [pc, #52]	; (8001190 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800115a:	490e      	ldr	r1, [pc, #56]	; (8001194 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800115c:	4a0e      	ldr	r2, [pc, #56]	; (8001198 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800115e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001160:	e002      	b.n	8001168 <LoopCopyDataInit>

08001162 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001162:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001164:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001166:	3304      	adds	r3, #4

08001168 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001168:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800116a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800116c:	d3f9      	bcc.n	8001162 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800116e:	4a0b      	ldr	r2, [pc, #44]	; (800119c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001170:	4c0b      	ldr	r4, [pc, #44]	; (80011a0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001172:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001174:	e001      	b.n	800117a <LoopFillZerobss>

08001176 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001176:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001178:	3204      	adds	r2, #4

0800117a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800117a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800117c:	d3fb      	bcc.n	8001176 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800117e:	f7ff fec9 	bl	8000f14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001182:	f002 fbc1 	bl	8003908 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001186:	f7ff fd73 	bl	8000c70 <main>
  bx  lr    
 800118a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800118c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001190:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001194:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001198:	080057b4 	.word	0x080057b4
  ldr r2, =_sbss
 800119c:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 80011a0:	2000039c 	.word	0x2000039c

080011a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011a4:	e7fe      	b.n	80011a4 <ADC_IRQHandler>
	...

080011a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011ac:	4b0e      	ldr	r3, [pc, #56]	; (80011e8 <HAL_Init+0x40>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a0d      	ldr	r2, [pc, #52]	; (80011e8 <HAL_Init+0x40>)
 80011b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011b8:	4b0b      	ldr	r3, [pc, #44]	; (80011e8 <HAL_Init+0x40>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a0a      	ldr	r2, [pc, #40]	; (80011e8 <HAL_Init+0x40>)
 80011be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011c4:	4b08      	ldr	r3, [pc, #32]	; (80011e8 <HAL_Init+0x40>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a07      	ldr	r2, [pc, #28]	; (80011e8 <HAL_Init+0x40>)
 80011ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011d0:	2003      	movs	r0, #3
 80011d2:	f000 f931 	bl	8001438 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011d6:	2000      	movs	r0, #0
 80011d8:	f000 f808 	bl	80011ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011dc:	f7ff fe12 	bl	8000e04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011e0:	2300      	movs	r3, #0
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	40023c00 	.word	0x40023c00

080011ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011f4:	4b12      	ldr	r3, [pc, #72]	; (8001240 <HAL_InitTick+0x54>)
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	4b12      	ldr	r3, [pc, #72]	; (8001244 <HAL_InitTick+0x58>)
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	4619      	mov	r1, r3
 80011fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001202:	fbb3 f3f1 	udiv	r3, r3, r1
 8001206:	fbb2 f3f3 	udiv	r3, r2, r3
 800120a:	4618      	mov	r0, r3
 800120c:	f000 f93b 	bl	8001486 <HAL_SYSTICK_Config>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001216:	2301      	movs	r3, #1
 8001218:	e00e      	b.n	8001238 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2b0f      	cmp	r3, #15
 800121e:	d80a      	bhi.n	8001236 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001220:	2200      	movs	r2, #0
 8001222:	6879      	ldr	r1, [r7, #4]
 8001224:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001228:	f000 f911 	bl	800144e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800122c:	4a06      	ldr	r2, [pc, #24]	; (8001248 <HAL_InitTick+0x5c>)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001232:	2300      	movs	r3, #0
 8001234:	e000      	b.n	8001238 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001236:	2301      	movs	r3, #1
}
 8001238:	4618      	mov	r0, r3
 800123a:	3708      	adds	r7, #8
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	20000010 	.word	0x20000010
 8001244:	20000018 	.word	0x20000018
 8001248:	20000014 	.word	0x20000014

0800124c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001250:	4b06      	ldr	r3, [pc, #24]	; (800126c <HAL_IncTick+0x20>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	461a      	mov	r2, r3
 8001256:	4b06      	ldr	r3, [pc, #24]	; (8001270 <HAL_IncTick+0x24>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4413      	add	r3, r2
 800125c:	4a04      	ldr	r2, [pc, #16]	; (8001270 <HAL_IncTick+0x24>)
 800125e:	6013      	str	r3, [r2, #0]
}
 8001260:	bf00      	nop
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop
 800126c:	20000018 	.word	0x20000018
 8001270:	20000388 	.word	0x20000388

08001274 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  return uwTick;
 8001278:	4b03      	ldr	r3, [pc, #12]	; (8001288 <HAL_GetTick+0x14>)
 800127a:	681b      	ldr	r3, [r3, #0]
}
 800127c:	4618      	mov	r0, r3
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	20000388 	.word	0x20000388

0800128c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b084      	sub	sp, #16
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001294:	f7ff ffee 	bl	8001274 <HAL_GetTick>
 8001298:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80012a4:	d005      	beq.n	80012b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012a6:	4b0a      	ldr	r3, [pc, #40]	; (80012d0 <HAL_Delay+0x44>)
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	461a      	mov	r2, r3
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	4413      	add	r3, r2
 80012b0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80012b2:	bf00      	nop
 80012b4:	f7ff ffde 	bl	8001274 <HAL_GetTick>
 80012b8:	4602      	mov	r2, r0
 80012ba:	68bb      	ldr	r3, [r7, #8]
 80012bc:	1ad3      	subs	r3, r2, r3
 80012be:	68fa      	ldr	r2, [r7, #12]
 80012c0:	429a      	cmp	r2, r3
 80012c2:	d8f7      	bhi.n	80012b4 <HAL_Delay+0x28>
  {
  }
}
 80012c4:	bf00      	nop
 80012c6:	bf00      	nop
 80012c8:	3710      	adds	r7, #16
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	20000018 	.word	0x20000018

080012d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b085      	sub	sp, #20
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	f003 0307 	and.w	r3, r3, #7
 80012e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012e4:	4b0c      	ldr	r3, [pc, #48]	; (8001318 <__NVIC_SetPriorityGrouping+0x44>)
 80012e6:	68db      	ldr	r3, [r3, #12]
 80012e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012ea:	68ba      	ldr	r2, [r7, #8]
 80012ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012f0:	4013      	ands	r3, r2
 80012f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012f8:	68bb      	ldr	r3, [r7, #8]
 80012fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001300:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001304:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001306:	4a04      	ldr	r2, [pc, #16]	; (8001318 <__NVIC_SetPriorityGrouping+0x44>)
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	60d3      	str	r3, [r2, #12]
}
 800130c:	bf00      	nop
 800130e:	3714      	adds	r7, #20
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr
 8001318:	e000ed00 	.word	0xe000ed00

0800131c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001320:	4b04      	ldr	r3, [pc, #16]	; (8001334 <__NVIC_GetPriorityGrouping+0x18>)
 8001322:	68db      	ldr	r3, [r3, #12]
 8001324:	0a1b      	lsrs	r3, r3, #8
 8001326:	f003 0307 	and.w	r3, r3, #7
}
 800132a:	4618      	mov	r0, r3
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr
 8001334:	e000ed00 	.word	0xe000ed00

08001338 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	4603      	mov	r3, r0
 8001340:	6039      	str	r1, [r7, #0]
 8001342:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001344:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001348:	2b00      	cmp	r3, #0
 800134a:	db0a      	blt.n	8001362 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	b2da      	uxtb	r2, r3
 8001350:	490c      	ldr	r1, [pc, #48]	; (8001384 <__NVIC_SetPriority+0x4c>)
 8001352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001356:	0112      	lsls	r2, r2, #4
 8001358:	b2d2      	uxtb	r2, r2
 800135a:	440b      	add	r3, r1
 800135c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001360:	e00a      	b.n	8001378 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	b2da      	uxtb	r2, r3
 8001366:	4908      	ldr	r1, [pc, #32]	; (8001388 <__NVIC_SetPriority+0x50>)
 8001368:	79fb      	ldrb	r3, [r7, #7]
 800136a:	f003 030f 	and.w	r3, r3, #15
 800136e:	3b04      	subs	r3, #4
 8001370:	0112      	lsls	r2, r2, #4
 8001372:	b2d2      	uxtb	r2, r2
 8001374:	440b      	add	r3, r1
 8001376:	761a      	strb	r2, [r3, #24]
}
 8001378:	bf00      	nop
 800137a:	370c      	adds	r7, #12
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr
 8001384:	e000e100 	.word	0xe000e100
 8001388:	e000ed00 	.word	0xe000ed00

0800138c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800138c:	b480      	push	{r7}
 800138e:	b089      	sub	sp, #36	; 0x24
 8001390:	af00      	add	r7, sp, #0
 8001392:	60f8      	str	r0, [r7, #12]
 8001394:	60b9      	str	r1, [r7, #8]
 8001396:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	f003 0307 	and.w	r3, r3, #7
 800139e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013a0:	69fb      	ldr	r3, [r7, #28]
 80013a2:	f1c3 0307 	rsb	r3, r3, #7
 80013a6:	2b04      	cmp	r3, #4
 80013a8:	bf28      	it	cs
 80013aa:	2304      	movcs	r3, #4
 80013ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	3304      	adds	r3, #4
 80013b2:	2b06      	cmp	r3, #6
 80013b4:	d902      	bls.n	80013bc <NVIC_EncodePriority+0x30>
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	3b03      	subs	r3, #3
 80013ba:	e000      	b.n	80013be <NVIC_EncodePriority+0x32>
 80013bc:	2300      	movs	r3, #0
 80013be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80013c4:	69bb      	ldr	r3, [r7, #24]
 80013c6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ca:	43da      	mvns	r2, r3
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	401a      	ands	r2, r3
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013d4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	fa01 f303 	lsl.w	r3, r1, r3
 80013de:	43d9      	mvns	r1, r3
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013e4:	4313      	orrs	r3, r2
         );
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	3724      	adds	r7, #36	; 0x24
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
	...

080013f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	3b01      	subs	r3, #1
 8001400:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001404:	d301      	bcc.n	800140a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001406:	2301      	movs	r3, #1
 8001408:	e00f      	b.n	800142a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800140a:	4a0a      	ldr	r2, [pc, #40]	; (8001434 <SysTick_Config+0x40>)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	3b01      	subs	r3, #1
 8001410:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001412:	210f      	movs	r1, #15
 8001414:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001418:	f7ff ff8e 	bl	8001338 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800141c:	4b05      	ldr	r3, [pc, #20]	; (8001434 <SysTick_Config+0x40>)
 800141e:	2200      	movs	r2, #0
 8001420:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001422:	4b04      	ldr	r3, [pc, #16]	; (8001434 <SysTick_Config+0x40>)
 8001424:	2207      	movs	r2, #7
 8001426:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001428:	2300      	movs	r3, #0
}
 800142a:	4618      	mov	r0, r3
 800142c:	3708      	adds	r7, #8
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	e000e010 	.word	0xe000e010

08001438 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001440:	6878      	ldr	r0, [r7, #4]
 8001442:	f7ff ff47 	bl	80012d4 <__NVIC_SetPriorityGrouping>
}
 8001446:	bf00      	nop
 8001448:	3708      	adds	r7, #8
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}

0800144e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800144e:	b580      	push	{r7, lr}
 8001450:	b086      	sub	sp, #24
 8001452:	af00      	add	r7, sp, #0
 8001454:	4603      	mov	r3, r0
 8001456:	60b9      	str	r1, [r7, #8]
 8001458:	607a      	str	r2, [r7, #4]
 800145a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800145c:	2300      	movs	r3, #0
 800145e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001460:	f7ff ff5c 	bl	800131c <__NVIC_GetPriorityGrouping>
 8001464:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001466:	687a      	ldr	r2, [r7, #4]
 8001468:	68b9      	ldr	r1, [r7, #8]
 800146a:	6978      	ldr	r0, [r7, #20]
 800146c:	f7ff ff8e 	bl	800138c <NVIC_EncodePriority>
 8001470:	4602      	mov	r2, r0
 8001472:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001476:	4611      	mov	r1, r2
 8001478:	4618      	mov	r0, r3
 800147a:	f7ff ff5d 	bl	8001338 <__NVIC_SetPriority>
}
 800147e:	bf00      	nop
 8001480:	3718      	adds	r7, #24
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}

08001486 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001486:	b580      	push	{r7, lr}
 8001488:	b082      	sub	sp, #8
 800148a:	af00      	add	r7, sp, #0
 800148c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800148e:	6878      	ldr	r0, [r7, #4]
 8001490:	f7ff ffb0 	bl	80013f4 <SysTick_Config>
 8001494:	4603      	mov	r3, r0
}
 8001496:	4618      	mov	r0, r3
 8001498:	3708      	adds	r7, #8
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
	...

080014a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b089      	sub	sp, #36	; 0x24
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
 80014a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80014aa:	2300      	movs	r3, #0
 80014ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80014ae:	2300      	movs	r3, #0
 80014b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80014b2:	2300      	movs	r3, #0
 80014b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014b6:	2300      	movs	r3, #0
 80014b8:	61fb      	str	r3, [r7, #28]
 80014ba:	e165      	b.n	8001788 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80014bc:	2201      	movs	r2, #1
 80014be:	69fb      	ldr	r3, [r7, #28]
 80014c0:	fa02 f303 	lsl.w	r3, r2, r3
 80014c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	697a      	ldr	r2, [r7, #20]
 80014cc:	4013      	ands	r3, r2
 80014ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80014d0:	693a      	ldr	r2, [r7, #16]
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	429a      	cmp	r2, r3
 80014d6:	f040 8154 	bne.w	8001782 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	f003 0303 	and.w	r3, r3, #3
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d005      	beq.n	80014f2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014ee:	2b02      	cmp	r3, #2
 80014f0:	d130      	bne.n	8001554 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	689b      	ldr	r3, [r3, #8]
 80014f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80014f8:	69fb      	ldr	r3, [r7, #28]
 80014fa:	005b      	lsls	r3, r3, #1
 80014fc:	2203      	movs	r2, #3
 80014fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001502:	43db      	mvns	r3, r3
 8001504:	69ba      	ldr	r2, [r7, #24]
 8001506:	4013      	ands	r3, r2
 8001508:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	68da      	ldr	r2, [r3, #12]
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	005b      	lsls	r3, r3, #1
 8001512:	fa02 f303 	lsl.w	r3, r2, r3
 8001516:	69ba      	ldr	r2, [r7, #24]
 8001518:	4313      	orrs	r3, r2
 800151a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	69ba      	ldr	r2, [r7, #24]
 8001520:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001528:	2201      	movs	r2, #1
 800152a:	69fb      	ldr	r3, [r7, #28]
 800152c:	fa02 f303 	lsl.w	r3, r2, r3
 8001530:	43db      	mvns	r3, r3
 8001532:	69ba      	ldr	r2, [r7, #24]
 8001534:	4013      	ands	r3, r2
 8001536:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	091b      	lsrs	r3, r3, #4
 800153e:	f003 0201 	and.w	r2, r3, #1
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	fa02 f303 	lsl.w	r3, r2, r3
 8001548:	69ba      	ldr	r2, [r7, #24]
 800154a:	4313      	orrs	r3, r2
 800154c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	69ba      	ldr	r2, [r7, #24]
 8001552:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	f003 0303 	and.w	r3, r3, #3
 800155c:	2b03      	cmp	r3, #3
 800155e:	d017      	beq.n	8001590 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	68db      	ldr	r3, [r3, #12]
 8001564:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001566:	69fb      	ldr	r3, [r7, #28]
 8001568:	005b      	lsls	r3, r3, #1
 800156a:	2203      	movs	r2, #3
 800156c:	fa02 f303 	lsl.w	r3, r2, r3
 8001570:	43db      	mvns	r3, r3
 8001572:	69ba      	ldr	r2, [r7, #24]
 8001574:	4013      	ands	r3, r2
 8001576:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	689a      	ldr	r2, [r3, #8]
 800157c:	69fb      	ldr	r3, [r7, #28]
 800157e:	005b      	lsls	r3, r3, #1
 8001580:	fa02 f303 	lsl.w	r3, r2, r3
 8001584:	69ba      	ldr	r2, [r7, #24]
 8001586:	4313      	orrs	r3, r2
 8001588:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	69ba      	ldr	r2, [r7, #24]
 800158e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	f003 0303 	and.w	r3, r3, #3
 8001598:	2b02      	cmp	r3, #2
 800159a:	d123      	bne.n	80015e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800159c:	69fb      	ldr	r3, [r7, #28]
 800159e:	08da      	lsrs	r2, r3, #3
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	3208      	adds	r2, #8
 80015a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	f003 0307 	and.w	r3, r3, #7
 80015b0:	009b      	lsls	r3, r3, #2
 80015b2:	220f      	movs	r2, #15
 80015b4:	fa02 f303 	lsl.w	r3, r2, r3
 80015b8:	43db      	mvns	r3, r3
 80015ba:	69ba      	ldr	r2, [r7, #24]
 80015bc:	4013      	ands	r3, r2
 80015be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	691a      	ldr	r2, [r3, #16]
 80015c4:	69fb      	ldr	r3, [r7, #28]
 80015c6:	f003 0307 	and.w	r3, r3, #7
 80015ca:	009b      	lsls	r3, r3, #2
 80015cc:	fa02 f303 	lsl.w	r3, r2, r3
 80015d0:	69ba      	ldr	r2, [r7, #24]
 80015d2:	4313      	orrs	r3, r2
 80015d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	08da      	lsrs	r2, r3, #3
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	3208      	adds	r2, #8
 80015de:	69b9      	ldr	r1, [r7, #24]
 80015e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80015ea:	69fb      	ldr	r3, [r7, #28]
 80015ec:	005b      	lsls	r3, r3, #1
 80015ee:	2203      	movs	r2, #3
 80015f0:	fa02 f303 	lsl.w	r3, r2, r3
 80015f4:	43db      	mvns	r3, r3
 80015f6:	69ba      	ldr	r2, [r7, #24]
 80015f8:	4013      	ands	r3, r2
 80015fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	f003 0203 	and.w	r2, r3, #3
 8001604:	69fb      	ldr	r3, [r7, #28]
 8001606:	005b      	lsls	r3, r3, #1
 8001608:	fa02 f303 	lsl.w	r3, r2, r3
 800160c:	69ba      	ldr	r2, [r7, #24]
 800160e:	4313      	orrs	r3, r2
 8001610:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	69ba      	ldr	r2, [r7, #24]
 8001616:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001620:	2b00      	cmp	r3, #0
 8001622:	f000 80ae 	beq.w	8001782 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001626:	2300      	movs	r3, #0
 8001628:	60fb      	str	r3, [r7, #12]
 800162a:	4b5d      	ldr	r3, [pc, #372]	; (80017a0 <HAL_GPIO_Init+0x300>)
 800162c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800162e:	4a5c      	ldr	r2, [pc, #368]	; (80017a0 <HAL_GPIO_Init+0x300>)
 8001630:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001634:	6453      	str	r3, [r2, #68]	; 0x44
 8001636:	4b5a      	ldr	r3, [pc, #360]	; (80017a0 <HAL_GPIO_Init+0x300>)
 8001638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800163a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800163e:	60fb      	str	r3, [r7, #12]
 8001640:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001642:	4a58      	ldr	r2, [pc, #352]	; (80017a4 <HAL_GPIO_Init+0x304>)
 8001644:	69fb      	ldr	r3, [r7, #28]
 8001646:	089b      	lsrs	r3, r3, #2
 8001648:	3302      	adds	r3, #2
 800164a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800164e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001650:	69fb      	ldr	r3, [r7, #28]
 8001652:	f003 0303 	and.w	r3, r3, #3
 8001656:	009b      	lsls	r3, r3, #2
 8001658:	220f      	movs	r2, #15
 800165a:	fa02 f303 	lsl.w	r3, r2, r3
 800165e:	43db      	mvns	r3, r3
 8001660:	69ba      	ldr	r2, [r7, #24]
 8001662:	4013      	ands	r3, r2
 8001664:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	4a4f      	ldr	r2, [pc, #316]	; (80017a8 <HAL_GPIO_Init+0x308>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d025      	beq.n	80016ba <HAL_GPIO_Init+0x21a>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	4a4e      	ldr	r2, [pc, #312]	; (80017ac <HAL_GPIO_Init+0x30c>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d01f      	beq.n	80016b6 <HAL_GPIO_Init+0x216>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	4a4d      	ldr	r2, [pc, #308]	; (80017b0 <HAL_GPIO_Init+0x310>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d019      	beq.n	80016b2 <HAL_GPIO_Init+0x212>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	4a4c      	ldr	r2, [pc, #304]	; (80017b4 <HAL_GPIO_Init+0x314>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d013      	beq.n	80016ae <HAL_GPIO_Init+0x20e>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	4a4b      	ldr	r2, [pc, #300]	; (80017b8 <HAL_GPIO_Init+0x318>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d00d      	beq.n	80016aa <HAL_GPIO_Init+0x20a>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	4a4a      	ldr	r2, [pc, #296]	; (80017bc <HAL_GPIO_Init+0x31c>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d007      	beq.n	80016a6 <HAL_GPIO_Init+0x206>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	4a49      	ldr	r2, [pc, #292]	; (80017c0 <HAL_GPIO_Init+0x320>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d101      	bne.n	80016a2 <HAL_GPIO_Init+0x202>
 800169e:	2306      	movs	r3, #6
 80016a0:	e00c      	b.n	80016bc <HAL_GPIO_Init+0x21c>
 80016a2:	2307      	movs	r3, #7
 80016a4:	e00a      	b.n	80016bc <HAL_GPIO_Init+0x21c>
 80016a6:	2305      	movs	r3, #5
 80016a8:	e008      	b.n	80016bc <HAL_GPIO_Init+0x21c>
 80016aa:	2304      	movs	r3, #4
 80016ac:	e006      	b.n	80016bc <HAL_GPIO_Init+0x21c>
 80016ae:	2303      	movs	r3, #3
 80016b0:	e004      	b.n	80016bc <HAL_GPIO_Init+0x21c>
 80016b2:	2302      	movs	r3, #2
 80016b4:	e002      	b.n	80016bc <HAL_GPIO_Init+0x21c>
 80016b6:	2301      	movs	r3, #1
 80016b8:	e000      	b.n	80016bc <HAL_GPIO_Init+0x21c>
 80016ba:	2300      	movs	r3, #0
 80016bc:	69fa      	ldr	r2, [r7, #28]
 80016be:	f002 0203 	and.w	r2, r2, #3
 80016c2:	0092      	lsls	r2, r2, #2
 80016c4:	4093      	lsls	r3, r2
 80016c6:	69ba      	ldr	r2, [r7, #24]
 80016c8:	4313      	orrs	r3, r2
 80016ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016cc:	4935      	ldr	r1, [pc, #212]	; (80017a4 <HAL_GPIO_Init+0x304>)
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	089b      	lsrs	r3, r3, #2
 80016d2:	3302      	adds	r3, #2
 80016d4:	69ba      	ldr	r2, [r7, #24]
 80016d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016da:	4b3a      	ldr	r3, [pc, #232]	; (80017c4 <HAL_GPIO_Init+0x324>)
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	43db      	mvns	r3, r3
 80016e4:	69ba      	ldr	r2, [r7, #24]
 80016e6:	4013      	ands	r3, r2
 80016e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d003      	beq.n	80016fe <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80016f6:	69ba      	ldr	r2, [r7, #24]
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	4313      	orrs	r3, r2
 80016fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80016fe:	4a31      	ldr	r2, [pc, #196]	; (80017c4 <HAL_GPIO_Init+0x324>)
 8001700:	69bb      	ldr	r3, [r7, #24]
 8001702:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001704:	4b2f      	ldr	r3, [pc, #188]	; (80017c4 <HAL_GPIO_Init+0x324>)
 8001706:	68db      	ldr	r3, [r3, #12]
 8001708:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	43db      	mvns	r3, r3
 800170e:	69ba      	ldr	r2, [r7, #24]
 8001710:	4013      	ands	r3, r2
 8001712:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800171c:	2b00      	cmp	r3, #0
 800171e:	d003      	beq.n	8001728 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001720:	69ba      	ldr	r2, [r7, #24]
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	4313      	orrs	r3, r2
 8001726:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001728:	4a26      	ldr	r2, [pc, #152]	; (80017c4 <HAL_GPIO_Init+0x324>)
 800172a:	69bb      	ldr	r3, [r7, #24]
 800172c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800172e:	4b25      	ldr	r3, [pc, #148]	; (80017c4 <HAL_GPIO_Init+0x324>)
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	43db      	mvns	r3, r3
 8001738:	69ba      	ldr	r2, [r7, #24]
 800173a:	4013      	ands	r3, r2
 800173c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001746:	2b00      	cmp	r3, #0
 8001748:	d003      	beq.n	8001752 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800174a:	69ba      	ldr	r2, [r7, #24]
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	4313      	orrs	r3, r2
 8001750:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001752:	4a1c      	ldr	r2, [pc, #112]	; (80017c4 <HAL_GPIO_Init+0x324>)
 8001754:	69bb      	ldr	r3, [r7, #24]
 8001756:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001758:	4b1a      	ldr	r3, [pc, #104]	; (80017c4 <HAL_GPIO_Init+0x324>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	43db      	mvns	r3, r3
 8001762:	69ba      	ldr	r2, [r7, #24]
 8001764:	4013      	ands	r3, r2
 8001766:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001770:	2b00      	cmp	r3, #0
 8001772:	d003      	beq.n	800177c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001774:	69ba      	ldr	r2, [r7, #24]
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	4313      	orrs	r3, r2
 800177a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800177c:	4a11      	ldr	r2, [pc, #68]	; (80017c4 <HAL_GPIO_Init+0x324>)
 800177e:	69bb      	ldr	r3, [r7, #24]
 8001780:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	3301      	adds	r3, #1
 8001786:	61fb      	str	r3, [r7, #28]
 8001788:	69fb      	ldr	r3, [r7, #28]
 800178a:	2b0f      	cmp	r3, #15
 800178c:	f67f ae96 	bls.w	80014bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001790:	bf00      	nop
 8001792:	bf00      	nop
 8001794:	3724      	adds	r7, #36	; 0x24
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop
 80017a0:	40023800 	.word	0x40023800
 80017a4:	40013800 	.word	0x40013800
 80017a8:	40020000 	.word	0x40020000
 80017ac:	40020400 	.word	0x40020400
 80017b0:	40020800 	.word	0x40020800
 80017b4:	40020c00 	.word	0x40020c00
 80017b8:	40021000 	.word	0x40021000
 80017bc:	40021400 	.word	0x40021400
 80017c0:	40021800 	.word	0x40021800
 80017c4:	40013c00 	.word	0x40013c00

080017c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b084      	sub	sp, #16
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d101      	bne.n	80017da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	e12b      	b.n	8001a32 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d106      	bne.n	80017f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2200      	movs	r2, #0
 80017ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80017ee:	6878      	ldr	r0, [r7, #4]
 80017f0:	f7ff f9f6 	bl	8000be0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2224      	movs	r2, #36	; 0x24
 80017f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f022 0201 	bic.w	r2, r2, #1
 800180a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800181a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800182a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800182c:	f000 fe38 	bl	80024a0 <HAL_RCC_GetPCLK1Freq>
 8001830:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	4a81      	ldr	r2, [pc, #516]	; (8001a3c <HAL_I2C_Init+0x274>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d807      	bhi.n	800184c <HAL_I2C_Init+0x84>
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	4a80      	ldr	r2, [pc, #512]	; (8001a40 <HAL_I2C_Init+0x278>)
 8001840:	4293      	cmp	r3, r2
 8001842:	bf94      	ite	ls
 8001844:	2301      	movls	r3, #1
 8001846:	2300      	movhi	r3, #0
 8001848:	b2db      	uxtb	r3, r3
 800184a:	e006      	b.n	800185a <HAL_I2C_Init+0x92>
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	4a7d      	ldr	r2, [pc, #500]	; (8001a44 <HAL_I2C_Init+0x27c>)
 8001850:	4293      	cmp	r3, r2
 8001852:	bf94      	ite	ls
 8001854:	2301      	movls	r3, #1
 8001856:	2300      	movhi	r3, #0
 8001858:	b2db      	uxtb	r3, r3
 800185a:	2b00      	cmp	r3, #0
 800185c:	d001      	beq.n	8001862 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e0e7      	b.n	8001a32 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	4a78      	ldr	r2, [pc, #480]	; (8001a48 <HAL_I2C_Init+0x280>)
 8001866:	fba2 2303 	umull	r2, r3, r2, r3
 800186a:	0c9b      	lsrs	r3, r3, #18
 800186c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	68ba      	ldr	r2, [r7, #8]
 800187e:	430a      	orrs	r2, r1
 8001880:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	6a1b      	ldr	r3, [r3, #32]
 8001888:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	4a6a      	ldr	r2, [pc, #424]	; (8001a3c <HAL_I2C_Init+0x274>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d802      	bhi.n	800189c <HAL_I2C_Init+0xd4>
 8001896:	68bb      	ldr	r3, [r7, #8]
 8001898:	3301      	adds	r3, #1
 800189a:	e009      	b.n	80018b0 <HAL_I2C_Init+0xe8>
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80018a2:	fb02 f303 	mul.w	r3, r2, r3
 80018a6:	4a69      	ldr	r2, [pc, #420]	; (8001a4c <HAL_I2C_Init+0x284>)
 80018a8:	fba2 2303 	umull	r2, r3, r2, r3
 80018ac:	099b      	lsrs	r3, r3, #6
 80018ae:	3301      	adds	r3, #1
 80018b0:	687a      	ldr	r2, [r7, #4]
 80018b2:	6812      	ldr	r2, [r2, #0]
 80018b4:	430b      	orrs	r3, r1
 80018b6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	69db      	ldr	r3, [r3, #28]
 80018be:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80018c2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	495c      	ldr	r1, [pc, #368]	; (8001a3c <HAL_I2C_Init+0x274>)
 80018cc:	428b      	cmp	r3, r1
 80018ce:	d819      	bhi.n	8001904 <HAL_I2C_Init+0x13c>
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	1e59      	subs	r1, r3, #1
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	005b      	lsls	r3, r3, #1
 80018da:	fbb1 f3f3 	udiv	r3, r1, r3
 80018de:	1c59      	adds	r1, r3, #1
 80018e0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80018e4:	400b      	ands	r3, r1
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d00a      	beq.n	8001900 <HAL_I2C_Init+0x138>
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	1e59      	subs	r1, r3, #1
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	005b      	lsls	r3, r3, #1
 80018f4:	fbb1 f3f3 	udiv	r3, r1, r3
 80018f8:	3301      	adds	r3, #1
 80018fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018fe:	e051      	b.n	80019a4 <HAL_I2C_Init+0x1dc>
 8001900:	2304      	movs	r3, #4
 8001902:	e04f      	b.n	80019a4 <HAL_I2C_Init+0x1dc>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d111      	bne.n	8001930 <HAL_I2C_Init+0x168>
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	1e58      	subs	r0, r3, #1
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6859      	ldr	r1, [r3, #4]
 8001914:	460b      	mov	r3, r1
 8001916:	005b      	lsls	r3, r3, #1
 8001918:	440b      	add	r3, r1
 800191a:	fbb0 f3f3 	udiv	r3, r0, r3
 800191e:	3301      	adds	r3, #1
 8001920:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001924:	2b00      	cmp	r3, #0
 8001926:	bf0c      	ite	eq
 8001928:	2301      	moveq	r3, #1
 800192a:	2300      	movne	r3, #0
 800192c:	b2db      	uxtb	r3, r3
 800192e:	e012      	b.n	8001956 <HAL_I2C_Init+0x18e>
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	1e58      	subs	r0, r3, #1
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6859      	ldr	r1, [r3, #4]
 8001938:	460b      	mov	r3, r1
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	440b      	add	r3, r1
 800193e:	0099      	lsls	r1, r3, #2
 8001940:	440b      	add	r3, r1
 8001942:	fbb0 f3f3 	udiv	r3, r0, r3
 8001946:	3301      	adds	r3, #1
 8001948:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800194c:	2b00      	cmp	r3, #0
 800194e:	bf0c      	ite	eq
 8001950:	2301      	moveq	r3, #1
 8001952:	2300      	movne	r3, #0
 8001954:	b2db      	uxtb	r3, r3
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <HAL_I2C_Init+0x196>
 800195a:	2301      	movs	r3, #1
 800195c:	e022      	b.n	80019a4 <HAL_I2C_Init+0x1dc>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d10e      	bne.n	8001984 <HAL_I2C_Init+0x1bc>
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	1e58      	subs	r0, r3, #1
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6859      	ldr	r1, [r3, #4]
 800196e:	460b      	mov	r3, r1
 8001970:	005b      	lsls	r3, r3, #1
 8001972:	440b      	add	r3, r1
 8001974:	fbb0 f3f3 	udiv	r3, r0, r3
 8001978:	3301      	adds	r3, #1
 800197a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800197e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001982:	e00f      	b.n	80019a4 <HAL_I2C_Init+0x1dc>
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	1e58      	subs	r0, r3, #1
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6859      	ldr	r1, [r3, #4]
 800198c:	460b      	mov	r3, r1
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	440b      	add	r3, r1
 8001992:	0099      	lsls	r1, r3, #2
 8001994:	440b      	add	r3, r1
 8001996:	fbb0 f3f3 	udiv	r3, r0, r3
 800199a:	3301      	adds	r3, #1
 800199c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80019a4:	6879      	ldr	r1, [r7, #4]
 80019a6:	6809      	ldr	r1, [r1, #0]
 80019a8:	4313      	orrs	r3, r2
 80019aa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	69da      	ldr	r2, [r3, #28]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6a1b      	ldr	r3, [r3, #32]
 80019be:	431a      	orrs	r2, r3
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	430a      	orrs	r2, r1
 80019c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80019d2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80019d6:	687a      	ldr	r2, [r7, #4]
 80019d8:	6911      	ldr	r1, [r2, #16]
 80019da:	687a      	ldr	r2, [r7, #4]
 80019dc:	68d2      	ldr	r2, [r2, #12]
 80019de:	4311      	orrs	r1, r2
 80019e0:	687a      	ldr	r2, [r7, #4]
 80019e2:	6812      	ldr	r2, [r2, #0]
 80019e4:	430b      	orrs	r3, r1
 80019e6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	68db      	ldr	r3, [r3, #12]
 80019ee:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	695a      	ldr	r2, [r3, #20]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	699b      	ldr	r3, [r3, #24]
 80019fa:	431a      	orrs	r2, r3
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	430a      	orrs	r2, r1
 8001a02:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f042 0201 	orr.w	r2, r2, #1
 8001a12:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2200      	movs	r2, #0
 8001a18:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2220      	movs	r2, #32
 8001a1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2200      	movs	r2, #0
 8001a26:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001a30:	2300      	movs	r3, #0
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3710      	adds	r7, #16
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	000186a0 	.word	0x000186a0
 8001a40:	001e847f 	.word	0x001e847f
 8001a44:	003d08ff 	.word	0x003d08ff
 8001a48:	431bde83 	.word	0x431bde83
 8001a4c:	10624dd3 	.word	0x10624dd3

08001a50 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b088      	sub	sp, #32
 8001a54:	af02      	add	r7, sp, #8
 8001a56:	60f8      	str	r0, [r7, #12]
 8001a58:	607a      	str	r2, [r7, #4]
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	460b      	mov	r3, r1
 8001a5e:	817b      	strh	r3, [r7, #10]
 8001a60:	4613      	mov	r3, r2
 8001a62:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001a64:	f7ff fc06 	bl	8001274 <HAL_GetTick>
 8001a68:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a70:	b2db      	uxtb	r3, r3
 8001a72:	2b20      	cmp	r3, #32
 8001a74:	f040 80e0 	bne.w	8001c38 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	9300      	str	r3, [sp, #0]
 8001a7c:	2319      	movs	r3, #25
 8001a7e:	2201      	movs	r2, #1
 8001a80:	4970      	ldr	r1, [pc, #448]	; (8001c44 <HAL_I2C_Master_Transmit+0x1f4>)
 8001a82:	68f8      	ldr	r0, [r7, #12]
 8001a84:	f000 fa92 	bl	8001fac <I2C_WaitOnFlagUntilTimeout>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d001      	beq.n	8001a92 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001a8e:	2302      	movs	r3, #2
 8001a90:	e0d3      	b.n	8001c3a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a98:	2b01      	cmp	r3, #1
 8001a9a:	d101      	bne.n	8001aa0 <HAL_I2C_Master_Transmit+0x50>
 8001a9c:	2302      	movs	r3, #2
 8001a9e:	e0cc      	b.n	8001c3a <HAL_I2C_Master_Transmit+0x1ea>
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 0301 	and.w	r3, r3, #1
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d007      	beq.n	8001ac6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f042 0201 	orr.w	r2, r2, #1
 8001ac4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ad4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	2221      	movs	r2, #33	; 0x21
 8001ada:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	2210      	movs	r2, #16
 8001ae2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	687a      	ldr	r2, [r7, #4]
 8001af0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	893a      	ldrh	r2, [r7, #8]
 8001af6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001afc:	b29a      	uxth	r2, r3
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	4a50      	ldr	r2, [pc, #320]	; (8001c48 <HAL_I2C_Master_Transmit+0x1f8>)
 8001b06:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001b08:	8979      	ldrh	r1, [r7, #10]
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	6a3a      	ldr	r2, [r7, #32]
 8001b0e:	68f8      	ldr	r0, [r7, #12]
 8001b10:	f000 f9ca 	bl	8001ea8 <I2C_MasterRequestWrite>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d001      	beq.n	8001b1e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e08d      	b.n	8001c3a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b1e:	2300      	movs	r3, #0
 8001b20:	613b      	str	r3, [r7, #16]
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	695b      	ldr	r3, [r3, #20]
 8001b28:	613b      	str	r3, [r7, #16]
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	699b      	ldr	r3, [r3, #24]
 8001b30:	613b      	str	r3, [r7, #16]
 8001b32:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001b34:	e066      	b.n	8001c04 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b36:	697a      	ldr	r2, [r7, #20]
 8001b38:	6a39      	ldr	r1, [r7, #32]
 8001b3a:	68f8      	ldr	r0, [r7, #12]
 8001b3c:	f000 fb0c 	bl	8002158 <I2C_WaitOnTXEFlagUntilTimeout>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d00d      	beq.n	8001b62 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4a:	2b04      	cmp	r3, #4
 8001b4c:	d107      	bne.n	8001b5e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b5c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e06b      	b.n	8001c3a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b66:	781a      	ldrb	r2, [r3, #0]
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b72:	1c5a      	adds	r2, r3, #1
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b7c:	b29b      	uxth	r3, r3
 8001b7e:	3b01      	subs	r3, #1
 8001b80:	b29a      	uxth	r2, r3
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b8a:	3b01      	subs	r3, #1
 8001b8c:	b29a      	uxth	r2, r3
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	695b      	ldr	r3, [r3, #20]
 8001b98:	f003 0304 	and.w	r3, r3, #4
 8001b9c:	2b04      	cmp	r3, #4
 8001b9e:	d11b      	bne.n	8001bd8 <HAL_I2C_Master_Transmit+0x188>
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d017      	beq.n	8001bd8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bac:	781a      	ldrb	r2, [r3, #0]
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb8:	1c5a      	adds	r2, r3, #1
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bc2:	b29b      	uxth	r3, r3
 8001bc4:	3b01      	subs	r3, #1
 8001bc6:	b29a      	uxth	r2, r3
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bd0:	3b01      	subs	r3, #1
 8001bd2:	b29a      	uxth	r2, r3
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bd8:	697a      	ldr	r2, [r7, #20]
 8001bda:	6a39      	ldr	r1, [r7, #32]
 8001bdc:	68f8      	ldr	r0, [r7, #12]
 8001bde:	f000 fafc 	bl	80021da <I2C_WaitOnBTFFlagUntilTimeout>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d00d      	beq.n	8001c04 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bec:	2b04      	cmp	r3, #4
 8001bee:	d107      	bne.n	8001c00 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001bfe:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	e01a      	b.n	8001c3a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d194      	bne.n	8001b36 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c1a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	2220      	movs	r2, #32
 8001c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	2200      	movs	r2, #0
 8001c28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001c34:	2300      	movs	r3, #0
 8001c36:	e000      	b.n	8001c3a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001c38:	2302      	movs	r3, #2
  }
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3718      	adds	r7, #24
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	00100002 	.word	0x00100002
 8001c48:	ffff0000 	.word	0xffff0000

08001c4c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b08a      	sub	sp, #40	; 0x28
 8001c50:	af02      	add	r7, sp, #8
 8001c52:	60f8      	str	r0, [r7, #12]
 8001c54:	607a      	str	r2, [r7, #4]
 8001c56:	603b      	str	r3, [r7, #0]
 8001c58:	460b      	mov	r3, r1
 8001c5a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001c5c:	f7ff fb0a 	bl	8001274 <HAL_GetTick>
 8001c60:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8001c62:	2300      	movs	r3, #0
 8001c64:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	2b20      	cmp	r3, #32
 8001c70:	f040 8111 	bne.w	8001e96 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001c74:	69fb      	ldr	r3, [r7, #28]
 8001c76:	9300      	str	r3, [sp, #0]
 8001c78:	2319      	movs	r3, #25
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	4988      	ldr	r1, [pc, #544]	; (8001ea0 <HAL_I2C_IsDeviceReady+0x254>)
 8001c7e:	68f8      	ldr	r0, [r7, #12]
 8001c80:	f000 f994 	bl	8001fac <I2C_WaitOnFlagUntilTimeout>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d001      	beq.n	8001c8e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8001c8a:	2302      	movs	r3, #2
 8001c8c:	e104      	b.n	8001e98 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d101      	bne.n	8001c9c <HAL_I2C_IsDeviceReady+0x50>
 8001c98:	2302      	movs	r3, #2
 8001c9a:	e0fd      	b.n	8001e98 <HAL_I2C_IsDeviceReady+0x24c>
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f003 0301 	and.w	r3, r3, #1
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d007      	beq.n	8001cc2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f042 0201 	orr.w	r2, r2, #1
 8001cc0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001cd0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	2224      	movs	r2, #36	; 0x24
 8001cd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	4a70      	ldr	r2, [pc, #448]	; (8001ea4 <HAL_I2C_IsDeviceReady+0x258>)
 8001ce4:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001cf4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001cf6:	69fb      	ldr	r3, [r7, #28]
 8001cf8:	9300      	str	r3, [sp, #0]
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001d02:	68f8      	ldr	r0, [r7, #12]
 8001d04:	f000 f952 	bl	8001fac <I2C_WaitOnFlagUntilTimeout>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d00d      	beq.n	8001d2a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d1c:	d103      	bne.n	8001d26 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d24:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8001d26:	2303      	movs	r3, #3
 8001d28:	e0b6      	b.n	8001e98 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001d2a:	897b      	ldrh	r3, [r7, #10]
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	461a      	mov	r2, r3
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001d38:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001d3a:	f7ff fa9b 	bl	8001274 <HAL_GetTick>
 8001d3e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	695b      	ldr	r3, [r3, #20]
 8001d46:	f003 0302 	and.w	r3, r3, #2
 8001d4a:	2b02      	cmp	r3, #2
 8001d4c:	bf0c      	ite	eq
 8001d4e:	2301      	moveq	r3, #1
 8001d50:	2300      	movne	r3, #0
 8001d52:	b2db      	uxtb	r3, r3
 8001d54:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	695b      	ldr	r3, [r3, #20]
 8001d5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d64:	bf0c      	ite	eq
 8001d66:	2301      	moveq	r3, #1
 8001d68:	2300      	movne	r3, #0
 8001d6a:	b2db      	uxtb	r3, r3
 8001d6c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001d6e:	e025      	b.n	8001dbc <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001d70:	f7ff fa80 	bl	8001274 <HAL_GetTick>
 8001d74:	4602      	mov	r2, r0
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	683a      	ldr	r2, [r7, #0]
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	d302      	bcc.n	8001d86 <HAL_I2C_IsDeviceReady+0x13a>
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d103      	bne.n	8001d8e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	22a0      	movs	r2, #160	; 0xa0
 8001d8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	695b      	ldr	r3, [r3, #20]
 8001d94:	f003 0302 	and.w	r3, r3, #2
 8001d98:	2b02      	cmp	r3, #2
 8001d9a:	bf0c      	ite	eq
 8001d9c:	2301      	moveq	r3, #1
 8001d9e:	2300      	movne	r3, #0
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	695b      	ldr	r3, [r3, #20]
 8001daa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001db2:	bf0c      	ite	eq
 8001db4:	2301      	moveq	r3, #1
 8001db6:	2300      	movne	r3, #0
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dc2:	b2db      	uxtb	r3, r3
 8001dc4:	2ba0      	cmp	r3, #160	; 0xa0
 8001dc6:	d005      	beq.n	8001dd4 <HAL_I2C_IsDeviceReady+0x188>
 8001dc8:	7dfb      	ldrb	r3, [r7, #23]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d102      	bne.n	8001dd4 <HAL_I2C_IsDeviceReady+0x188>
 8001dce:	7dbb      	ldrb	r3, [r7, #22]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d0cd      	beq.n	8001d70 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	2220      	movs	r2, #32
 8001dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	695b      	ldr	r3, [r3, #20]
 8001de2:	f003 0302 	and.w	r3, r3, #2
 8001de6:	2b02      	cmp	r3, #2
 8001de8:	d129      	bne.n	8001e3e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001df8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	613b      	str	r3, [r7, #16]
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	695b      	ldr	r3, [r3, #20]
 8001e04:	613b      	str	r3, [r7, #16]
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	699b      	ldr	r3, [r3, #24]
 8001e0c:	613b      	str	r3, [r7, #16]
 8001e0e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e10:	69fb      	ldr	r3, [r7, #28]
 8001e12:	9300      	str	r3, [sp, #0]
 8001e14:	2319      	movs	r3, #25
 8001e16:	2201      	movs	r2, #1
 8001e18:	4921      	ldr	r1, [pc, #132]	; (8001ea0 <HAL_I2C_IsDeviceReady+0x254>)
 8001e1a:	68f8      	ldr	r0, [r7, #12]
 8001e1c:	f000 f8c6 	bl	8001fac <I2C_WaitOnFlagUntilTimeout>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d001      	beq.n	8001e2a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e036      	b.n	8001e98 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	2220      	movs	r2, #32
 8001e2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	2200      	movs	r2, #0
 8001e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	e02c      	b.n	8001e98 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e4c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001e56:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e58:	69fb      	ldr	r3, [r7, #28]
 8001e5a:	9300      	str	r3, [sp, #0]
 8001e5c:	2319      	movs	r3, #25
 8001e5e:	2201      	movs	r2, #1
 8001e60:	490f      	ldr	r1, [pc, #60]	; (8001ea0 <HAL_I2C_IsDeviceReady+0x254>)
 8001e62:	68f8      	ldr	r0, [r7, #12]
 8001e64:	f000 f8a2 	bl	8001fac <I2C_WaitOnFlagUntilTimeout>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d001      	beq.n	8001e72 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e012      	b.n	8001e98 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8001e72:	69bb      	ldr	r3, [r7, #24]
 8001e74:	3301      	adds	r3, #1
 8001e76:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8001e78:	69ba      	ldr	r2, [r7, #24]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	f4ff af32 	bcc.w	8001ce6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	2220      	movs	r2, #32
 8001e86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e000      	b.n	8001e98 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8001e96:	2302      	movs	r3, #2
  }
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	3720      	adds	r7, #32
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	00100002 	.word	0x00100002
 8001ea4:	ffff0000 	.word	0xffff0000

08001ea8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b088      	sub	sp, #32
 8001eac:	af02      	add	r7, sp, #8
 8001eae:	60f8      	str	r0, [r7, #12]
 8001eb0:	607a      	str	r2, [r7, #4]
 8001eb2:	603b      	str	r3, [r7, #0]
 8001eb4:	460b      	mov	r3, r1
 8001eb6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ebc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	2b08      	cmp	r3, #8
 8001ec2:	d006      	beq.n	8001ed2 <I2C_MasterRequestWrite+0x2a>
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d003      	beq.n	8001ed2 <I2C_MasterRequestWrite+0x2a>
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001ed0:	d108      	bne.n	8001ee4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ee0:	601a      	str	r2, [r3, #0]
 8001ee2:	e00b      	b.n	8001efc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee8:	2b12      	cmp	r3, #18
 8001eea:	d107      	bne.n	8001efc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001efa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	9300      	str	r3, [sp, #0]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2200      	movs	r2, #0
 8001f04:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001f08:	68f8      	ldr	r0, [r7, #12]
 8001f0a:	f000 f84f 	bl	8001fac <I2C_WaitOnFlagUntilTimeout>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d00d      	beq.n	8001f30 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f22:	d103      	bne.n	8001f2c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f2a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001f2c:	2303      	movs	r3, #3
 8001f2e:	e035      	b.n	8001f9c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	691b      	ldr	r3, [r3, #16]
 8001f34:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001f38:	d108      	bne.n	8001f4c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001f3a:	897b      	ldrh	r3, [r7, #10]
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	461a      	mov	r2, r3
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001f48:	611a      	str	r2, [r3, #16]
 8001f4a:	e01b      	b.n	8001f84 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001f4c:	897b      	ldrh	r3, [r7, #10]
 8001f4e:	11db      	asrs	r3, r3, #7
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	f003 0306 	and.w	r3, r3, #6
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	f063 030f 	orn	r3, r3, #15
 8001f5c:	b2da      	uxtb	r2, r3
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	687a      	ldr	r2, [r7, #4]
 8001f68:	490e      	ldr	r1, [pc, #56]	; (8001fa4 <I2C_MasterRequestWrite+0xfc>)
 8001f6a:	68f8      	ldr	r0, [r7, #12]
 8001f6c:	f000 f875 	bl	800205a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d001      	beq.n	8001f7a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e010      	b.n	8001f9c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001f7a:	897b      	ldrh	r3, [r7, #10]
 8001f7c:	b2da      	uxtb	r2, r3
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	687a      	ldr	r2, [r7, #4]
 8001f88:	4907      	ldr	r1, [pc, #28]	; (8001fa8 <I2C_MasterRequestWrite+0x100>)
 8001f8a:	68f8      	ldr	r0, [r7, #12]
 8001f8c:	f000 f865 	bl	800205a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d001      	beq.n	8001f9a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e000      	b.n	8001f9c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001f9a:	2300      	movs	r3, #0
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	3718      	adds	r7, #24
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	00010008 	.word	0x00010008
 8001fa8:	00010002 	.word	0x00010002

08001fac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b084      	sub	sp, #16
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	60f8      	str	r0, [r7, #12]
 8001fb4:	60b9      	str	r1, [r7, #8]
 8001fb6:	603b      	str	r3, [r7, #0]
 8001fb8:	4613      	mov	r3, r2
 8001fba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001fbc:	e025      	b.n	800200a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001fc4:	d021      	beq.n	800200a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fc6:	f7ff f955 	bl	8001274 <HAL_GetTick>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	69bb      	ldr	r3, [r7, #24]
 8001fce:	1ad3      	subs	r3, r2, r3
 8001fd0:	683a      	ldr	r2, [r7, #0]
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	d302      	bcc.n	8001fdc <I2C_WaitOnFlagUntilTimeout+0x30>
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d116      	bne.n	800200a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	2220      	movs	r2, #32
 8001fe6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	2200      	movs	r2, #0
 8001fee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff6:	f043 0220 	orr.w	r2, r3, #32
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	2200      	movs	r2, #0
 8002002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e023      	b.n	8002052 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	0c1b      	lsrs	r3, r3, #16
 800200e:	b2db      	uxtb	r3, r3
 8002010:	2b01      	cmp	r3, #1
 8002012:	d10d      	bne.n	8002030 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	695b      	ldr	r3, [r3, #20]
 800201a:	43da      	mvns	r2, r3
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	4013      	ands	r3, r2
 8002020:	b29b      	uxth	r3, r3
 8002022:	2b00      	cmp	r3, #0
 8002024:	bf0c      	ite	eq
 8002026:	2301      	moveq	r3, #1
 8002028:	2300      	movne	r3, #0
 800202a:	b2db      	uxtb	r3, r3
 800202c:	461a      	mov	r2, r3
 800202e:	e00c      	b.n	800204a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	699b      	ldr	r3, [r3, #24]
 8002036:	43da      	mvns	r2, r3
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	4013      	ands	r3, r2
 800203c:	b29b      	uxth	r3, r3
 800203e:	2b00      	cmp	r3, #0
 8002040:	bf0c      	ite	eq
 8002042:	2301      	moveq	r3, #1
 8002044:	2300      	movne	r3, #0
 8002046:	b2db      	uxtb	r3, r3
 8002048:	461a      	mov	r2, r3
 800204a:	79fb      	ldrb	r3, [r7, #7]
 800204c:	429a      	cmp	r2, r3
 800204e:	d0b6      	beq.n	8001fbe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002050:	2300      	movs	r3, #0
}
 8002052:	4618      	mov	r0, r3
 8002054:	3710      	adds	r7, #16
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}

0800205a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800205a:	b580      	push	{r7, lr}
 800205c:	b084      	sub	sp, #16
 800205e:	af00      	add	r7, sp, #0
 8002060:	60f8      	str	r0, [r7, #12]
 8002062:	60b9      	str	r1, [r7, #8]
 8002064:	607a      	str	r2, [r7, #4]
 8002066:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002068:	e051      	b.n	800210e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	695b      	ldr	r3, [r3, #20]
 8002070:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002074:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002078:	d123      	bne.n	80020c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002088:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002092:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	2200      	movs	r2, #0
 8002098:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	2220      	movs	r2, #32
 800209e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	2200      	movs	r2, #0
 80020a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ae:	f043 0204 	orr.w	r2, r3, #4
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	2200      	movs	r2, #0
 80020ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e046      	b.n	8002150 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80020c8:	d021      	beq.n	800210e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020ca:	f7ff f8d3 	bl	8001274 <HAL_GetTick>
 80020ce:	4602      	mov	r2, r0
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	1ad3      	subs	r3, r2, r3
 80020d4:	687a      	ldr	r2, [r7, #4]
 80020d6:	429a      	cmp	r2, r3
 80020d8:	d302      	bcc.n	80020e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d116      	bne.n	800210e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2200      	movs	r2, #0
 80020e4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	2220      	movs	r2, #32
 80020ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	2200      	movs	r2, #0
 80020f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fa:	f043 0220 	orr.w	r2, r3, #32
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	2200      	movs	r2, #0
 8002106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e020      	b.n	8002150 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	0c1b      	lsrs	r3, r3, #16
 8002112:	b2db      	uxtb	r3, r3
 8002114:	2b01      	cmp	r3, #1
 8002116:	d10c      	bne.n	8002132 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	695b      	ldr	r3, [r3, #20]
 800211e:	43da      	mvns	r2, r3
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	4013      	ands	r3, r2
 8002124:	b29b      	uxth	r3, r3
 8002126:	2b00      	cmp	r3, #0
 8002128:	bf14      	ite	ne
 800212a:	2301      	movne	r3, #1
 800212c:	2300      	moveq	r3, #0
 800212e:	b2db      	uxtb	r3, r3
 8002130:	e00b      	b.n	800214a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	699b      	ldr	r3, [r3, #24]
 8002138:	43da      	mvns	r2, r3
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	4013      	ands	r3, r2
 800213e:	b29b      	uxth	r3, r3
 8002140:	2b00      	cmp	r3, #0
 8002142:	bf14      	ite	ne
 8002144:	2301      	movne	r3, #1
 8002146:	2300      	moveq	r3, #0
 8002148:	b2db      	uxtb	r3, r3
 800214a:	2b00      	cmp	r3, #0
 800214c:	d18d      	bne.n	800206a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800214e:	2300      	movs	r3, #0
}
 8002150:	4618      	mov	r0, r3
 8002152:	3710      	adds	r7, #16
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}

08002158 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b084      	sub	sp, #16
 800215c:	af00      	add	r7, sp, #0
 800215e:	60f8      	str	r0, [r7, #12]
 8002160:	60b9      	str	r1, [r7, #8]
 8002162:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002164:	e02d      	b.n	80021c2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002166:	68f8      	ldr	r0, [r7, #12]
 8002168:	f000 f878 	bl	800225c <I2C_IsAcknowledgeFailed>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d001      	beq.n	8002176 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e02d      	b.n	80021d2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800217c:	d021      	beq.n	80021c2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800217e:	f7ff f879 	bl	8001274 <HAL_GetTick>
 8002182:	4602      	mov	r2, r0
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	1ad3      	subs	r3, r2, r3
 8002188:	68ba      	ldr	r2, [r7, #8]
 800218a:	429a      	cmp	r2, r3
 800218c:	d302      	bcc.n	8002194 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d116      	bne.n	80021c2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	2200      	movs	r2, #0
 8002198:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	2220      	movs	r2, #32
 800219e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	2200      	movs	r2, #0
 80021a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ae:	f043 0220 	orr.w	r2, r3, #32
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2200      	movs	r2, #0
 80021ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e007      	b.n	80021d2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	695b      	ldr	r3, [r3, #20]
 80021c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021cc:	2b80      	cmp	r3, #128	; 0x80
 80021ce:	d1ca      	bne.n	8002166 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80021d0:	2300      	movs	r3, #0
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3710      	adds	r7, #16
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}

080021da <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80021da:	b580      	push	{r7, lr}
 80021dc:	b084      	sub	sp, #16
 80021de:	af00      	add	r7, sp, #0
 80021e0:	60f8      	str	r0, [r7, #12]
 80021e2:	60b9      	str	r1, [r7, #8]
 80021e4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80021e6:	e02d      	b.n	8002244 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80021e8:	68f8      	ldr	r0, [r7, #12]
 80021ea:	f000 f837 	bl	800225c <I2C_IsAcknowledgeFailed>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d001      	beq.n	80021f8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	e02d      	b.n	8002254 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80021fe:	d021      	beq.n	8002244 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002200:	f7ff f838 	bl	8001274 <HAL_GetTick>
 8002204:	4602      	mov	r2, r0
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	68ba      	ldr	r2, [r7, #8]
 800220c:	429a      	cmp	r2, r3
 800220e:	d302      	bcc.n	8002216 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d116      	bne.n	8002244 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	2200      	movs	r2, #0
 800221a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2220      	movs	r2, #32
 8002220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	2200      	movs	r2, #0
 8002228:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002230:	f043 0220 	orr.w	r2, r3, #32
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	2200      	movs	r2, #0
 800223c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	e007      	b.n	8002254 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	695b      	ldr	r3, [r3, #20]
 800224a:	f003 0304 	and.w	r3, r3, #4
 800224e:	2b04      	cmp	r3, #4
 8002250:	d1ca      	bne.n	80021e8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002252:	2300      	movs	r3, #0
}
 8002254:	4618      	mov	r0, r3
 8002256:	3710      	adds	r7, #16
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}

0800225c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	695b      	ldr	r3, [r3, #20]
 800226a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800226e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002272:	d11b      	bne.n	80022ac <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800227c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2200      	movs	r2, #0
 8002282:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2220      	movs	r2, #32
 8002288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2200      	movs	r2, #0
 8002290:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002298:	f043 0204 	orr.w	r2, r3, #4
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2200      	movs	r2, #0
 80022a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	e000      	b.n	80022ae <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80022ac:	2300      	movs	r3, #0
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	370c      	adds	r7, #12
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr
	...

080022bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b084      	sub	sp, #16
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
 80022c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d101      	bne.n	80022d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	e0cc      	b.n	800246a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022d0:	4b68      	ldr	r3, [pc, #416]	; (8002474 <HAL_RCC_ClockConfig+0x1b8>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 030f 	and.w	r3, r3, #15
 80022d8:	683a      	ldr	r2, [r7, #0]
 80022da:	429a      	cmp	r2, r3
 80022dc:	d90c      	bls.n	80022f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022de:	4b65      	ldr	r3, [pc, #404]	; (8002474 <HAL_RCC_ClockConfig+0x1b8>)
 80022e0:	683a      	ldr	r2, [r7, #0]
 80022e2:	b2d2      	uxtb	r2, r2
 80022e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022e6:	4b63      	ldr	r3, [pc, #396]	; (8002474 <HAL_RCC_ClockConfig+0x1b8>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 030f 	and.w	r3, r3, #15
 80022ee:	683a      	ldr	r2, [r7, #0]
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d001      	beq.n	80022f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	e0b8      	b.n	800246a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 0302 	and.w	r3, r3, #2
 8002300:	2b00      	cmp	r3, #0
 8002302:	d020      	beq.n	8002346 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 0304 	and.w	r3, r3, #4
 800230c:	2b00      	cmp	r3, #0
 800230e:	d005      	beq.n	800231c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002310:	4b59      	ldr	r3, [pc, #356]	; (8002478 <HAL_RCC_ClockConfig+0x1bc>)
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	4a58      	ldr	r2, [pc, #352]	; (8002478 <HAL_RCC_ClockConfig+0x1bc>)
 8002316:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800231a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f003 0308 	and.w	r3, r3, #8
 8002324:	2b00      	cmp	r3, #0
 8002326:	d005      	beq.n	8002334 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002328:	4b53      	ldr	r3, [pc, #332]	; (8002478 <HAL_RCC_ClockConfig+0x1bc>)
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	4a52      	ldr	r2, [pc, #328]	; (8002478 <HAL_RCC_ClockConfig+0x1bc>)
 800232e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002332:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002334:	4b50      	ldr	r3, [pc, #320]	; (8002478 <HAL_RCC_ClockConfig+0x1bc>)
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	494d      	ldr	r1, [pc, #308]	; (8002478 <HAL_RCC_ClockConfig+0x1bc>)
 8002342:	4313      	orrs	r3, r2
 8002344:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f003 0301 	and.w	r3, r3, #1
 800234e:	2b00      	cmp	r3, #0
 8002350:	d044      	beq.n	80023dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	2b01      	cmp	r3, #1
 8002358:	d107      	bne.n	800236a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800235a:	4b47      	ldr	r3, [pc, #284]	; (8002478 <HAL_RCC_ClockConfig+0x1bc>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002362:	2b00      	cmp	r3, #0
 8002364:	d119      	bne.n	800239a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e07f      	b.n	800246a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	2b02      	cmp	r3, #2
 8002370:	d003      	beq.n	800237a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002376:	2b03      	cmp	r3, #3
 8002378:	d107      	bne.n	800238a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800237a:	4b3f      	ldr	r3, [pc, #252]	; (8002478 <HAL_RCC_ClockConfig+0x1bc>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002382:	2b00      	cmp	r3, #0
 8002384:	d109      	bne.n	800239a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e06f      	b.n	800246a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800238a:	4b3b      	ldr	r3, [pc, #236]	; (8002478 <HAL_RCC_ClockConfig+0x1bc>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 0302 	and.w	r3, r3, #2
 8002392:	2b00      	cmp	r3, #0
 8002394:	d101      	bne.n	800239a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e067      	b.n	800246a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800239a:	4b37      	ldr	r3, [pc, #220]	; (8002478 <HAL_RCC_ClockConfig+0x1bc>)
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	f023 0203 	bic.w	r2, r3, #3
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	4934      	ldr	r1, [pc, #208]	; (8002478 <HAL_RCC_ClockConfig+0x1bc>)
 80023a8:	4313      	orrs	r3, r2
 80023aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023ac:	f7fe ff62 	bl	8001274 <HAL_GetTick>
 80023b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023b2:	e00a      	b.n	80023ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023b4:	f7fe ff5e 	bl	8001274 <HAL_GetTick>
 80023b8:	4602      	mov	r2, r0
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	f241 3288 	movw	r2, #5000	; 0x1388
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d901      	bls.n	80023ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023c6:	2303      	movs	r3, #3
 80023c8:	e04f      	b.n	800246a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023ca:	4b2b      	ldr	r3, [pc, #172]	; (8002478 <HAL_RCC_ClockConfig+0x1bc>)
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	f003 020c 	and.w	r2, r3, #12
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	429a      	cmp	r2, r3
 80023da:	d1eb      	bne.n	80023b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023dc:	4b25      	ldr	r3, [pc, #148]	; (8002474 <HAL_RCC_ClockConfig+0x1b8>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 030f 	and.w	r3, r3, #15
 80023e4:	683a      	ldr	r2, [r7, #0]
 80023e6:	429a      	cmp	r2, r3
 80023e8:	d20c      	bcs.n	8002404 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ea:	4b22      	ldr	r3, [pc, #136]	; (8002474 <HAL_RCC_ClockConfig+0x1b8>)
 80023ec:	683a      	ldr	r2, [r7, #0]
 80023ee:	b2d2      	uxtb	r2, r2
 80023f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023f2:	4b20      	ldr	r3, [pc, #128]	; (8002474 <HAL_RCC_ClockConfig+0x1b8>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 030f 	and.w	r3, r3, #15
 80023fa:	683a      	ldr	r2, [r7, #0]
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d001      	beq.n	8002404 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	e032      	b.n	800246a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 0304 	and.w	r3, r3, #4
 800240c:	2b00      	cmp	r3, #0
 800240e:	d008      	beq.n	8002422 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002410:	4b19      	ldr	r3, [pc, #100]	; (8002478 <HAL_RCC_ClockConfig+0x1bc>)
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	4916      	ldr	r1, [pc, #88]	; (8002478 <HAL_RCC_ClockConfig+0x1bc>)
 800241e:	4313      	orrs	r3, r2
 8002420:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0308 	and.w	r3, r3, #8
 800242a:	2b00      	cmp	r3, #0
 800242c:	d009      	beq.n	8002442 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800242e:	4b12      	ldr	r3, [pc, #72]	; (8002478 <HAL_RCC_ClockConfig+0x1bc>)
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	691b      	ldr	r3, [r3, #16]
 800243a:	00db      	lsls	r3, r3, #3
 800243c:	490e      	ldr	r1, [pc, #56]	; (8002478 <HAL_RCC_ClockConfig+0x1bc>)
 800243e:	4313      	orrs	r3, r2
 8002440:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002442:	f000 f855 	bl	80024f0 <HAL_RCC_GetSysClockFreq>
 8002446:	4602      	mov	r2, r0
 8002448:	4b0b      	ldr	r3, [pc, #44]	; (8002478 <HAL_RCC_ClockConfig+0x1bc>)
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	091b      	lsrs	r3, r3, #4
 800244e:	f003 030f 	and.w	r3, r3, #15
 8002452:	490a      	ldr	r1, [pc, #40]	; (800247c <HAL_RCC_ClockConfig+0x1c0>)
 8002454:	5ccb      	ldrb	r3, [r1, r3]
 8002456:	fa22 f303 	lsr.w	r3, r2, r3
 800245a:	4a09      	ldr	r2, [pc, #36]	; (8002480 <HAL_RCC_ClockConfig+0x1c4>)
 800245c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800245e:	4b09      	ldr	r3, [pc, #36]	; (8002484 <HAL_RCC_ClockConfig+0x1c8>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4618      	mov	r0, r3
 8002464:	f7fe fec2 	bl	80011ec <HAL_InitTick>

  return HAL_OK;
 8002468:	2300      	movs	r3, #0
}
 800246a:	4618      	mov	r0, r3
 800246c:	3710      	adds	r7, #16
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	40023c00 	.word	0x40023c00
 8002478:	40023800 	.word	0x40023800
 800247c:	08005758 	.word	0x08005758
 8002480:	20000010 	.word	0x20000010
 8002484:	20000014 	.word	0x20000014

08002488 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002488:	b480      	push	{r7}
 800248a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800248c:	4b03      	ldr	r3, [pc, #12]	; (800249c <HAL_RCC_GetHCLKFreq+0x14>)
 800248e:	681b      	ldr	r3, [r3, #0]
}
 8002490:	4618      	mov	r0, r3
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr
 800249a:	bf00      	nop
 800249c:	20000010 	.word	0x20000010

080024a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80024a4:	f7ff fff0 	bl	8002488 <HAL_RCC_GetHCLKFreq>
 80024a8:	4602      	mov	r2, r0
 80024aa:	4b05      	ldr	r3, [pc, #20]	; (80024c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	0a9b      	lsrs	r3, r3, #10
 80024b0:	f003 0307 	and.w	r3, r3, #7
 80024b4:	4903      	ldr	r1, [pc, #12]	; (80024c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80024b6:	5ccb      	ldrb	r3, [r1, r3]
 80024b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024bc:	4618      	mov	r0, r3
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	40023800 	.word	0x40023800
 80024c4:	08005768 	.word	0x08005768

080024c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80024cc:	f7ff ffdc 	bl	8002488 <HAL_RCC_GetHCLKFreq>
 80024d0:	4602      	mov	r2, r0
 80024d2:	4b05      	ldr	r3, [pc, #20]	; (80024e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	0b5b      	lsrs	r3, r3, #13
 80024d8:	f003 0307 	and.w	r3, r3, #7
 80024dc:	4903      	ldr	r1, [pc, #12]	; (80024ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80024de:	5ccb      	ldrb	r3, [r1, r3]
 80024e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	40023800 	.word	0x40023800
 80024ec:	08005768 	.word	0x08005768

080024f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80024f4:	b0ae      	sub	sp, #184	; 0xb8
 80024f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80024f8:	2300      	movs	r3, #0
 80024fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80024fe:	2300      	movs	r3, #0
 8002500:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002504:	2300      	movs	r3, #0
 8002506:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800250a:	2300      	movs	r3, #0
 800250c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002510:	2300      	movs	r3, #0
 8002512:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002516:	4bcb      	ldr	r3, [pc, #812]	; (8002844 <HAL_RCC_GetSysClockFreq+0x354>)
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	f003 030c 	and.w	r3, r3, #12
 800251e:	2b0c      	cmp	r3, #12
 8002520:	f200 8206 	bhi.w	8002930 <HAL_RCC_GetSysClockFreq+0x440>
 8002524:	a201      	add	r2, pc, #4	; (adr r2, 800252c <HAL_RCC_GetSysClockFreq+0x3c>)
 8002526:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800252a:	bf00      	nop
 800252c:	08002561 	.word	0x08002561
 8002530:	08002931 	.word	0x08002931
 8002534:	08002931 	.word	0x08002931
 8002538:	08002931 	.word	0x08002931
 800253c:	08002569 	.word	0x08002569
 8002540:	08002931 	.word	0x08002931
 8002544:	08002931 	.word	0x08002931
 8002548:	08002931 	.word	0x08002931
 800254c:	08002571 	.word	0x08002571
 8002550:	08002931 	.word	0x08002931
 8002554:	08002931 	.word	0x08002931
 8002558:	08002931 	.word	0x08002931
 800255c:	08002761 	.word	0x08002761
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002560:	4bb9      	ldr	r3, [pc, #740]	; (8002848 <HAL_RCC_GetSysClockFreq+0x358>)
 8002562:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002566:	e1e7      	b.n	8002938 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002568:	4bb8      	ldr	r3, [pc, #736]	; (800284c <HAL_RCC_GetSysClockFreq+0x35c>)
 800256a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800256e:	e1e3      	b.n	8002938 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002570:	4bb4      	ldr	r3, [pc, #720]	; (8002844 <HAL_RCC_GetSysClockFreq+0x354>)
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002578:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800257c:	4bb1      	ldr	r3, [pc, #708]	; (8002844 <HAL_RCC_GetSysClockFreq+0x354>)
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002584:	2b00      	cmp	r3, #0
 8002586:	d071      	beq.n	800266c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002588:	4bae      	ldr	r3, [pc, #696]	; (8002844 <HAL_RCC_GetSysClockFreq+0x354>)
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	099b      	lsrs	r3, r3, #6
 800258e:	2200      	movs	r2, #0
 8002590:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002594:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002598:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800259c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025a0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80025a4:	2300      	movs	r3, #0
 80025a6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80025aa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80025ae:	4622      	mov	r2, r4
 80025b0:	462b      	mov	r3, r5
 80025b2:	f04f 0000 	mov.w	r0, #0
 80025b6:	f04f 0100 	mov.w	r1, #0
 80025ba:	0159      	lsls	r1, r3, #5
 80025bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025c0:	0150      	lsls	r0, r2, #5
 80025c2:	4602      	mov	r2, r0
 80025c4:	460b      	mov	r3, r1
 80025c6:	4621      	mov	r1, r4
 80025c8:	1a51      	subs	r1, r2, r1
 80025ca:	6439      	str	r1, [r7, #64]	; 0x40
 80025cc:	4629      	mov	r1, r5
 80025ce:	eb63 0301 	sbc.w	r3, r3, r1
 80025d2:	647b      	str	r3, [r7, #68]	; 0x44
 80025d4:	f04f 0200 	mov.w	r2, #0
 80025d8:	f04f 0300 	mov.w	r3, #0
 80025dc:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80025e0:	4649      	mov	r1, r9
 80025e2:	018b      	lsls	r3, r1, #6
 80025e4:	4641      	mov	r1, r8
 80025e6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80025ea:	4641      	mov	r1, r8
 80025ec:	018a      	lsls	r2, r1, #6
 80025ee:	4641      	mov	r1, r8
 80025f0:	1a51      	subs	r1, r2, r1
 80025f2:	63b9      	str	r1, [r7, #56]	; 0x38
 80025f4:	4649      	mov	r1, r9
 80025f6:	eb63 0301 	sbc.w	r3, r3, r1
 80025fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025fc:	f04f 0200 	mov.w	r2, #0
 8002600:	f04f 0300 	mov.w	r3, #0
 8002604:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002608:	4649      	mov	r1, r9
 800260a:	00cb      	lsls	r3, r1, #3
 800260c:	4641      	mov	r1, r8
 800260e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002612:	4641      	mov	r1, r8
 8002614:	00ca      	lsls	r2, r1, #3
 8002616:	4610      	mov	r0, r2
 8002618:	4619      	mov	r1, r3
 800261a:	4603      	mov	r3, r0
 800261c:	4622      	mov	r2, r4
 800261e:	189b      	adds	r3, r3, r2
 8002620:	633b      	str	r3, [r7, #48]	; 0x30
 8002622:	462b      	mov	r3, r5
 8002624:	460a      	mov	r2, r1
 8002626:	eb42 0303 	adc.w	r3, r2, r3
 800262a:	637b      	str	r3, [r7, #52]	; 0x34
 800262c:	f04f 0200 	mov.w	r2, #0
 8002630:	f04f 0300 	mov.w	r3, #0
 8002634:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002638:	4629      	mov	r1, r5
 800263a:	024b      	lsls	r3, r1, #9
 800263c:	4621      	mov	r1, r4
 800263e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002642:	4621      	mov	r1, r4
 8002644:	024a      	lsls	r2, r1, #9
 8002646:	4610      	mov	r0, r2
 8002648:	4619      	mov	r1, r3
 800264a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800264e:	2200      	movs	r2, #0
 8002650:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002654:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002658:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800265c:	f7fd fe28 	bl	80002b0 <__aeabi_uldivmod>
 8002660:	4602      	mov	r2, r0
 8002662:	460b      	mov	r3, r1
 8002664:	4613      	mov	r3, r2
 8002666:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800266a:	e067      	b.n	800273c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800266c:	4b75      	ldr	r3, [pc, #468]	; (8002844 <HAL_RCC_GetSysClockFreq+0x354>)
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	099b      	lsrs	r3, r3, #6
 8002672:	2200      	movs	r2, #0
 8002674:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002678:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800267c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002680:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002684:	67bb      	str	r3, [r7, #120]	; 0x78
 8002686:	2300      	movs	r3, #0
 8002688:	67fb      	str	r3, [r7, #124]	; 0x7c
 800268a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800268e:	4622      	mov	r2, r4
 8002690:	462b      	mov	r3, r5
 8002692:	f04f 0000 	mov.w	r0, #0
 8002696:	f04f 0100 	mov.w	r1, #0
 800269a:	0159      	lsls	r1, r3, #5
 800269c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026a0:	0150      	lsls	r0, r2, #5
 80026a2:	4602      	mov	r2, r0
 80026a4:	460b      	mov	r3, r1
 80026a6:	4621      	mov	r1, r4
 80026a8:	1a51      	subs	r1, r2, r1
 80026aa:	62b9      	str	r1, [r7, #40]	; 0x28
 80026ac:	4629      	mov	r1, r5
 80026ae:	eb63 0301 	sbc.w	r3, r3, r1
 80026b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026b4:	f04f 0200 	mov.w	r2, #0
 80026b8:	f04f 0300 	mov.w	r3, #0
 80026bc:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80026c0:	4649      	mov	r1, r9
 80026c2:	018b      	lsls	r3, r1, #6
 80026c4:	4641      	mov	r1, r8
 80026c6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80026ca:	4641      	mov	r1, r8
 80026cc:	018a      	lsls	r2, r1, #6
 80026ce:	4641      	mov	r1, r8
 80026d0:	ebb2 0a01 	subs.w	sl, r2, r1
 80026d4:	4649      	mov	r1, r9
 80026d6:	eb63 0b01 	sbc.w	fp, r3, r1
 80026da:	f04f 0200 	mov.w	r2, #0
 80026de:	f04f 0300 	mov.w	r3, #0
 80026e2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80026e6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80026ea:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80026ee:	4692      	mov	sl, r2
 80026f0:	469b      	mov	fp, r3
 80026f2:	4623      	mov	r3, r4
 80026f4:	eb1a 0303 	adds.w	r3, sl, r3
 80026f8:	623b      	str	r3, [r7, #32]
 80026fa:	462b      	mov	r3, r5
 80026fc:	eb4b 0303 	adc.w	r3, fp, r3
 8002700:	627b      	str	r3, [r7, #36]	; 0x24
 8002702:	f04f 0200 	mov.w	r2, #0
 8002706:	f04f 0300 	mov.w	r3, #0
 800270a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800270e:	4629      	mov	r1, r5
 8002710:	028b      	lsls	r3, r1, #10
 8002712:	4621      	mov	r1, r4
 8002714:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002718:	4621      	mov	r1, r4
 800271a:	028a      	lsls	r2, r1, #10
 800271c:	4610      	mov	r0, r2
 800271e:	4619      	mov	r1, r3
 8002720:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002724:	2200      	movs	r2, #0
 8002726:	673b      	str	r3, [r7, #112]	; 0x70
 8002728:	677a      	str	r2, [r7, #116]	; 0x74
 800272a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800272e:	f7fd fdbf 	bl	80002b0 <__aeabi_uldivmod>
 8002732:	4602      	mov	r2, r0
 8002734:	460b      	mov	r3, r1
 8002736:	4613      	mov	r3, r2
 8002738:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800273c:	4b41      	ldr	r3, [pc, #260]	; (8002844 <HAL_RCC_GetSysClockFreq+0x354>)
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	0c1b      	lsrs	r3, r3, #16
 8002742:	f003 0303 	and.w	r3, r3, #3
 8002746:	3301      	adds	r3, #1
 8002748:	005b      	lsls	r3, r3, #1
 800274a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800274e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002752:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002756:	fbb2 f3f3 	udiv	r3, r2, r3
 800275a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800275e:	e0eb      	b.n	8002938 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002760:	4b38      	ldr	r3, [pc, #224]	; (8002844 <HAL_RCC_GetSysClockFreq+0x354>)
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002768:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800276c:	4b35      	ldr	r3, [pc, #212]	; (8002844 <HAL_RCC_GetSysClockFreq+0x354>)
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002774:	2b00      	cmp	r3, #0
 8002776:	d06b      	beq.n	8002850 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002778:	4b32      	ldr	r3, [pc, #200]	; (8002844 <HAL_RCC_GetSysClockFreq+0x354>)
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	099b      	lsrs	r3, r3, #6
 800277e:	2200      	movs	r2, #0
 8002780:	66bb      	str	r3, [r7, #104]	; 0x68
 8002782:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002784:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002786:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800278a:	663b      	str	r3, [r7, #96]	; 0x60
 800278c:	2300      	movs	r3, #0
 800278e:	667b      	str	r3, [r7, #100]	; 0x64
 8002790:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002794:	4622      	mov	r2, r4
 8002796:	462b      	mov	r3, r5
 8002798:	f04f 0000 	mov.w	r0, #0
 800279c:	f04f 0100 	mov.w	r1, #0
 80027a0:	0159      	lsls	r1, r3, #5
 80027a2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027a6:	0150      	lsls	r0, r2, #5
 80027a8:	4602      	mov	r2, r0
 80027aa:	460b      	mov	r3, r1
 80027ac:	4621      	mov	r1, r4
 80027ae:	1a51      	subs	r1, r2, r1
 80027b0:	61b9      	str	r1, [r7, #24]
 80027b2:	4629      	mov	r1, r5
 80027b4:	eb63 0301 	sbc.w	r3, r3, r1
 80027b8:	61fb      	str	r3, [r7, #28]
 80027ba:	f04f 0200 	mov.w	r2, #0
 80027be:	f04f 0300 	mov.w	r3, #0
 80027c2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80027c6:	4659      	mov	r1, fp
 80027c8:	018b      	lsls	r3, r1, #6
 80027ca:	4651      	mov	r1, sl
 80027cc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80027d0:	4651      	mov	r1, sl
 80027d2:	018a      	lsls	r2, r1, #6
 80027d4:	4651      	mov	r1, sl
 80027d6:	ebb2 0801 	subs.w	r8, r2, r1
 80027da:	4659      	mov	r1, fp
 80027dc:	eb63 0901 	sbc.w	r9, r3, r1
 80027e0:	f04f 0200 	mov.w	r2, #0
 80027e4:	f04f 0300 	mov.w	r3, #0
 80027e8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80027ec:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80027f0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80027f4:	4690      	mov	r8, r2
 80027f6:	4699      	mov	r9, r3
 80027f8:	4623      	mov	r3, r4
 80027fa:	eb18 0303 	adds.w	r3, r8, r3
 80027fe:	613b      	str	r3, [r7, #16]
 8002800:	462b      	mov	r3, r5
 8002802:	eb49 0303 	adc.w	r3, r9, r3
 8002806:	617b      	str	r3, [r7, #20]
 8002808:	f04f 0200 	mov.w	r2, #0
 800280c:	f04f 0300 	mov.w	r3, #0
 8002810:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002814:	4629      	mov	r1, r5
 8002816:	024b      	lsls	r3, r1, #9
 8002818:	4621      	mov	r1, r4
 800281a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800281e:	4621      	mov	r1, r4
 8002820:	024a      	lsls	r2, r1, #9
 8002822:	4610      	mov	r0, r2
 8002824:	4619      	mov	r1, r3
 8002826:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800282a:	2200      	movs	r2, #0
 800282c:	65bb      	str	r3, [r7, #88]	; 0x58
 800282e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002830:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002834:	f7fd fd3c 	bl	80002b0 <__aeabi_uldivmod>
 8002838:	4602      	mov	r2, r0
 800283a:	460b      	mov	r3, r1
 800283c:	4613      	mov	r3, r2
 800283e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002842:	e065      	b.n	8002910 <HAL_RCC_GetSysClockFreq+0x420>
 8002844:	40023800 	.word	0x40023800
 8002848:	00f42400 	.word	0x00f42400
 800284c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002850:	4b3d      	ldr	r3, [pc, #244]	; (8002948 <HAL_RCC_GetSysClockFreq+0x458>)
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	099b      	lsrs	r3, r3, #6
 8002856:	2200      	movs	r2, #0
 8002858:	4618      	mov	r0, r3
 800285a:	4611      	mov	r1, r2
 800285c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002860:	653b      	str	r3, [r7, #80]	; 0x50
 8002862:	2300      	movs	r3, #0
 8002864:	657b      	str	r3, [r7, #84]	; 0x54
 8002866:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800286a:	4642      	mov	r2, r8
 800286c:	464b      	mov	r3, r9
 800286e:	f04f 0000 	mov.w	r0, #0
 8002872:	f04f 0100 	mov.w	r1, #0
 8002876:	0159      	lsls	r1, r3, #5
 8002878:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800287c:	0150      	lsls	r0, r2, #5
 800287e:	4602      	mov	r2, r0
 8002880:	460b      	mov	r3, r1
 8002882:	4641      	mov	r1, r8
 8002884:	1a51      	subs	r1, r2, r1
 8002886:	60b9      	str	r1, [r7, #8]
 8002888:	4649      	mov	r1, r9
 800288a:	eb63 0301 	sbc.w	r3, r3, r1
 800288e:	60fb      	str	r3, [r7, #12]
 8002890:	f04f 0200 	mov.w	r2, #0
 8002894:	f04f 0300 	mov.w	r3, #0
 8002898:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800289c:	4659      	mov	r1, fp
 800289e:	018b      	lsls	r3, r1, #6
 80028a0:	4651      	mov	r1, sl
 80028a2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80028a6:	4651      	mov	r1, sl
 80028a8:	018a      	lsls	r2, r1, #6
 80028aa:	4651      	mov	r1, sl
 80028ac:	1a54      	subs	r4, r2, r1
 80028ae:	4659      	mov	r1, fp
 80028b0:	eb63 0501 	sbc.w	r5, r3, r1
 80028b4:	f04f 0200 	mov.w	r2, #0
 80028b8:	f04f 0300 	mov.w	r3, #0
 80028bc:	00eb      	lsls	r3, r5, #3
 80028be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80028c2:	00e2      	lsls	r2, r4, #3
 80028c4:	4614      	mov	r4, r2
 80028c6:	461d      	mov	r5, r3
 80028c8:	4643      	mov	r3, r8
 80028ca:	18e3      	adds	r3, r4, r3
 80028cc:	603b      	str	r3, [r7, #0]
 80028ce:	464b      	mov	r3, r9
 80028d0:	eb45 0303 	adc.w	r3, r5, r3
 80028d4:	607b      	str	r3, [r7, #4]
 80028d6:	f04f 0200 	mov.w	r2, #0
 80028da:	f04f 0300 	mov.w	r3, #0
 80028de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80028e2:	4629      	mov	r1, r5
 80028e4:	028b      	lsls	r3, r1, #10
 80028e6:	4621      	mov	r1, r4
 80028e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80028ec:	4621      	mov	r1, r4
 80028ee:	028a      	lsls	r2, r1, #10
 80028f0:	4610      	mov	r0, r2
 80028f2:	4619      	mov	r1, r3
 80028f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80028f8:	2200      	movs	r2, #0
 80028fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80028fc:	64fa      	str	r2, [r7, #76]	; 0x4c
 80028fe:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002902:	f7fd fcd5 	bl	80002b0 <__aeabi_uldivmod>
 8002906:	4602      	mov	r2, r0
 8002908:	460b      	mov	r3, r1
 800290a:	4613      	mov	r3, r2
 800290c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002910:	4b0d      	ldr	r3, [pc, #52]	; (8002948 <HAL_RCC_GetSysClockFreq+0x458>)
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	0f1b      	lsrs	r3, r3, #28
 8002916:	f003 0307 	and.w	r3, r3, #7
 800291a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800291e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002922:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002926:	fbb2 f3f3 	udiv	r3, r2, r3
 800292a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800292e:	e003      	b.n	8002938 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002930:	4b06      	ldr	r3, [pc, #24]	; (800294c <HAL_RCC_GetSysClockFreq+0x45c>)
 8002932:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002936:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002938:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 800293c:	4618      	mov	r0, r3
 800293e:	37b8      	adds	r7, #184	; 0xb8
 8002940:	46bd      	mov	sp, r7
 8002942:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002946:	bf00      	nop
 8002948:	40023800 	.word	0x40023800
 800294c:	00f42400 	.word	0x00f42400

08002950 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b086      	sub	sp, #24
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d101      	bne.n	8002962 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e28d      	b.n	8002e7e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 0301 	and.w	r3, r3, #1
 800296a:	2b00      	cmp	r3, #0
 800296c:	f000 8083 	beq.w	8002a76 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002970:	4b94      	ldr	r3, [pc, #592]	; (8002bc4 <HAL_RCC_OscConfig+0x274>)
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	f003 030c 	and.w	r3, r3, #12
 8002978:	2b04      	cmp	r3, #4
 800297a:	d019      	beq.n	80029b0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800297c:	4b91      	ldr	r3, [pc, #580]	; (8002bc4 <HAL_RCC_OscConfig+0x274>)
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002984:	2b08      	cmp	r3, #8
 8002986:	d106      	bne.n	8002996 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002988:	4b8e      	ldr	r3, [pc, #568]	; (8002bc4 <HAL_RCC_OscConfig+0x274>)
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002990:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002994:	d00c      	beq.n	80029b0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002996:	4b8b      	ldr	r3, [pc, #556]	; (8002bc4 <HAL_RCC_OscConfig+0x274>)
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800299e:	2b0c      	cmp	r3, #12
 80029a0:	d112      	bne.n	80029c8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029a2:	4b88      	ldr	r3, [pc, #544]	; (8002bc4 <HAL_RCC_OscConfig+0x274>)
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029ae:	d10b      	bne.n	80029c8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029b0:	4b84      	ldr	r3, [pc, #528]	; (8002bc4 <HAL_RCC_OscConfig+0x274>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d05b      	beq.n	8002a74 <HAL_RCC_OscConfig+0x124>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d157      	bne.n	8002a74 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	e25a      	b.n	8002e7e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029d0:	d106      	bne.n	80029e0 <HAL_RCC_OscConfig+0x90>
 80029d2:	4b7c      	ldr	r3, [pc, #496]	; (8002bc4 <HAL_RCC_OscConfig+0x274>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a7b      	ldr	r2, [pc, #492]	; (8002bc4 <HAL_RCC_OscConfig+0x274>)
 80029d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029dc:	6013      	str	r3, [r2, #0]
 80029de:	e01d      	b.n	8002a1c <HAL_RCC_OscConfig+0xcc>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029e8:	d10c      	bne.n	8002a04 <HAL_RCC_OscConfig+0xb4>
 80029ea:	4b76      	ldr	r3, [pc, #472]	; (8002bc4 <HAL_RCC_OscConfig+0x274>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a75      	ldr	r2, [pc, #468]	; (8002bc4 <HAL_RCC_OscConfig+0x274>)
 80029f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029f4:	6013      	str	r3, [r2, #0]
 80029f6:	4b73      	ldr	r3, [pc, #460]	; (8002bc4 <HAL_RCC_OscConfig+0x274>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a72      	ldr	r2, [pc, #456]	; (8002bc4 <HAL_RCC_OscConfig+0x274>)
 80029fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a00:	6013      	str	r3, [r2, #0]
 8002a02:	e00b      	b.n	8002a1c <HAL_RCC_OscConfig+0xcc>
 8002a04:	4b6f      	ldr	r3, [pc, #444]	; (8002bc4 <HAL_RCC_OscConfig+0x274>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a6e      	ldr	r2, [pc, #440]	; (8002bc4 <HAL_RCC_OscConfig+0x274>)
 8002a0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a0e:	6013      	str	r3, [r2, #0]
 8002a10:	4b6c      	ldr	r3, [pc, #432]	; (8002bc4 <HAL_RCC_OscConfig+0x274>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a6b      	ldr	r2, [pc, #428]	; (8002bc4 <HAL_RCC_OscConfig+0x274>)
 8002a16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d013      	beq.n	8002a4c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a24:	f7fe fc26 	bl	8001274 <HAL_GetTick>
 8002a28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a2a:	e008      	b.n	8002a3e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a2c:	f7fe fc22 	bl	8001274 <HAL_GetTick>
 8002a30:	4602      	mov	r2, r0
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	1ad3      	subs	r3, r2, r3
 8002a36:	2b64      	cmp	r3, #100	; 0x64
 8002a38:	d901      	bls.n	8002a3e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	e21f      	b.n	8002e7e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a3e:	4b61      	ldr	r3, [pc, #388]	; (8002bc4 <HAL_RCC_OscConfig+0x274>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d0f0      	beq.n	8002a2c <HAL_RCC_OscConfig+0xdc>
 8002a4a:	e014      	b.n	8002a76 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a4c:	f7fe fc12 	bl	8001274 <HAL_GetTick>
 8002a50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a52:	e008      	b.n	8002a66 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a54:	f7fe fc0e 	bl	8001274 <HAL_GetTick>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	1ad3      	subs	r3, r2, r3
 8002a5e:	2b64      	cmp	r3, #100	; 0x64
 8002a60:	d901      	bls.n	8002a66 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002a62:	2303      	movs	r3, #3
 8002a64:	e20b      	b.n	8002e7e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a66:	4b57      	ldr	r3, [pc, #348]	; (8002bc4 <HAL_RCC_OscConfig+0x274>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d1f0      	bne.n	8002a54 <HAL_RCC_OscConfig+0x104>
 8002a72:	e000      	b.n	8002a76 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 0302 	and.w	r3, r3, #2
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d06f      	beq.n	8002b62 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002a82:	4b50      	ldr	r3, [pc, #320]	; (8002bc4 <HAL_RCC_OscConfig+0x274>)
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	f003 030c 	and.w	r3, r3, #12
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d017      	beq.n	8002abe <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002a8e:	4b4d      	ldr	r3, [pc, #308]	; (8002bc4 <HAL_RCC_OscConfig+0x274>)
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002a96:	2b08      	cmp	r3, #8
 8002a98:	d105      	bne.n	8002aa6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002a9a:	4b4a      	ldr	r3, [pc, #296]	; (8002bc4 <HAL_RCC_OscConfig+0x274>)
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d00b      	beq.n	8002abe <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002aa6:	4b47      	ldr	r3, [pc, #284]	; (8002bc4 <HAL_RCC_OscConfig+0x274>)
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002aae:	2b0c      	cmp	r3, #12
 8002ab0:	d11c      	bne.n	8002aec <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ab2:	4b44      	ldr	r3, [pc, #272]	; (8002bc4 <HAL_RCC_OscConfig+0x274>)
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d116      	bne.n	8002aec <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002abe:	4b41      	ldr	r3, [pc, #260]	; (8002bc4 <HAL_RCC_OscConfig+0x274>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0302 	and.w	r3, r3, #2
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d005      	beq.n	8002ad6 <HAL_RCC_OscConfig+0x186>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	68db      	ldr	r3, [r3, #12]
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d001      	beq.n	8002ad6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e1d3      	b.n	8002e7e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ad6:	4b3b      	ldr	r3, [pc, #236]	; (8002bc4 <HAL_RCC_OscConfig+0x274>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	691b      	ldr	r3, [r3, #16]
 8002ae2:	00db      	lsls	r3, r3, #3
 8002ae4:	4937      	ldr	r1, [pc, #220]	; (8002bc4 <HAL_RCC_OscConfig+0x274>)
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002aea:	e03a      	b.n	8002b62 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d020      	beq.n	8002b36 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002af4:	4b34      	ldr	r3, [pc, #208]	; (8002bc8 <HAL_RCC_OscConfig+0x278>)
 8002af6:	2201      	movs	r2, #1
 8002af8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002afa:	f7fe fbbb 	bl	8001274 <HAL_GetTick>
 8002afe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b00:	e008      	b.n	8002b14 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b02:	f7fe fbb7 	bl	8001274 <HAL_GetTick>
 8002b06:	4602      	mov	r2, r0
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	1ad3      	subs	r3, r2, r3
 8002b0c:	2b02      	cmp	r3, #2
 8002b0e:	d901      	bls.n	8002b14 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002b10:	2303      	movs	r3, #3
 8002b12:	e1b4      	b.n	8002e7e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b14:	4b2b      	ldr	r3, [pc, #172]	; (8002bc4 <HAL_RCC_OscConfig+0x274>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 0302 	and.w	r3, r3, #2
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d0f0      	beq.n	8002b02 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b20:	4b28      	ldr	r3, [pc, #160]	; (8002bc4 <HAL_RCC_OscConfig+0x274>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	691b      	ldr	r3, [r3, #16]
 8002b2c:	00db      	lsls	r3, r3, #3
 8002b2e:	4925      	ldr	r1, [pc, #148]	; (8002bc4 <HAL_RCC_OscConfig+0x274>)
 8002b30:	4313      	orrs	r3, r2
 8002b32:	600b      	str	r3, [r1, #0]
 8002b34:	e015      	b.n	8002b62 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b36:	4b24      	ldr	r3, [pc, #144]	; (8002bc8 <HAL_RCC_OscConfig+0x278>)
 8002b38:	2200      	movs	r2, #0
 8002b3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b3c:	f7fe fb9a 	bl	8001274 <HAL_GetTick>
 8002b40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b42:	e008      	b.n	8002b56 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b44:	f7fe fb96 	bl	8001274 <HAL_GetTick>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	1ad3      	subs	r3, r2, r3
 8002b4e:	2b02      	cmp	r3, #2
 8002b50:	d901      	bls.n	8002b56 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002b52:	2303      	movs	r3, #3
 8002b54:	e193      	b.n	8002e7e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b56:	4b1b      	ldr	r3, [pc, #108]	; (8002bc4 <HAL_RCC_OscConfig+0x274>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 0302 	and.w	r3, r3, #2
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d1f0      	bne.n	8002b44 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 0308 	and.w	r3, r3, #8
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d036      	beq.n	8002bdc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	695b      	ldr	r3, [r3, #20]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d016      	beq.n	8002ba4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b76:	4b15      	ldr	r3, [pc, #84]	; (8002bcc <HAL_RCC_OscConfig+0x27c>)
 8002b78:	2201      	movs	r2, #1
 8002b7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b7c:	f7fe fb7a 	bl	8001274 <HAL_GetTick>
 8002b80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b82:	e008      	b.n	8002b96 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b84:	f7fe fb76 	bl	8001274 <HAL_GetTick>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	2b02      	cmp	r3, #2
 8002b90:	d901      	bls.n	8002b96 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002b92:	2303      	movs	r3, #3
 8002b94:	e173      	b.n	8002e7e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b96:	4b0b      	ldr	r3, [pc, #44]	; (8002bc4 <HAL_RCC_OscConfig+0x274>)
 8002b98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b9a:	f003 0302 	and.w	r3, r3, #2
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d0f0      	beq.n	8002b84 <HAL_RCC_OscConfig+0x234>
 8002ba2:	e01b      	b.n	8002bdc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ba4:	4b09      	ldr	r3, [pc, #36]	; (8002bcc <HAL_RCC_OscConfig+0x27c>)
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002baa:	f7fe fb63 	bl	8001274 <HAL_GetTick>
 8002bae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bb0:	e00e      	b.n	8002bd0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bb2:	f7fe fb5f 	bl	8001274 <HAL_GetTick>
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	1ad3      	subs	r3, r2, r3
 8002bbc:	2b02      	cmp	r3, #2
 8002bbe:	d907      	bls.n	8002bd0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002bc0:	2303      	movs	r3, #3
 8002bc2:	e15c      	b.n	8002e7e <HAL_RCC_OscConfig+0x52e>
 8002bc4:	40023800 	.word	0x40023800
 8002bc8:	42470000 	.word	0x42470000
 8002bcc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bd0:	4b8a      	ldr	r3, [pc, #552]	; (8002dfc <HAL_RCC_OscConfig+0x4ac>)
 8002bd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bd4:	f003 0302 	and.w	r3, r3, #2
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d1ea      	bne.n	8002bb2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 0304 	and.w	r3, r3, #4
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	f000 8097 	beq.w	8002d18 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bea:	2300      	movs	r3, #0
 8002bec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bee:	4b83      	ldr	r3, [pc, #524]	; (8002dfc <HAL_RCC_OscConfig+0x4ac>)
 8002bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d10f      	bne.n	8002c1a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	60bb      	str	r3, [r7, #8]
 8002bfe:	4b7f      	ldr	r3, [pc, #508]	; (8002dfc <HAL_RCC_OscConfig+0x4ac>)
 8002c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c02:	4a7e      	ldr	r2, [pc, #504]	; (8002dfc <HAL_RCC_OscConfig+0x4ac>)
 8002c04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c08:	6413      	str	r3, [r2, #64]	; 0x40
 8002c0a:	4b7c      	ldr	r3, [pc, #496]	; (8002dfc <HAL_RCC_OscConfig+0x4ac>)
 8002c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c12:	60bb      	str	r3, [r7, #8]
 8002c14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c16:	2301      	movs	r3, #1
 8002c18:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c1a:	4b79      	ldr	r3, [pc, #484]	; (8002e00 <HAL_RCC_OscConfig+0x4b0>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d118      	bne.n	8002c58 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c26:	4b76      	ldr	r3, [pc, #472]	; (8002e00 <HAL_RCC_OscConfig+0x4b0>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a75      	ldr	r2, [pc, #468]	; (8002e00 <HAL_RCC_OscConfig+0x4b0>)
 8002c2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c32:	f7fe fb1f 	bl	8001274 <HAL_GetTick>
 8002c36:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c38:	e008      	b.n	8002c4c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c3a:	f7fe fb1b 	bl	8001274 <HAL_GetTick>
 8002c3e:	4602      	mov	r2, r0
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	1ad3      	subs	r3, r2, r3
 8002c44:	2b02      	cmp	r3, #2
 8002c46:	d901      	bls.n	8002c4c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002c48:	2303      	movs	r3, #3
 8002c4a:	e118      	b.n	8002e7e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c4c:	4b6c      	ldr	r3, [pc, #432]	; (8002e00 <HAL_RCC_OscConfig+0x4b0>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d0f0      	beq.n	8002c3a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d106      	bne.n	8002c6e <HAL_RCC_OscConfig+0x31e>
 8002c60:	4b66      	ldr	r3, [pc, #408]	; (8002dfc <HAL_RCC_OscConfig+0x4ac>)
 8002c62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c64:	4a65      	ldr	r2, [pc, #404]	; (8002dfc <HAL_RCC_OscConfig+0x4ac>)
 8002c66:	f043 0301 	orr.w	r3, r3, #1
 8002c6a:	6713      	str	r3, [r2, #112]	; 0x70
 8002c6c:	e01c      	b.n	8002ca8 <HAL_RCC_OscConfig+0x358>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	2b05      	cmp	r3, #5
 8002c74:	d10c      	bne.n	8002c90 <HAL_RCC_OscConfig+0x340>
 8002c76:	4b61      	ldr	r3, [pc, #388]	; (8002dfc <HAL_RCC_OscConfig+0x4ac>)
 8002c78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c7a:	4a60      	ldr	r2, [pc, #384]	; (8002dfc <HAL_RCC_OscConfig+0x4ac>)
 8002c7c:	f043 0304 	orr.w	r3, r3, #4
 8002c80:	6713      	str	r3, [r2, #112]	; 0x70
 8002c82:	4b5e      	ldr	r3, [pc, #376]	; (8002dfc <HAL_RCC_OscConfig+0x4ac>)
 8002c84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c86:	4a5d      	ldr	r2, [pc, #372]	; (8002dfc <HAL_RCC_OscConfig+0x4ac>)
 8002c88:	f043 0301 	orr.w	r3, r3, #1
 8002c8c:	6713      	str	r3, [r2, #112]	; 0x70
 8002c8e:	e00b      	b.n	8002ca8 <HAL_RCC_OscConfig+0x358>
 8002c90:	4b5a      	ldr	r3, [pc, #360]	; (8002dfc <HAL_RCC_OscConfig+0x4ac>)
 8002c92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c94:	4a59      	ldr	r2, [pc, #356]	; (8002dfc <HAL_RCC_OscConfig+0x4ac>)
 8002c96:	f023 0301 	bic.w	r3, r3, #1
 8002c9a:	6713      	str	r3, [r2, #112]	; 0x70
 8002c9c:	4b57      	ldr	r3, [pc, #348]	; (8002dfc <HAL_RCC_OscConfig+0x4ac>)
 8002c9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ca0:	4a56      	ldr	r2, [pc, #344]	; (8002dfc <HAL_RCC_OscConfig+0x4ac>)
 8002ca2:	f023 0304 	bic.w	r3, r3, #4
 8002ca6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d015      	beq.n	8002cdc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cb0:	f7fe fae0 	bl	8001274 <HAL_GetTick>
 8002cb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cb6:	e00a      	b.n	8002cce <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cb8:	f7fe fadc 	bl	8001274 <HAL_GetTick>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d901      	bls.n	8002cce <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	e0d7      	b.n	8002e7e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cce:	4b4b      	ldr	r3, [pc, #300]	; (8002dfc <HAL_RCC_OscConfig+0x4ac>)
 8002cd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cd2:	f003 0302 	and.w	r3, r3, #2
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d0ee      	beq.n	8002cb8 <HAL_RCC_OscConfig+0x368>
 8002cda:	e014      	b.n	8002d06 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cdc:	f7fe faca 	bl	8001274 <HAL_GetTick>
 8002ce0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ce2:	e00a      	b.n	8002cfa <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ce4:	f7fe fac6 	bl	8001274 <HAL_GetTick>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d901      	bls.n	8002cfa <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	e0c1      	b.n	8002e7e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cfa:	4b40      	ldr	r3, [pc, #256]	; (8002dfc <HAL_RCC_OscConfig+0x4ac>)
 8002cfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cfe:	f003 0302 	and.w	r3, r3, #2
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d1ee      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d06:	7dfb      	ldrb	r3, [r7, #23]
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d105      	bne.n	8002d18 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d0c:	4b3b      	ldr	r3, [pc, #236]	; (8002dfc <HAL_RCC_OscConfig+0x4ac>)
 8002d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d10:	4a3a      	ldr	r2, [pc, #232]	; (8002dfc <HAL_RCC_OscConfig+0x4ac>)
 8002d12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d16:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	699b      	ldr	r3, [r3, #24]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	f000 80ad 	beq.w	8002e7c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d22:	4b36      	ldr	r3, [pc, #216]	; (8002dfc <HAL_RCC_OscConfig+0x4ac>)
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	f003 030c 	and.w	r3, r3, #12
 8002d2a:	2b08      	cmp	r3, #8
 8002d2c:	d060      	beq.n	8002df0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	699b      	ldr	r3, [r3, #24]
 8002d32:	2b02      	cmp	r3, #2
 8002d34:	d145      	bne.n	8002dc2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d36:	4b33      	ldr	r3, [pc, #204]	; (8002e04 <HAL_RCC_OscConfig+0x4b4>)
 8002d38:	2200      	movs	r2, #0
 8002d3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d3c:	f7fe fa9a 	bl	8001274 <HAL_GetTick>
 8002d40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d42:	e008      	b.n	8002d56 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d44:	f7fe fa96 	bl	8001274 <HAL_GetTick>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	1ad3      	subs	r3, r2, r3
 8002d4e:	2b02      	cmp	r3, #2
 8002d50:	d901      	bls.n	8002d56 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002d52:	2303      	movs	r3, #3
 8002d54:	e093      	b.n	8002e7e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d56:	4b29      	ldr	r3, [pc, #164]	; (8002dfc <HAL_RCC_OscConfig+0x4ac>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d1f0      	bne.n	8002d44 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	69da      	ldr	r2, [r3, #28]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6a1b      	ldr	r3, [r3, #32]
 8002d6a:	431a      	orrs	r2, r3
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d70:	019b      	lsls	r3, r3, #6
 8002d72:	431a      	orrs	r2, r3
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d78:	085b      	lsrs	r3, r3, #1
 8002d7a:	3b01      	subs	r3, #1
 8002d7c:	041b      	lsls	r3, r3, #16
 8002d7e:	431a      	orrs	r2, r3
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d84:	061b      	lsls	r3, r3, #24
 8002d86:	431a      	orrs	r2, r3
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d8c:	071b      	lsls	r3, r3, #28
 8002d8e:	491b      	ldr	r1, [pc, #108]	; (8002dfc <HAL_RCC_OscConfig+0x4ac>)
 8002d90:	4313      	orrs	r3, r2
 8002d92:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d94:	4b1b      	ldr	r3, [pc, #108]	; (8002e04 <HAL_RCC_OscConfig+0x4b4>)
 8002d96:	2201      	movs	r2, #1
 8002d98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d9a:	f7fe fa6b 	bl	8001274 <HAL_GetTick>
 8002d9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002da0:	e008      	b.n	8002db4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002da2:	f7fe fa67 	bl	8001274 <HAL_GetTick>
 8002da6:	4602      	mov	r2, r0
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	1ad3      	subs	r3, r2, r3
 8002dac:	2b02      	cmp	r3, #2
 8002dae:	d901      	bls.n	8002db4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002db0:	2303      	movs	r3, #3
 8002db2:	e064      	b.n	8002e7e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002db4:	4b11      	ldr	r3, [pc, #68]	; (8002dfc <HAL_RCC_OscConfig+0x4ac>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d0f0      	beq.n	8002da2 <HAL_RCC_OscConfig+0x452>
 8002dc0:	e05c      	b.n	8002e7c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dc2:	4b10      	ldr	r3, [pc, #64]	; (8002e04 <HAL_RCC_OscConfig+0x4b4>)
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dc8:	f7fe fa54 	bl	8001274 <HAL_GetTick>
 8002dcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dce:	e008      	b.n	8002de2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dd0:	f7fe fa50 	bl	8001274 <HAL_GetTick>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	2b02      	cmp	r3, #2
 8002ddc:	d901      	bls.n	8002de2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002dde:	2303      	movs	r3, #3
 8002de0:	e04d      	b.n	8002e7e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002de2:	4b06      	ldr	r3, [pc, #24]	; (8002dfc <HAL_RCC_OscConfig+0x4ac>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d1f0      	bne.n	8002dd0 <HAL_RCC_OscConfig+0x480>
 8002dee:	e045      	b.n	8002e7c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	699b      	ldr	r3, [r3, #24]
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	d107      	bne.n	8002e08 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	e040      	b.n	8002e7e <HAL_RCC_OscConfig+0x52e>
 8002dfc:	40023800 	.word	0x40023800
 8002e00:	40007000 	.word	0x40007000
 8002e04:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002e08:	4b1f      	ldr	r3, [pc, #124]	; (8002e88 <HAL_RCC_OscConfig+0x538>)
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	699b      	ldr	r3, [r3, #24]
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d030      	beq.n	8002e78 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d129      	bne.n	8002e78 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d122      	bne.n	8002e78 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e32:	68fa      	ldr	r2, [r7, #12]
 8002e34:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002e38:	4013      	ands	r3, r2
 8002e3a:	687a      	ldr	r2, [r7, #4]
 8002e3c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002e3e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d119      	bne.n	8002e78 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e4e:	085b      	lsrs	r3, r3, #1
 8002e50:	3b01      	subs	r3, #1
 8002e52:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d10f      	bne.n	8002e78 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e62:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d107      	bne.n	8002e78 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e72:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d001      	beq.n	8002e7c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e000      	b.n	8002e7e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002e7c:	2300      	movs	r3, #0
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	3718      	adds	r7, #24
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	bf00      	nop
 8002e88:	40023800 	.word	0x40023800

08002e8c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b086      	sub	sp, #24
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
 8002e94:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d101      	bne.n	8002ea0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	e097      	b.n	8002fd0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d106      	bne.n	8002eba <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002eb4:	6878      	ldr	r0, [r7, #4]
 8002eb6:	f7fe f893 	bl	8000fe0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2202      	movs	r2, #2
 8002ebe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	687a      	ldr	r2, [r7, #4]
 8002eca:	6812      	ldr	r2, [r2, #0]
 8002ecc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002ed0:	f023 0307 	bic.w	r3, r3, #7
 8002ed4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	3304      	adds	r3, #4
 8002ede:	4619      	mov	r1, r3
 8002ee0:	4610      	mov	r0, r2
 8002ee2:	f000 f907 	bl	80030f4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	699b      	ldr	r3, [r3, #24]
 8002ef4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	6a1b      	ldr	r3, [r3, #32]
 8002efc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	697a      	ldr	r2, [r7, #20]
 8002f04:	4313      	orrs	r3, r2
 8002f06:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f0e:	f023 0303 	bic.w	r3, r3, #3
 8002f12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	689a      	ldr	r2, [r3, #8]
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	699b      	ldr	r3, [r3, #24]
 8002f1c:	021b      	lsls	r3, r3, #8
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	693a      	ldr	r2, [r7, #16]
 8002f22:	4313      	orrs	r3, r2
 8002f24:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002f2c:	f023 030c 	bic.w	r3, r3, #12
 8002f30:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002f38:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f3c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	68da      	ldr	r2, [r3, #12]
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	69db      	ldr	r3, [r3, #28]
 8002f46:	021b      	lsls	r3, r3, #8
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	693a      	ldr	r2, [r7, #16]
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	691b      	ldr	r3, [r3, #16]
 8002f54:	011a      	lsls	r2, r3, #4
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	6a1b      	ldr	r3, [r3, #32]
 8002f5a:	031b      	lsls	r3, r3, #12
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	693a      	ldr	r2, [r7, #16]
 8002f60:	4313      	orrs	r3, r2
 8002f62:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002f6a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8002f72:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	685a      	ldr	r2, [r3, #4]
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	695b      	ldr	r3, [r3, #20]
 8002f7c:	011b      	lsls	r3, r3, #4
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	68fa      	ldr	r2, [r7, #12]
 8002f82:	4313      	orrs	r3, r2
 8002f84:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	697a      	ldr	r2, [r7, #20]
 8002f8c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	693a      	ldr	r2, [r7, #16]
 8002f94:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	68fa      	ldr	r2, [r7, #12]
 8002f9c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2201      	movs	r2, #1
 8002faa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2201      	movs	r2, #1
 8002fba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2201      	movs	r2, #1
 8002fca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002fce:	2300      	movs	r3, #0
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	3718      	adds	r7, #24
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}

08002fd8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b084      	sub	sp, #16
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
 8002fe0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002fe8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002ff0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002ff8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003000:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d110      	bne.n	800302a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003008:	7bfb      	ldrb	r3, [r7, #15]
 800300a:	2b01      	cmp	r3, #1
 800300c:	d102      	bne.n	8003014 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800300e:	7b7b      	ldrb	r3, [r7, #13]
 8003010:	2b01      	cmp	r3, #1
 8003012:	d001      	beq.n	8003018 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	e069      	b.n	80030ec <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2202      	movs	r2, #2
 800301c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2202      	movs	r2, #2
 8003024:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003028:	e031      	b.n	800308e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	2b04      	cmp	r3, #4
 800302e:	d110      	bne.n	8003052 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003030:	7bbb      	ldrb	r3, [r7, #14]
 8003032:	2b01      	cmp	r3, #1
 8003034:	d102      	bne.n	800303c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003036:	7b3b      	ldrb	r3, [r7, #12]
 8003038:	2b01      	cmp	r3, #1
 800303a:	d001      	beq.n	8003040 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	e055      	b.n	80030ec <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2202      	movs	r2, #2
 8003044:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2202      	movs	r2, #2
 800304c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003050:	e01d      	b.n	800308e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003052:	7bfb      	ldrb	r3, [r7, #15]
 8003054:	2b01      	cmp	r3, #1
 8003056:	d108      	bne.n	800306a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003058:	7bbb      	ldrb	r3, [r7, #14]
 800305a:	2b01      	cmp	r3, #1
 800305c:	d105      	bne.n	800306a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800305e:	7b7b      	ldrb	r3, [r7, #13]
 8003060:	2b01      	cmp	r3, #1
 8003062:	d102      	bne.n	800306a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003064:	7b3b      	ldrb	r3, [r7, #12]
 8003066:	2b01      	cmp	r3, #1
 8003068:	d001      	beq.n	800306e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e03e      	b.n	80030ec <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2202      	movs	r2, #2
 8003072:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2202      	movs	r2, #2
 800307a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2202      	movs	r2, #2
 8003082:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2202      	movs	r2, #2
 800308a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d003      	beq.n	800309c <HAL_TIM_Encoder_Start+0xc4>
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	2b04      	cmp	r3, #4
 8003098:	d008      	beq.n	80030ac <HAL_TIM_Encoder_Start+0xd4>
 800309a:	e00f      	b.n	80030bc <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	2201      	movs	r2, #1
 80030a2:	2100      	movs	r1, #0
 80030a4:	4618      	mov	r0, r3
 80030a6:	f000 f8c5 	bl	8003234 <TIM_CCxChannelCmd>
      break;
 80030aa:	e016      	b.n	80030da <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	2201      	movs	r2, #1
 80030b2:	2104      	movs	r1, #4
 80030b4:	4618      	mov	r0, r3
 80030b6:	f000 f8bd 	bl	8003234 <TIM_CCxChannelCmd>
      break;
 80030ba:	e00e      	b.n	80030da <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	2201      	movs	r2, #1
 80030c2:	2100      	movs	r1, #0
 80030c4:	4618      	mov	r0, r3
 80030c6:	f000 f8b5 	bl	8003234 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	2201      	movs	r2, #1
 80030d0:	2104      	movs	r1, #4
 80030d2:	4618      	mov	r0, r3
 80030d4:	f000 f8ae 	bl	8003234 <TIM_CCxChannelCmd>
      break;
 80030d8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f042 0201 	orr.w	r2, r2, #1
 80030e8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80030ea:	2300      	movs	r3, #0
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	3710      	adds	r7, #16
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}

080030f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b085      	sub	sp, #20
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
 80030fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	4a40      	ldr	r2, [pc, #256]	; (8003208 <TIM_Base_SetConfig+0x114>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d013      	beq.n	8003134 <TIM_Base_SetConfig+0x40>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003112:	d00f      	beq.n	8003134 <TIM_Base_SetConfig+0x40>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	4a3d      	ldr	r2, [pc, #244]	; (800320c <TIM_Base_SetConfig+0x118>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d00b      	beq.n	8003134 <TIM_Base_SetConfig+0x40>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	4a3c      	ldr	r2, [pc, #240]	; (8003210 <TIM_Base_SetConfig+0x11c>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d007      	beq.n	8003134 <TIM_Base_SetConfig+0x40>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	4a3b      	ldr	r2, [pc, #236]	; (8003214 <TIM_Base_SetConfig+0x120>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d003      	beq.n	8003134 <TIM_Base_SetConfig+0x40>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	4a3a      	ldr	r2, [pc, #232]	; (8003218 <TIM_Base_SetConfig+0x124>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d108      	bne.n	8003146 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800313a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	68fa      	ldr	r2, [r7, #12]
 8003142:	4313      	orrs	r3, r2
 8003144:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	4a2f      	ldr	r2, [pc, #188]	; (8003208 <TIM_Base_SetConfig+0x114>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d02b      	beq.n	80031a6 <TIM_Base_SetConfig+0xb2>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003154:	d027      	beq.n	80031a6 <TIM_Base_SetConfig+0xb2>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	4a2c      	ldr	r2, [pc, #176]	; (800320c <TIM_Base_SetConfig+0x118>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d023      	beq.n	80031a6 <TIM_Base_SetConfig+0xb2>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	4a2b      	ldr	r2, [pc, #172]	; (8003210 <TIM_Base_SetConfig+0x11c>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d01f      	beq.n	80031a6 <TIM_Base_SetConfig+0xb2>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	4a2a      	ldr	r2, [pc, #168]	; (8003214 <TIM_Base_SetConfig+0x120>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d01b      	beq.n	80031a6 <TIM_Base_SetConfig+0xb2>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	4a29      	ldr	r2, [pc, #164]	; (8003218 <TIM_Base_SetConfig+0x124>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d017      	beq.n	80031a6 <TIM_Base_SetConfig+0xb2>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	4a28      	ldr	r2, [pc, #160]	; (800321c <TIM_Base_SetConfig+0x128>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d013      	beq.n	80031a6 <TIM_Base_SetConfig+0xb2>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	4a27      	ldr	r2, [pc, #156]	; (8003220 <TIM_Base_SetConfig+0x12c>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d00f      	beq.n	80031a6 <TIM_Base_SetConfig+0xb2>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	4a26      	ldr	r2, [pc, #152]	; (8003224 <TIM_Base_SetConfig+0x130>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d00b      	beq.n	80031a6 <TIM_Base_SetConfig+0xb2>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	4a25      	ldr	r2, [pc, #148]	; (8003228 <TIM_Base_SetConfig+0x134>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d007      	beq.n	80031a6 <TIM_Base_SetConfig+0xb2>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	4a24      	ldr	r2, [pc, #144]	; (800322c <TIM_Base_SetConfig+0x138>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d003      	beq.n	80031a6 <TIM_Base_SetConfig+0xb2>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	4a23      	ldr	r2, [pc, #140]	; (8003230 <TIM_Base_SetConfig+0x13c>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d108      	bne.n	80031b8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	68db      	ldr	r3, [r3, #12]
 80031b2:	68fa      	ldr	r2, [r7, #12]
 80031b4:	4313      	orrs	r3, r2
 80031b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	695b      	ldr	r3, [r3, #20]
 80031c2:	4313      	orrs	r3, r2
 80031c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	68fa      	ldr	r2, [r7, #12]
 80031ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	689a      	ldr	r2, [r3, #8]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	4a0a      	ldr	r2, [pc, #40]	; (8003208 <TIM_Base_SetConfig+0x114>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d003      	beq.n	80031ec <TIM_Base_SetConfig+0xf8>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	4a0c      	ldr	r2, [pc, #48]	; (8003218 <TIM_Base_SetConfig+0x124>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d103      	bne.n	80031f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	691a      	ldr	r2, [r3, #16]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2201      	movs	r2, #1
 80031f8:	615a      	str	r2, [r3, #20]
}
 80031fa:	bf00      	nop
 80031fc:	3714      	adds	r7, #20
 80031fe:	46bd      	mov	sp, r7
 8003200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003204:	4770      	bx	lr
 8003206:	bf00      	nop
 8003208:	40010000 	.word	0x40010000
 800320c:	40000400 	.word	0x40000400
 8003210:	40000800 	.word	0x40000800
 8003214:	40000c00 	.word	0x40000c00
 8003218:	40010400 	.word	0x40010400
 800321c:	40014000 	.word	0x40014000
 8003220:	40014400 	.word	0x40014400
 8003224:	40014800 	.word	0x40014800
 8003228:	40001800 	.word	0x40001800
 800322c:	40001c00 	.word	0x40001c00
 8003230:	40002000 	.word	0x40002000

08003234 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003234:	b480      	push	{r7}
 8003236:	b087      	sub	sp, #28
 8003238:	af00      	add	r7, sp, #0
 800323a:	60f8      	str	r0, [r7, #12]
 800323c:	60b9      	str	r1, [r7, #8]
 800323e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	f003 031f 	and.w	r3, r3, #31
 8003246:	2201      	movs	r2, #1
 8003248:	fa02 f303 	lsl.w	r3, r2, r3
 800324c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	6a1a      	ldr	r2, [r3, #32]
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	43db      	mvns	r3, r3
 8003256:	401a      	ands	r2, r3
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	6a1a      	ldr	r2, [r3, #32]
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	f003 031f 	and.w	r3, r3, #31
 8003266:	6879      	ldr	r1, [r7, #4]
 8003268:	fa01 f303 	lsl.w	r3, r1, r3
 800326c:	431a      	orrs	r2, r3
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	621a      	str	r2, [r3, #32]
}
 8003272:	bf00      	nop
 8003274:	371c      	adds	r7, #28
 8003276:	46bd      	mov	sp, r7
 8003278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327c:	4770      	bx	lr
	...

08003280 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003280:	b480      	push	{r7}
 8003282:	b085      	sub	sp, #20
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
 8003288:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003290:	2b01      	cmp	r3, #1
 8003292:	d101      	bne.n	8003298 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003294:	2302      	movs	r3, #2
 8003296:	e05a      	b.n	800334e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2201      	movs	r2, #1
 800329c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2202      	movs	r2, #2
 80032a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	68fa      	ldr	r2, [r7, #12]
 80032c6:	4313      	orrs	r3, r2
 80032c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	68fa      	ldr	r2, [r7, #12]
 80032d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a21      	ldr	r2, [pc, #132]	; (800335c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d022      	beq.n	8003322 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032e4:	d01d      	beq.n	8003322 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a1d      	ldr	r2, [pc, #116]	; (8003360 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d018      	beq.n	8003322 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a1b      	ldr	r2, [pc, #108]	; (8003364 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d013      	beq.n	8003322 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a1a      	ldr	r2, [pc, #104]	; (8003368 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d00e      	beq.n	8003322 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a18      	ldr	r2, [pc, #96]	; (800336c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d009      	beq.n	8003322 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a17      	ldr	r2, [pc, #92]	; (8003370 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d004      	beq.n	8003322 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a15      	ldr	r2, [pc, #84]	; (8003374 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d10c      	bne.n	800333c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003328:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	68ba      	ldr	r2, [r7, #8]
 8003330:	4313      	orrs	r3, r2
 8003332:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	68ba      	ldr	r2, [r7, #8]
 800333a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2201      	movs	r2, #1
 8003340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2200      	movs	r2, #0
 8003348:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800334c:	2300      	movs	r3, #0
}
 800334e:	4618      	mov	r0, r3
 8003350:	3714      	adds	r7, #20
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr
 800335a:	bf00      	nop
 800335c:	40010000 	.word	0x40010000
 8003360:	40000400 	.word	0x40000400
 8003364:	40000800 	.word	0x40000800
 8003368:	40000c00 	.word	0x40000c00
 800336c:	40010400 	.word	0x40010400
 8003370:	40014000 	.word	0x40014000
 8003374:	40001800 	.word	0x40001800

08003378 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b082      	sub	sp, #8
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d101      	bne.n	800338a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	e03f      	b.n	800340a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003390:	b2db      	uxtb	r3, r3
 8003392:	2b00      	cmp	r3, #0
 8003394:	d106      	bne.n	80033a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2200      	movs	r2, #0
 800339a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f7fd fe90 	bl	80010c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2224      	movs	r2, #36	; 0x24
 80033a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	68da      	ldr	r2, [r3, #12]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80033ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	f000 f829 	bl	8003414 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	691a      	ldr	r2, [r3, #16]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80033d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	695a      	ldr	r2, [r3, #20]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80033e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	68da      	ldr	r2, [r3, #12]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80033f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2200      	movs	r2, #0
 80033f6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2220      	movs	r2, #32
 80033fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2220      	movs	r2, #32
 8003404:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003408:	2300      	movs	r3, #0
}
 800340a:	4618      	mov	r0, r3
 800340c:	3708      	adds	r7, #8
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}
	...

08003414 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003414:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003418:	b0c0      	sub	sp, #256	; 0x100
 800341a:	af00      	add	r7, sp, #0
 800341c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003420:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	691b      	ldr	r3, [r3, #16]
 8003428:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800342c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003430:	68d9      	ldr	r1, [r3, #12]
 8003432:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	ea40 0301 	orr.w	r3, r0, r1
 800343c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800343e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003442:	689a      	ldr	r2, [r3, #8]
 8003444:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003448:	691b      	ldr	r3, [r3, #16]
 800344a:	431a      	orrs	r2, r3
 800344c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003450:	695b      	ldr	r3, [r3, #20]
 8003452:	431a      	orrs	r2, r3
 8003454:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003458:	69db      	ldr	r3, [r3, #28]
 800345a:	4313      	orrs	r3, r2
 800345c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	68db      	ldr	r3, [r3, #12]
 8003468:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800346c:	f021 010c 	bic.w	r1, r1, #12
 8003470:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800347a:	430b      	orrs	r3, r1
 800347c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800347e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	695b      	ldr	r3, [r3, #20]
 8003486:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800348a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800348e:	6999      	ldr	r1, [r3, #24]
 8003490:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	ea40 0301 	orr.w	r3, r0, r1
 800349a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800349c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	4b8f      	ldr	r3, [pc, #572]	; (80036e0 <UART_SetConfig+0x2cc>)
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d005      	beq.n	80034b4 <UART_SetConfig+0xa0>
 80034a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	4b8d      	ldr	r3, [pc, #564]	; (80036e4 <UART_SetConfig+0x2d0>)
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d104      	bne.n	80034be <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80034b4:	f7ff f808 	bl	80024c8 <HAL_RCC_GetPCLK2Freq>
 80034b8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80034bc:	e003      	b.n	80034c6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80034be:	f7fe ffef 	bl	80024a0 <HAL_RCC_GetPCLK1Freq>
 80034c2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80034c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034ca:	69db      	ldr	r3, [r3, #28]
 80034cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034d0:	f040 810c 	bne.w	80036ec <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80034d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034d8:	2200      	movs	r2, #0
 80034da:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80034de:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80034e2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80034e6:	4622      	mov	r2, r4
 80034e8:	462b      	mov	r3, r5
 80034ea:	1891      	adds	r1, r2, r2
 80034ec:	65b9      	str	r1, [r7, #88]	; 0x58
 80034ee:	415b      	adcs	r3, r3
 80034f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80034f2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80034f6:	4621      	mov	r1, r4
 80034f8:	eb12 0801 	adds.w	r8, r2, r1
 80034fc:	4629      	mov	r1, r5
 80034fe:	eb43 0901 	adc.w	r9, r3, r1
 8003502:	f04f 0200 	mov.w	r2, #0
 8003506:	f04f 0300 	mov.w	r3, #0
 800350a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800350e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003512:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003516:	4690      	mov	r8, r2
 8003518:	4699      	mov	r9, r3
 800351a:	4623      	mov	r3, r4
 800351c:	eb18 0303 	adds.w	r3, r8, r3
 8003520:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003524:	462b      	mov	r3, r5
 8003526:	eb49 0303 	adc.w	r3, r9, r3
 800352a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800352e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	2200      	movs	r2, #0
 8003536:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800353a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800353e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003542:	460b      	mov	r3, r1
 8003544:	18db      	adds	r3, r3, r3
 8003546:	653b      	str	r3, [r7, #80]	; 0x50
 8003548:	4613      	mov	r3, r2
 800354a:	eb42 0303 	adc.w	r3, r2, r3
 800354e:	657b      	str	r3, [r7, #84]	; 0x54
 8003550:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003554:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003558:	f7fc feaa 	bl	80002b0 <__aeabi_uldivmod>
 800355c:	4602      	mov	r2, r0
 800355e:	460b      	mov	r3, r1
 8003560:	4b61      	ldr	r3, [pc, #388]	; (80036e8 <UART_SetConfig+0x2d4>)
 8003562:	fba3 2302 	umull	r2, r3, r3, r2
 8003566:	095b      	lsrs	r3, r3, #5
 8003568:	011c      	lsls	r4, r3, #4
 800356a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800356e:	2200      	movs	r2, #0
 8003570:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003574:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003578:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800357c:	4642      	mov	r2, r8
 800357e:	464b      	mov	r3, r9
 8003580:	1891      	adds	r1, r2, r2
 8003582:	64b9      	str	r1, [r7, #72]	; 0x48
 8003584:	415b      	adcs	r3, r3
 8003586:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003588:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800358c:	4641      	mov	r1, r8
 800358e:	eb12 0a01 	adds.w	sl, r2, r1
 8003592:	4649      	mov	r1, r9
 8003594:	eb43 0b01 	adc.w	fp, r3, r1
 8003598:	f04f 0200 	mov.w	r2, #0
 800359c:	f04f 0300 	mov.w	r3, #0
 80035a0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80035a4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80035a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80035ac:	4692      	mov	sl, r2
 80035ae:	469b      	mov	fp, r3
 80035b0:	4643      	mov	r3, r8
 80035b2:	eb1a 0303 	adds.w	r3, sl, r3
 80035b6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80035ba:	464b      	mov	r3, r9
 80035bc:	eb4b 0303 	adc.w	r3, fp, r3
 80035c0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80035c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	2200      	movs	r2, #0
 80035cc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80035d0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80035d4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80035d8:	460b      	mov	r3, r1
 80035da:	18db      	adds	r3, r3, r3
 80035dc:	643b      	str	r3, [r7, #64]	; 0x40
 80035de:	4613      	mov	r3, r2
 80035e0:	eb42 0303 	adc.w	r3, r2, r3
 80035e4:	647b      	str	r3, [r7, #68]	; 0x44
 80035e6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80035ea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80035ee:	f7fc fe5f 	bl	80002b0 <__aeabi_uldivmod>
 80035f2:	4602      	mov	r2, r0
 80035f4:	460b      	mov	r3, r1
 80035f6:	4611      	mov	r1, r2
 80035f8:	4b3b      	ldr	r3, [pc, #236]	; (80036e8 <UART_SetConfig+0x2d4>)
 80035fa:	fba3 2301 	umull	r2, r3, r3, r1
 80035fe:	095b      	lsrs	r3, r3, #5
 8003600:	2264      	movs	r2, #100	; 0x64
 8003602:	fb02 f303 	mul.w	r3, r2, r3
 8003606:	1acb      	subs	r3, r1, r3
 8003608:	00db      	lsls	r3, r3, #3
 800360a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800360e:	4b36      	ldr	r3, [pc, #216]	; (80036e8 <UART_SetConfig+0x2d4>)
 8003610:	fba3 2302 	umull	r2, r3, r3, r2
 8003614:	095b      	lsrs	r3, r3, #5
 8003616:	005b      	lsls	r3, r3, #1
 8003618:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800361c:	441c      	add	r4, r3
 800361e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003622:	2200      	movs	r2, #0
 8003624:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003628:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800362c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003630:	4642      	mov	r2, r8
 8003632:	464b      	mov	r3, r9
 8003634:	1891      	adds	r1, r2, r2
 8003636:	63b9      	str	r1, [r7, #56]	; 0x38
 8003638:	415b      	adcs	r3, r3
 800363a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800363c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003640:	4641      	mov	r1, r8
 8003642:	1851      	adds	r1, r2, r1
 8003644:	6339      	str	r1, [r7, #48]	; 0x30
 8003646:	4649      	mov	r1, r9
 8003648:	414b      	adcs	r3, r1
 800364a:	637b      	str	r3, [r7, #52]	; 0x34
 800364c:	f04f 0200 	mov.w	r2, #0
 8003650:	f04f 0300 	mov.w	r3, #0
 8003654:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003658:	4659      	mov	r1, fp
 800365a:	00cb      	lsls	r3, r1, #3
 800365c:	4651      	mov	r1, sl
 800365e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003662:	4651      	mov	r1, sl
 8003664:	00ca      	lsls	r2, r1, #3
 8003666:	4610      	mov	r0, r2
 8003668:	4619      	mov	r1, r3
 800366a:	4603      	mov	r3, r0
 800366c:	4642      	mov	r2, r8
 800366e:	189b      	adds	r3, r3, r2
 8003670:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003674:	464b      	mov	r3, r9
 8003676:	460a      	mov	r2, r1
 8003678:	eb42 0303 	adc.w	r3, r2, r3
 800367c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003680:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	2200      	movs	r2, #0
 8003688:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800368c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003690:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003694:	460b      	mov	r3, r1
 8003696:	18db      	adds	r3, r3, r3
 8003698:	62bb      	str	r3, [r7, #40]	; 0x28
 800369a:	4613      	mov	r3, r2
 800369c:	eb42 0303 	adc.w	r3, r2, r3
 80036a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036a2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80036a6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80036aa:	f7fc fe01 	bl	80002b0 <__aeabi_uldivmod>
 80036ae:	4602      	mov	r2, r0
 80036b0:	460b      	mov	r3, r1
 80036b2:	4b0d      	ldr	r3, [pc, #52]	; (80036e8 <UART_SetConfig+0x2d4>)
 80036b4:	fba3 1302 	umull	r1, r3, r3, r2
 80036b8:	095b      	lsrs	r3, r3, #5
 80036ba:	2164      	movs	r1, #100	; 0x64
 80036bc:	fb01 f303 	mul.w	r3, r1, r3
 80036c0:	1ad3      	subs	r3, r2, r3
 80036c2:	00db      	lsls	r3, r3, #3
 80036c4:	3332      	adds	r3, #50	; 0x32
 80036c6:	4a08      	ldr	r2, [pc, #32]	; (80036e8 <UART_SetConfig+0x2d4>)
 80036c8:	fba2 2303 	umull	r2, r3, r2, r3
 80036cc:	095b      	lsrs	r3, r3, #5
 80036ce:	f003 0207 	and.w	r2, r3, #7
 80036d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4422      	add	r2, r4
 80036da:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80036dc:	e105      	b.n	80038ea <UART_SetConfig+0x4d6>
 80036de:	bf00      	nop
 80036e0:	40011000 	.word	0x40011000
 80036e4:	40011400 	.word	0x40011400
 80036e8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80036ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036f0:	2200      	movs	r2, #0
 80036f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80036f6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80036fa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80036fe:	4642      	mov	r2, r8
 8003700:	464b      	mov	r3, r9
 8003702:	1891      	adds	r1, r2, r2
 8003704:	6239      	str	r1, [r7, #32]
 8003706:	415b      	adcs	r3, r3
 8003708:	627b      	str	r3, [r7, #36]	; 0x24
 800370a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800370e:	4641      	mov	r1, r8
 8003710:	1854      	adds	r4, r2, r1
 8003712:	4649      	mov	r1, r9
 8003714:	eb43 0501 	adc.w	r5, r3, r1
 8003718:	f04f 0200 	mov.w	r2, #0
 800371c:	f04f 0300 	mov.w	r3, #0
 8003720:	00eb      	lsls	r3, r5, #3
 8003722:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003726:	00e2      	lsls	r2, r4, #3
 8003728:	4614      	mov	r4, r2
 800372a:	461d      	mov	r5, r3
 800372c:	4643      	mov	r3, r8
 800372e:	18e3      	adds	r3, r4, r3
 8003730:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003734:	464b      	mov	r3, r9
 8003736:	eb45 0303 	adc.w	r3, r5, r3
 800373a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800373e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	2200      	movs	r2, #0
 8003746:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800374a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800374e:	f04f 0200 	mov.w	r2, #0
 8003752:	f04f 0300 	mov.w	r3, #0
 8003756:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800375a:	4629      	mov	r1, r5
 800375c:	008b      	lsls	r3, r1, #2
 800375e:	4621      	mov	r1, r4
 8003760:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003764:	4621      	mov	r1, r4
 8003766:	008a      	lsls	r2, r1, #2
 8003768:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800376c:	f7fc fda0 	bl	80002b0 <__aeabi_uldivmod>
 8003770:	4602      	mov	r2, r0
 8003772:	460b      	mov	r3, r1
 8003774:	4b60      	ldr	r3, [pc, #384]	; (80038f8 <UART_SetConfig+0x4e4>)
 8003776:	fba3 2302 	umull	r2, r3, r3, r2
 800377a:	095b      	lsrs	r3, r3, #5
 800377c:	011c      	lsls	r4, r3, #4
 800377e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003782:	2200      	movs	r2, #0
 8003784:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003788:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800378c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003790:	4642      	mov	r2, r8
 8003792:	464b      	mov	r3, r9
 8003794:	1891      	adds	r1, r2, r2
 8003796:	61b9      	str	r1, [r7, #24]
 8003798:	415b      	adcs	r3, r3
 800379a:	61fb      	str	r3, [r7, #28]
 800379c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80037a0:	4641      	mov	r1, r8
 80037a2:	1851      	adds	r1, r2, r1
 80037a4:	6139      	str	r1, [r7, #16]
 80037a6:	4649      	mov	r1, r9
 80037a8:	414b      	adcs	r3, r1
 80037aa:	617b      	str	r3, [r7, #20]
 80037ac:	f04f 0200 	mov.w	r2, #0
 80037b0:	f04f 0300 	mov.w	r3, #0
 80037b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80037b8:	4659      	mov	r1, fp
 80037ba:	00cb      	lsls	r3, r1, #3
 80037bc:	4651      	mov	r1, sl
 80037be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80037c2:	4651      	mov	r1, sl
 80037c4:	00ca      	lsls	r2, r1, #3
 80037c6:	4610      	mov	r0, r2
 80037c8:	4619      	mov	r1, r3
 80037ca:	4603      	mov	r3, r0
 80037cc:	4642      	mov	r2, r8
 80037ce:	189b      	adds	r3, r3, r2
 80037d0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80037d4:	464b      	mov	r3, r9
 80037d6:	460a      	mov	r2, r1
 80037d8:	eb42 0303 	adc.w	r3, r2, r3
 80037dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80037e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	2200      	movs	r2, #0
 80037e8:	67bb      	str	r3, [r7, #120]	; 0x78
 80037ea:	67fa      	str	r2, [r7, #124]	; 0x7c
 80037ec:	f04f 0200 	mov.w	r2, #0
 80037f0:	f04f 0300 	mov.w	r3, #0
 80037f4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80037f8:	4649      	mov	r1, r9
 80037fa:	008b      	lsls	r3, r1, #2
 80037fc:	4641      	mov	r1, r8
 80037fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003802:	4641      	mov	r1, r8
 8003804:	008a      	lsls	r2, r1, #2
 8003806:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800380a:	f7fc fd51 	bl	80002b0 <__aeabi_uldivmod>
 800380e:	4602      	mov	r2, r0
 8003810:	460b      	mov	r3, r1
 8003812:	4b39      	ldr	r3, [pc, #228]	; (80038f8 <UART_SetConfig+0x4e4>)
 8003814:	fba3 1302 	umull	r1, r3, r3, r2
 8003818:	095b      	lsrs	r3, r3, #5
 800381a:	2164      	movs	r1, #100	; 0x64
 800381c:	fb01 f303 	mul.w	r3, r1, r3
 8003820:	1ad3      	subs	r3, r2, r3
 8003822:	011b      	lsls	r3, r3, #4
 8003824:	3332      	adds	r3, #50	; 0x32
 8003826:	4a34      	ldr	r2, [pc, #208]	; (80038f8 <UART_SetConfig+0x4e4>)
 8003828:	fba2 2303 	umull	r2, r3, r2, r3
 800382c:	095b      	lsrs	r3, r3, #5
 800382e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003832:	441c      	add	r4, r3
 8003834:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003838:	2200      	movs	r2, #0
 800383a:	673b      	str	r3, [r7, #112]	; 0x70
 800383c:	677a      	str	r2, [r7, #116]	; 0x74
 800383e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003842:	4642      	mov	r2, r8
 8003844:	464b      	mov	r3, r9
 8003846:	1891      	adds	r1, r2, r2
 8003848:	60b9      	str	r1, [r7, #8]
 800384a:	415b      	adcs	r3, r3
 800384c:	60fb      	str	r3, [r7, #12]
 800384e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003852:	4641      	mov	r1, r8
 8003854:	1851      	adds	r1, r2, r1
 8003856:	6039      	str	r1, [r7, #0]
 8003858:	4649      	mov	r1, r9
 800385a:	414b      	adcs	r3, r1
 800385c:	607b      	str	r3, [r7, #4]
 800385e:	f04f 0200 	mov.w	r2, #0
 8003862:	f04f 0300 	mov.w	r3, #0
 8003866:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800386a:	4659      	mov	r1, fp
 800386c:	00cb      	lsls	r3, r1, #3
 800386e:	4651      	mov	r1, sl
 8003870:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003874:	4651      	mov	r1, sl
 8003876:	00ca      	lsls	r2, r1, #3
 8003878:	4610      	mov	r0, r2
 800387a:	4619      	mov	r1, r3
 800387c:	4603      	mov	r3, r0
 800387e:	4642      	mov	r2, r8
 8003880:	189b      	adds	r3, r3, r2
 8003882:	66bb      	str	r3, [r7, #104]	; 0x68
 8003884:	464b      	mov	r3, r9
 8003886:	460a      	mov	r2, r1
 8003888:	eb42 0303 	adc.w	r3, r2, r3
 800388c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800388e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	2200      	movs	r2, #0
 8003896:	663b      	str	r3, [r7, #96]	; 0x60
 8003898:	667a      	str	r2, [r7, #100]	; 0x64
 800389a:	f04f 0200 	mov.w	r2, #0
 800389e:	f04f 0300 	mov.w	r3, #0
 80038a2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80038a6:	4649      	mov	r1, r9
 80038a8:	008b      	lsls	r3, r1, #2
 80038aa:	4641      	mov	r1, r8
 80038ac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80038b0:	4641      	mov	r1, r8
 80038b2:	008a      	lsls	r2, r1, #2
 80038b4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80038b8:	f7fc fcfa 	bl	80002b0 <__aeabi_uldivmod>
 80038bc:	4602      	mov	r2, r0
 80038be:	460b      	mov	r3, r1
 80038c0:	4b0d      	ldr	r3, [pc, #52]	; (80038f8 <UART_SetConfig+0x4e4>)
 80038c2:	fba3 1302 	umull	r1, r3, r3, r2
 80038c6:	095b      	lsrs	r3, r3, #5
 80038c8:	2164      	movs	r1, #100	; 0x64
 80038ca:	fb01 f303 	mul.w	r3, r1, r3
 80038ce:	1ad3      	subs	r3, r2, r3
 80038d0:	011b      	lsls	r3, r3, #4
 80038d2:	3332      	adds	r3, #50	; 0x32
 80038d4:	4a08      	ldr	r2, [pc, #32]	; (80038f8 <UART_SetConfig+0x4e4>)
 80038d6:	fba2 2303 	umull	r2, r3, r2, r3
 80038da:	095b      	lsrs	r3, r3, #5
 80038dc:	f003 020f 	and.w	r2, r3, #15
 80038e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4422      	add	r2, r4
 80038e8:	609a      	str	r2, [r3, #8]
}
 80038ea:	bf00      	nop
 80038ec:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80038f0:	46bd      	mov	sp, r7
 80038f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038f6:	bf00      	nop
 80038f8:	51eb851f 	.word	0x51eb851f

080038fc <__errno>:
 80038fc:	4b01      	ldr	r3, [pc, #4]	; (8003904 <__errno+0x8>)
 80038fe:	6818      	ldr	r0, [r3, #0]
 8003900:	4770      	bx	lr
 8003902:	bf00      	nop
 8003904:	2000001c 	.word	0x2000001c

08003908 <__libc_init_array>:
 8003908:	b570      	push	{r4, r5, r6, lr}
 800390a:	4d0d      	ldr	r5, [pc, #52]	; (8003940 <__libc_init_array+0x38>)
 800390c:	4c0d      	ldr	r4, [pc, #52]	; (8003944 <__libc_init_array+0x3c>)
 800390e:	1b64      	subs	r4, r4, r5
 8003910:	10a4      	asrs	r4, r4, #2
 8003912:	2600      	movs	r6, #0
 8003914:	42a6      	cmp	r6, r4
 8003916:	d109      	bne.n	800392c <__libc_init_array+0x24>
 8003918:	4d0b      	ldr	r5, [pc, #44]	; (8003948 <__libc_init_array+0x40>)
 800391a:	4c0c      	ldr	r4, [pc, #48]	; (800394c <__libc_init_array+0x44>)
 800391c:	f000 fc8e 	bl	800423c <_init>
 8003920:	1b64      	subs	r4, r4, r5
 8003922:	10a4      	asrs	r4, r4, #2
 8003924:	2600      	movs	r6, #0
 8003926:	42a6      	cmp	r6, r4
 8003928:	d105      	bne.n	8003936 <__libc_init_array+0x2e>
 800392a:	bd70      	pop	{r4, r5, r6, pc}
 800392c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003930:	4798      	blx	r3
 8003932:	3601      	adds	r6, #1
 8003934:	e7ee      	b.n	8003914 <__libc_init_array+0xc>
 8003936:	f855 3b04 	ldr.w	r3, [r5], #4
 800393a:	4798      	blx	r3
 800393c:	3601      	adds	r6, #1
 800393e:	e7f2      	b.n	8003926 <__libc_init_array+0x1e>
 8003940:	080057ac 	.word	0x080057ac
 8003944:	080057ac 	.word	0x080057ac
 8003948:	080057ac 	.word	0x080057ac
 800394c:	080057b0 	.word	0x080057b0

08003950 <memset>:
 8003950:	4402      	add	r2, r0
 8003952:	4603      	mov	r3, r0
 8003954:	4293      	cmp	r3, r2
 8003956:	d100      	bne.n	800395a <memset+0xa>
 8003958:	4770      	bx	lr
 800395a:	f803 1b01 	strb.w	r1, [r3], #1
 800395e:	e7f9      	b.n	8003954 <memset+0x4>

08003960 <siprintf>:
 8003960:	b40e      	push	{r1, r2, r3}
 8003962:	b500      	push	{lr}
 8003964:	b09c      	sub	sp, #112	; 0x70
 8003966:	ab1d      	add	r3, sp, #116	; 0x74
 8003968:	9002      	str	r0, [sp, #8]
 800396a:	9006      	str	r0, [sp, #24]
 800396c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003970:	4809      	ldr	r0, [pc, #36]	; (8003998 <siprintf+0x38>)
 8003972:	9107      	str	r1, [sp, #28]
 8003974:	9104      	str	r1, [sp, #16]
 8003976:	4909      	ldr	r1, [pc, #36]	; (800399c <siprintf+0x3c>)
 8003978:	f853 2b04 	ldr.w	r2, [r3], #4
 800397c:	9105      	str	r1, [sp, #20]
 800397e:	6800      	ldr	r0, [r0, #0]
 8003980:	9301      	str	r3, [sp, #4]
 8003982:	a902      	add	r1, sp, #8
 8003984:	f000 f868 	bl	8003a58 <_svfiprintf_r>
 8003988:	9b02      	ldr	r3, [sp, #8]
 800398a:	2200      	movs	r2, #0
 800398c:	701a      	strb	r2, [r3, #0]
 800398e:	b01c      	add	sp, #112	; 0x70
 8003990:	f85d eb04 	ldr.w	lr, [sp], #4
 8003994:	b003      	add	sp, #12
 8003996:	4770      	bx	lr
 8003998:	2000001c 	.word	0x2000001c
 800399c:	ffff0208 	.word	0xffff0208

080039a0 <__ssputs_r>:
 80039a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80039a4:	688e      	ldr	r6, [r1, #8]
 80039a6:	429e      	cmp	r6, r3
 80039a8:	4682      	mov	sl, r0
 80039aa:	460c      	mov	r4, r1
 80039ac:	4690      	mov	r8, r2
 80039ae:	461f      	mov	r7, r3
 80039b0:	d838      	bhi.n	8003a24 <__ssputs_r+0x84>
 80039b2:	898a      	ldrh	r2, [r1, #12]
 80039b4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80039b8:	d032      	beq.n	8003a20 <__ssputs_r+0x80>
 80039ba:	6825      	ldr	r5, [r4, #0]
 80039bc:	6909      	ldr	r1, [r1, #16]
 80039be:	eba5 0901 	sub.w	r9, r5, r1
 80039c2:	6965      	ldr	r5, [r4, #20]
 80039c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80039c8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80039cc:	3301      	adds	r3, #1
 80039ce:	444b      	add	r3, r9
 80039d0:	106d      	asrs	r5, r5, #1
 80039d2:	429d      	cmp	r5, r3
 80039d4:	bf38      	it	cc
 80039d6:	461d      	movcc	r5, r3
 80039d8:	0553      	lsls	r3, r2, #21
 80039da:	d531      	bpl.n	8003a40 <__ssputs_r+0xa0>
 80039dc:	4629      	mov	r1, r5
 80039de:	f000 fb63 	bl	80040a8 <_malloc_r>
 80039e2:	4606      	mov	r6, r0
 80039e4:	b950      	cbnz	r0, 80039fc <__ssputs_r+0x5c>
 80039e6:	230c      	movs	r3, #12
 80039e8:	f8ca 3000 	str.w	r3, [sl]
 80039ec:	89a3      	ldrh	r3, [r4, #12]
 80039ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80039f2:	81a3      	strh	r3, [r4, #12]
 80039f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80039f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039fc:	6921      	ldr	r1, [r4, #16]
 80039fe:	464a      	mov	r2, r9
 8003a00:	f000 fabe 	bl	8003f80 <memcpy>
 8003a04:	89a3      	ldrh	r3, [r4, #12]
 8003a06:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003a0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a0e:	81a3      	strh	r3, [r4, #12]
 8003a10:	6126      	str	r6, [r4, #16]
 8003a12:	6165      	str	r5, [r4, #20]
 8003a14:	444e      	add	r6, r9
 8003a16:	eba5 0509 	sub.w	r5, r5, r9
 8003a1a:	6026      	str	r6, [r4, #0]
 8003a1c:	60a5      	str	r5, [r4, #8]
 8003a1e:	463e      	mov	r6, r7
 8003a20:	42be      	cmp	r6, r7
 8003a22:	d900      	bls.n	8003a26 <__ssputs_r+0x86>
 8003a24:	463e      	mov	r6, r7
 8003a26:	6820      	ldr	r0, [r4, #0]
 8003a28:	4632      	mov	r2, r6
 8003a2a:	4641      	mov	r1, r8
 8003a2c:	f000 fab6 	bl	8003f9c <memmove>
 8003a30:	68a3      	ldr	r3, [r4, #8]
 8003a32:	1b9b      	subs	r3, r3, r6
 8003a34:	60a3      	str	r3, [r4, #8]
 8003a36:	6823      	ldr	r3, [r4, #0]
 8003a38:	4433      	add	r3, r6
 8003a3a:	6023      	str	r3, [r4, #0]
 8003a3c:	2000      	movs	r0, #0
 8003a3e:	e7db      	b.n	80039f8 <__ssputs_r+0x58>
 8003a40:	462a      	mov	r2, r5
 8003a42:	f000 fba5 	bl	8004190 <_realloc_r>
 8003a46:	4606      	mov	r6, r0
 8003a48:	2800      	cmp	r0, #0
 8003a4a:	d1e1      	bne.n	8003a10 <__ssputs_r+0x70>
 8003a4c:	6921      	ldr	r1, [r4, #16]
 8003a4e:	4650      	mov	r0, sl
 8003a50:	f000 fabe 	bl	8003fd0 <_free_r>
 8003a54:	e7c7      	b.n	80039e6 <__ssputs_r+0x46>
	...

08003a58 <_svfiprintf_r>:
 8003a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a5c:	4698      	mov	r8, r3
 8003a5e:	898b      	ldrh	r3, [r1, #12]
 8003a60:	061b      	lsls	r3, r3, #24
 8003a62:	b09d      	sub	sp, #116	; 0x74
 8003a64:	4607      	mov	r7, r0
 8003a66:	460d      	mov	r5, r1
 8003a68:	4614      	mov	r4, r2
 8003a6a:	d50e      	bpl.n	8003a8a <_svfiprintf_r+0x32>
 8003a6c:	690b      	ldr	r3, [r1, #16]
 8003a6e:	b963      	cbnz	r3, 8003a8a <_svfiprintf_r+0x32>
 8003a70:	2140      	movs	r1, #64	; 0x40
 8003a72:	f000 fb19 	bl	80040a8 <_malloc_r>
 8003a76:	6028      	str	r0, [r5, #0]
 8003a78:	6128      	str	r0, [r5, #16]
 8003a7a:	b920      	cbnz	r0, 8003a86 <_svfiprintf_r+0x2e>
 8003a7c:	230c      	movs	r3, #12
 8003a7e:	603b      	str	r3, [r7, #0]
 8003a80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003a84:	e0d1      	b.n	8003c2a <_svfiprintf_r+0x1d2>
 8003a86:	2340      	movs	r3, #64	; 0x40
 8003a88:	616b      	str	r3, [r5, #20]
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	9309      	str	r3, [sp, #36]	; 0x24
 8003a8e:	2320      	movs	r3, #32
 8003a90:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003a94:	f8cd 800c 	str.w	r8, [sp, #12]
 8003a98:	2330      	movs	r3, #48	; 0x30
 8003a9a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003c44 <_svfiprintf_r+0x1ec>
 8003a9e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003aa2:	f04f 0901 	mov.w	r9, #1
 8003aa6:	4623      	mov	r3, r4
 8003aa8:	469a      	mov	sl, r3
 8003aaa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003aae:	b10a      	cbz	r2, 8003ab4 <_svfiprintf_r+0x5c>
 8003ab0:	2a25      	cmp	r2, #37	; 0x25
 8003ab2:	d1f9      	bne.n	8003aa8 <_svfiprintf_r+0x50>
 8003ab4:	ebba 0b04 	subs.w	fp, sl, r4
 8003ab8:	d00b      	beq.n	8003ad2 <_svfiprintf_r+0x7a>
 8003aba:	465b      	mov	r3, fp
 8003abc:	4622      	mov	r2, r4
 8003abe:	4629      	mov	r1, r5
 8003ac0:	4638      	mov	r0, r7
 8003ac2:	f7ff ff6d 	bl	80039a0 <__ssputs_r>
 8003ac6:	3001      	adds	r0, #1
 8003ac8:	f000 80aa 	beq.w	8003c20 <_svfiprintf_r+0x1c8>
 8003acc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003ace:	445a      	add	r2, fp
 8003ad0:	9209      	str	r2, [sp, #36]	; 0x24
 8003ad2:	f89a 3000 	ldrb.w	r3, [sl]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	f000 80a2 	beq.w	8003c20 <_svfiprintf_r+0x1c8>
 8003adc:	2300      	movs	r3, #0
 8003ade:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003ae2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003ae6:	f10a 0a01 	add.w	sl, sl, #1
 8003aea:	9304      	str	r3, [sp, #16]
 8003aec:	9307      	str	r3, [sp, #28]
 8003aee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003af2:	931a      	str	r3, [sp, #104]	; 0x68
 8003af4:	4654      	mov	r4, sl
 8003af6:	2205      	movs	r2, #5
 8003af8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003afc:	4851      	ldr	r0, [pc, #324]	; (8003c44 <_svfiprintf_r+0x1ec>)
 8003afe:	f7fc fb87 	bl	8000210 <memchr>
 8003b02:	9a04      	ldr	r2, [sp, #16]
 8003b04:	b9d8      	cbnz	r0, 8003b3e <_svfiprintf_r+0xe6>
 8003b06:	06d0      	lsls	r0, r2, #27
 8003b08:	bf44      	itt	mi
 8003b0a:	2320      	movmi	r3, #32
 8003b0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003b10:	0711      	lsls	r1, r2, #28
 8003b12:	bf44      	itt	mi
 8003b14:	232b      	movmi	r3, #43	; 0x2b
 8003b16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003b1a:	f89a 3000 	ldrb.w	r3, [sl]
 8003b1e:	2b2a      	cmp	r3, #42	; 0x2a
 8003b20:	d015      	beq.n	8003b4e <_svfiprintf_r+0xf6>
 8003b22:	9a07      	ldr	r2, [sp, #28]
 8003b24:	4654      	mov	r4, sl
 8003b26:	2000      	movs	r0, #0
 8003b28:	f04f 0c0a 	mov.w	ip, #10
 8003b2c:	4621      	mov	r1, r4
 8003b2e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003b32:	3b30      	subs	r3, #48	; 0x30
 8003b34:	2b09      	cmp	r3, #9
 8003b36:	d94e      	bls.n	8003bd6 <_svfiprintf_r+0x17e>
 8003b38:	b1b0      	cbz	r0, 8003b68 <_svfiprintf_r+0x110>
 8003b3a:	9207      	str	r2, [sp, #28]
 8003b3c:	e014      	b.n	8003b68 <_svfiprintf_r+0x110>
 8003b3e:	eba0 0308 	sub.w	r3, r0, r8
 8003b42:	fa09 f303 	lsl.w	r3, r9, r3
 8003b46:	4313      	orrs	r3, r2
 8003b48:	9304      	str	r3, [sp, #16]
 8003b4a:	46a2      	mov	sl, r4
 8003b4c:	e7d2      	b.n	8003af4 <_svfiprintf_r+0x9c>
 8003b4e:	9b03      	ldr	r3, [sp, #12]
 8003b50:	1d19      	adds	r1, r3, #4
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	9103      	str	r1, [sp, #12]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	bfbb      	ittet	lt
 8003b5a:	425b      	neglt	r3, r3
 8003b5c:	f042 0202 	orrlt.w	r2, r2, #2
 8003b60:	9307      	strge	r3, [sp, #28]
 8003b62:	9307      	strlt	r3, [sp, #28]
 8003b64:	bfb8      	it	lt
 8003b66:	9204      	strlt	r2, [sp, #16]
 8003b68:	7823      	ldrb	r3, [r4, #0]
 8003b6a:	2b2e      	cmp	r3, #46	; 0x2e
 8003b6c:	d10c      	bne.n	8003b88 <_svfiprintf_r+0x130>
 8003b6e:	7863      	ldrb	r3, [r4, #1]
 8003b70:	2b2a      	cmp	r3, #42	; 0x2a
 8003b72:	d135      	bne.n	8003be0 <_svfiprintf_r+0x188>
 8003b74:	9b03      	ldr	r3, [sp, #12]
 8003b76:	1d1a      	adds	r2, r3, #4
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	9203      	str	r2, [sp, #12]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	bfb8      	it	lt
 8003b80:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003b84:	3402      	adds	r4, #2
 8003b86:	9305      	str	r3, [sp, #20]
 8003b88:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003c54 <_svfiprintf_r+0x1fc>
 8003b8c:	7821      	ldrb	r1, [r4, #0]
 8003b8e:	2203      	movs	r2, #3
 8003b90:	4650      	mov	r0, sl
 8003b92:	f7fc fb3d 	bl	8000210 <memchr>
 8003b96:	b140      	cbz	r0, 8003baa <_svfiprintf_r+0x152>
 8003b98:	2340      	movs	r3, #64	; 0x40
 8003b9a:	eba0 000a 	sub.w	r0, r0, sl
 8003b9e:	fa03 f000 	lsl.w	r0, r3, r0
 8003ba2:	9b04      	ldr	r3, [sp, #16]
 8003ba4:	4303      	orrs	r3, r0
 8003ba6:	3401      	adds	r4, #1
 8003ba8:	9304      	str	r3, [sp, #16]
 8003baa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003bae:	4826      	ldr	r0, [pc, #152]	; (8003c48 <_svfiprintf_r+0x1f0>)
 8003bb0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003bb4:	2206      	movs	r2, #6
 8003bb6:	f7fc fb2b 	bl	8000210 <memchr>
 8003bba:	2800      	cmp	r0, #0
 8003bbc:	d038      	beq.n	8003c30 <_svfiprintf_r+0x1d8>
 8003bbe:	4b23      	ldr	r3, [pc, #140]	; (8003c4c <_svfiprintf_r+0x1f4>)
 8003bc0:	bb1b      	cbnz	r3, 8003c0a <_svfiprintf_r+0x1b2>
 8003bc2:	9b03      	ldr	r3, [sp, #12]
 8003bc4:	3307      	adds	r3, #7
 8003bc6:	f023 0307 	bic.w	r3, r3, #7
 8003bca:	3308      	adds	r3, #8
 8003bcc:	9303      	str	r3, [sp, #12]
 8003bce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003bd0:	4433      	add	r3, r6
 8003bd2:	9309      	str	r3, [sp, #36]	; 0x24
 8003bd4:	e767      	b.n	8003aa6 <_svfiprintf_r+0x4e>
 8003bd6:	fb0c 3202 	mla	r2, ip, r2, r3
 8003bda:	460c      	mov	r4, r1
 8003bdc:	2001      	movs	r0, #1
 8003bde:	e7a5      	b.n	8003b2c <_svfiprintf_r+0xd4>
 8003be0:	2300      	movs	r3, #0
 8003be2:	3401      	adds	r4, #1
 8003be4:	9305      	str	r3, [sp, #20]
 8003be6:	4619      	mov	r1, r3
 8003be8:	f04f 0c0a 	mov.w	ip, #10
 8003bec:	4620      	mov	r0, r4
 8003bee:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003bf2:	3a30      	subs	r2, #48	; 0x30
 8003bf4:	2a09      	cmp	r2, #9
 8003bf6:	d903      	bls.n	8003c00 <_svfiprintf_r+0x1a8>
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d0c5      	beq.n	8003b88 <_svfiprintf_r+0x130>
 8003bfc:	9105      	str	r1, [sp, #20]
 8003bfe:	e7c3      	b.n	8003b88 <_svfiprintf_r+0x130>
 8003c00:	fb0c 2101 	mla	r1, ip, r1, r2
 8003c04:	4604      	mov	r4, r0
 8003c06:	2301      	movs	r3, #1
 8003c08:	e7f0      	b.n	8003bec <_svfiprintf_r+0x194>
 8003c0a:	ab03      	add	r3, sp, #12
 8003c0c:	9300      	str	r3, [sp, #0]
 8003c0e:	462a      	mov	r2, r5
 8003c10:	4b0f      	ldr	r3, [pc, #60]	; (8003c50 <_svfiprintf_r+0x1f8>)
 8003c12:	a904      	add	r1, sp, #16
 8003c14:	4638      	mov	r0, r7
 8003c16:	f3af 8000 	nop.w
 8003c1a:	1c42      	adds	r2, r0, #1
 8003c1c:	4606      	mov	r6, r0
 8003c1e:	d1d6      	bne.n	8003bce <_svfiprintf_r+0x176>
 8003c20:	89ab      	ldrh	r3, [r5, #12]
 8003c22:	065b      	lsls	r3, r3, #25
 8003c24:	f53f af2c 	bmi.w	8003a80 <_svfiprintf_r+0x28>
 8003c28:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003c2a:	b01d      	add	sp, #116	; 0x74
 8003c2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c30:	ab03      	add	r3, sp, #12
 8003c32:	9300      	str	r3, [sp, #0]
 8003c34:	462a      	mov	r2, r5
 8003c36:	4b06      	ldr	r3, [pc, #24]	; (8003c50 <_svfiprintf_r+0x1f8>)
 8003c38:	a904      	add	r1, sp, #16
 8003c3a:	4638      	mov	r0, r7
 8003c3c:	f000 f87a 	bl	8003d34 <_printf_i>
 8003c40:	e7eb      	b.n	8003c1a <_svfiprintf_r+0x1c2>
 8003c42:	bf00      	nop
 8003c44:	08005770 	.word	0x08005770
 8003c48:	0800577a 	.word	0x0800577a
 8003c4c:	00000000 	.word	0x00000000
 8003c50:	080039a1 	.word	0x080039a1
 8003c54:	08005776 	.word	0x08005776

08003c58 <_printf_common>:
 8003c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c5c:	4616      	mov	r6, r2
 8003c5e:	4699      	mov	r9, r3
 8003c60:	688a      	ldr	r2, [r1, #8]
 8003c62:	690b      	ldr	r3, [r1, #16]
 8003c64:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	bfb8      	it	lt
 8003c6c:	4613      	movlt	r3, r2
 8003c6e:	6033      	str	r3, [r6, #0]
 8003c70:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003c74:	4607      	mov	r7, r0
 8003c76:	460c      	mov	r4, r1
 8003c78:	b10a      	cbz	r2, 8003c7e <_printf_common+0x26>
 8003c7a:	3301      	adds	r3, #1
 8003c7c:	6033      	str	r3, [r6, #0]
 8003c7e:	6823      	ldr	r3, [r4, #0]
 8003c80:	0699      	lsls	r1, r3, #26
 8003c82:	bf42      	ittt	mi
 8003c84:	6833      	ldrmi	r3, [r6, #0]
 8003c86:	3302      	addmi	r3, #2
 8003c88:	6033      	strmi	r3, [r6, #0]
 8003c8a:	6825      	ldr	r5, [r4, #0]
 8003c8c:	f015 0506 	ands.w	r5, r5, #6
 8003c90:	d106      	bne.n	8003ca0 <_printf_common+0x48>
 8003c92:	f104 0a19 	add.w	sl, r4, #25
 8003c96:	68e3      	ldr	r3, [r4, #12]
 8003c98:	6832      	ldr	r2, [r6, #0]
 8003c9a:	1a9b      	subs	r3, r3, r2
 8003c9c:	42ab      	cmp	r3, r5
 8003c9e:	dc26      	bgt.n	8003cee <_printf_common+0x96>
 8003ca0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003ca4:	1e13      	subs	r3, r2, #0
 8003ca6:	6822      	ldr	r2, [r4, #0]
 8003ca8:	bf18      	it	ne
 8003caa:	2301      	movne	r3, #1
 8003cac:	0692      	lsls	r2, r2, #26
 8003cae:	d42b      	bmi.n	8003d08 <_printf_common+0xb0>
 8003cb0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003cb4:	4649      	mov	r1, r9
 8003cb6:	4638      	mov	r0, r7
 8003cb8:	47c0      	blx	r8
 8003cba:	3001      	adds	r0, #1
 8003cbc:	d01e      	beq.n	8003cfc <_printf_common+0xa4>
 8003cbe:	6823      	ldr	r3, [r4, #0]
 8003cc0:	68e5      	ldr	r5, [r4, #12]
 8003cc2:	6832      	ldr	r2, [r6, #0]
 8003cc4:	f003 0306 	and.w	r3, r3, #6
 8003cc8:	2b04      	cmp	r3, #4
 8003cca:	bf08      	it	eq
 8003ccc:	1aad      	subeq	r5, r5, r2
 8003cce:	68a3      	ldr	r3, [r4, #8]
 8003cd0:	6922      	ldr	r2, [r4, #16]
 8003cd2:	bf0c      	ite	eq
 8003cd4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003cd8:	2500      	movne	r5, #0
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	bfc4      	itt	gt
 8003cde:	1a9b      	subgt	r3, r3, r2
 8003ce0:	18ed      	addgt	r5, r5, r3
 8003ce2:	2600      	movs	r6, #0
 8003ce4:	341a      	adds	r4, #26
 8003ce6:	42b5      	cmp	r5, r6
 8003ce8:	d11a      	bne.n	8003d20 <_printf_common+0xc8>
 8003cea:	2000      	movs	r0, #0
 8003cec:	e008      	b.n	8003d00 <_printf_common+0xa8>
 8003cee:	2301      	movs	r3, #1
 8003cf0:	4652      	mov	r2, sl
 8003cf2:	4649      	mov	r1, r9
 8003cf4:	4638      	mov	r0, r7
 8003cf6:	47c0      	blx	r8
 8003cf8:	3001      	adds	r0, #1
 8003cfa:	d103      	bne.n	8003d04 <_printf_common+0xac>
 8003cfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003d00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d04:	3501      	adds	r5, #1
 8003d06:	e7c6      	b.n	8003c96 <_printf_common+0x3e>
 8003d08:	18e1      	adds	r1, r4, r3
 8003d0a:	1c5a      	adds	r2, r3, #1
 8003d0c:	2030      	movs	r0, #48	; 0x30
 8003d0e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003d12:	4422      	add	r2, r4
 8003d14:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003d18:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003d1c:	3302      	adds	r3, #2
 8003d1e:	e7c7      	b.n	8003cb0 <_printf_common+0x58>
 8003d20:	2301      	movs	r3, #1
 8003d22:	4622      	mov	r2, r4
 8003d24:	4649      	mov	r1, r9
 8003d26:	4638      	mov	r0, r7
 8003d28:	47c0      	blx	r8
 8003d2a:	3001      	adds	r0, #1
 8003d2c:	d0e6      	beq.n	8003cfc <_printf_common+0xa4>
 8003d2e:	3601      	adds	r6, #1
 8003d30:	e7d9      	b.n	8003ce6 <_printf_common+0x8e>
	...

08003d34 <_printf_i>:
 8003d34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003d38:	7e0f      	ldrb	r7, [r1, #24]
 8003d3a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003d3c:	2f78      	cmp	r7, #120	; 0x78
 8003d3e:	4691      	mov	r9, r2
 8003d40:	4680      	mov	r8, r0
 8003d42:	460c      	mov	r4, r1
 8003d44:	469a      	mov	sl, r3
 8003d46:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003d4a:	d807      	bhi.n	8003d5c <_printf_i+0x28>
 8003d4c:	2f62      	cmp	r7, #98	; 0x62
 8003d4e:	d80a      	bhi.n	8003d66 <_printf_i+0x32>
 8003d50:	2f00      	cmp	r7, #0
 8003d52:	f000 80d8 	beq.w	8003f06 <_printf_i+0x1d2>
 8003d56:	2f58      	cmp	r7, #88	; 0x58
 8003d58:	f000 80a3 	beq.w	8003ea2 <_printf_i+0x16e>
 8003d5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003d60:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003d64:	e03a      	b.n	8003ddc <_printf_i+0xa8>
 8003d66:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003d6a:	2b15      	cmp	r3, #21
 8003d6c:	d8f6      	bhi.n	8003d5c <_printf_i+0x28>
 8003d6e:	a101      	add	r1, pc, #4	; (adr r1, 8003d74 <_printf_i+0x40>)
 8003d70:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003d74:	08003dcd 	.word	0x08003dcd
 8003d78:	08003de1 	.word	0x08003de1
 8003d7c:	08003d5d 	.word	0x08003d5d
 8003d80:	08003d5d 	.word	0x08003d5d
 8003d84:	08003d5d 	.word	0x08003d5d
 8003d88:	08003d5d 	.word	0x08003d5d
 8003d8c:	08003de1 	.word	0x08003de1
 8003d90:	08003d5d 	.word	0x08003d5d
 8003d94:	08003d5d 	.word	0x08003d5d
 8003d98:	08003d5d 	.word	0x08003d5d
 8003d9c:	08003d5d 	.word	0x08003d5d
 8003da0:	08003eed 	.word	0x08003eed
 8003da4:	08003e11 	.word	0x08003e11
 8003da8:	08003ecf 	.word	0x08003ecf
 8003dac:	08003d5d 	.word	0x08003d5d
 8003db0:	08003d5d 	.word	0x08003d5d
 8003db4:	08003f0f 	.word	0x08003f0f
 8003db8:	08003d5d 	.word	0x08003d5d
 8003dbc:	08003e11 	.word	0x08003e11
 8003dc0:	08003d5d 	.word	0x08003d5d
 8003dc4:	08003d5d 	.word	0x08003d5d
 8003dc8:	08003ed7 	.word	0x08003ed7
 8003dcc:	682b      	ldr	r3, [r5, #0]
 8003dce:	1d1a      	adds	r2, r3, #4
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	602a      	str	r2, [r5, #0]
 8003dd4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003dd8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003ddc:	2301      	movs	r3, #1
 8003dde:	e0a3      	b.n	8003f28 <_printf_i+0x1f4>
 8003de0:	6820      	ldr	r0, [r4, #0]
 8003de2:	6829      	ldr	r1, [r5, #0]
 8003de4:	0606      	lsls	r6, r0, #24
 8003de6:	f101 0304 	add.w	r3, r1, #4
 8003dea:	d50a      	bpl.n	8003e02 <_printf_i+0xce>
 8003dec:	680e      	ldr	r6, [r1, #0]
 8003dee:	602b      	str	r3, [r5, #0]
 8003df0:	2e00      	cmp	r6, #0
 8003df2:	da03      	bge.n	8003dfc <_printf_i+0xc8>
 8003df4:	232d      	movs	r3, #45	; 0x2d
 8003df6:	4276      	negs	r6, r6
 8003df8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003dfc:	485e      	ldr	r0, [pc, #376]	; (8003f78 <_printf_i+0x244>)
 8003dfe:	230a      	movs	r3, #10
 8003e00:	e019      	b.n	8003e36 <_printf_i+0x102>
 8003e02:	680e      	ldr	r6, [r1, #0]
 8003e04:	602b      	str	r3, [r5, #0]
 8003e06:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003e0a:	bf18      	it	ne
 8003e0c:	b236      	sxthne	r6, r6
 8003e0e:	e7ef      	b.n	8003df0 <_printf_i+0xbc>
 8003e10:	682b      	ldr	r3, [r5, #0]
 8003e12:	6820      	ldr	r0, [r4, #0]
 8003e14:	1d19      	adds	r1, r3, #4
 8003e16:	6029      	str	r1, [r5, #0]
 8003e18:	0601      	lsls	r1, r0, #24
 8003e1a:	d501      	bpl.n	8003e20 <_printf_i+0xec>
 8003e1c:	681e      	ldr	r6, [r3, #0]
 8003e1e:	e002      	b.n	8003e26 <_printf_i+0xf2>
 8003e20:	0646      	lsls	r6, r0, #25
 8003e22:	d5fb      	bpl.n	8003e1c <_printf_i+0xe8>
 8003e24:	881e      	ldrh	r6, [r3, #0]
 8003e26:	4854      	ldr	r0, [pc, #336]	; (8003f78 <_printf_i+0x244>)
 8003e28:	2f6f      	cmp	r7, #111	; 0x6f
 8003e2a:	bf0c      	ite	eq
 8003e2c:	2308      	moveq	r3, #8
 8003e2e:	230a      	movne	r3, #10
 8003e30:	2100      	movs	r1, #0
 8003e32:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003e36:	6865      	ldr	r5, [r4, #4]
 8003e38:	60a5      	str	r5, [r4, #8]
 8003e3a:	2d00      	cmp	r5, #0
 8003e3c:	bfa2      	ittt	ge
 8003e3e:	6821      	ldrge	r1, [r4, #0]
 8003e40:	f021 0104 	bicge.w	r1, r1, #4
 8003e44:	6021      	strge	r1, [r4, #0]
 8003e46:	b90e      	cbnz	r6, 8003e4c <_printf_i+0x118>
 8003e48:	2d00      	cmp	r5, #0
 8003e4a:	d04d      	beq.n	8003ee8 <_printf_i+0x1b4>
 8003e4c:	4615      	mov	r5, r2
 8003e4e:	fbb6 f1f3 	udiv	r1, r6, r3
 8003e52:	fb03 6711 	mls	r7, r3, r1, r6
 8003e56:	5dc7      	ldrb	r7, [r0, r7]
 8003e58:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003e5c:	4637      	mov	r7, r6
 8003e5e:	42bb      	cmp	r3, r7
 8003e60:	460e      	mov	r6, r1
 8003e62:	d9f4      	bls.n	8003e4e <_printf_i+0x11a>
 8003e64:	2b08      	cmp	r3, #8
 8003e66:	d10b      	bne.n	8003e80 <_printf_i+0x14c>
 8003e68:	6823      	ldr	r3, [r4, #0]
 8003e6a:	07de      	lsls	r6, r3, #31
 8003e6c:	d508      	bpl.n	8003e80 <_printf_i+0x14c>
 8003e6e:	6923      	ldr	r3, [r4, #16]
 8003e70:	6861      	ldr	r1, [r4, #4]
 8003e72:	4299      	cmp	r1, r3
 8003e74:	bfde      	ittt	le
 8003e76:	2330      	movle	r3, #48	; 0x30
 8003e78:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003e7c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003e80:	1b52      	subs	r2, r2, r5
 8003e82:	6122      	str	r2, [r4, #16]
 8003e84:	f8cd a000 	str.w	sl, [sp]
 8003e88:	464b      	mov	r3, r9
 8003e8a:	aa03      	add	r2, sp, #12
 8003e8c:	4621      	mov	r1, r4
 8003e8e:	4640      	mov	r0, r8
 8003e90:	f7ff fee2 	bl	8003c58 <_printf_common>
 8003e94:	3001      	adds	r0, #1
 8003e96:	d14c      	bne.n	8003f32 <_printf_i+0x1fe>
 8003e98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003e9c:	b004      	add	sp, #16
 8003e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ea2:	4835      	ldr	r0, [pc, #212]	; (8003f78 <_printf_i+0x244>)
 8003ea4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003ea8:	6829      	ldr	r1, [r5, #0]
 8003eaa:	6823      	ldr	r3, [r4, #0]
 8003eac:	f851 6b04 	ldr.w	r6, [r1], #4
 8003eb0:	6029      	str	r1, [r5, #0]
 8003eb2:	061d      	lsls	r5, r3, #24
 8003eb4:	d514      	bpl.n	8003ee0 <_printf_i+0x1ac>
 8003eb6:	07df      	lsls	r7, r3, #31
 8003eb8:	bf44      	itt	mi
 8003eba:	f043 0320 	orrmi.w	r3, r3, #32
 8003ebe:	6023      	strmi	r3, [r4, #0]
 8003ec0:	b91e      	cbnz	r6, 8003eca <_printf_i+0x196>
 8003ec2:	6823      	ldr	r3, [r4, #0]
 8003ec4:	f023 0320 	bic.w	r3, r3, #32
 8003ec8:	6023      	str	r3, [r4, #0]
 8003eca:	2310      	movs	r3, #16
 8003ecc:	e7b0      	b.n	8003e30 <_printf_i+0xfc>
 8003ece:	6823      	ldr	r3, [r4, #0]
 8003ed0:	f043 0320 	orr.w	r3, r3, #32
 8003ed4:	6023      	str	r3, [r4, #0]
 8003ed6:	2378      	movs	r3, #120	; 0x78
 8003ed8:	4828      	ldr	r0, [pc, #160]	; (8003f7c <_printf_i+0x248>)
 8003eda:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003ede:	e7e3      	b.n	8003ea8 <_printf_i+0x174>
 8003ee0:	0659      	lsls	r1, r3, #25
 8003ee2:	bf48      	it	mi
 8003ee4:	b2b6      	uxthmi	r6, r6
 8003ee6:	e7e6      	b.n	8003eb6 <_printf_i+0x182>
 8003ee8:	4615      	mov	r5, r2
 8003eea:	e7bb      	b.n	8003e64 <_printf_i+0x130>
 8003eec:	682b      	ldr	r3, [r5, #0]
 8003eee:	6826      	ldr	r6, [r4, #0]
 8003ef0:	6961      	ldr	r1, [r4, #20]
 8003ef2:	1d18      	adds	r0, r3, #4
 8003ef4:	6028      	str	r0, [r5, #0]
 8003ef6:	0635      	lsls	r5, r6, #24
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	d501      	bpl.n	8003f00 <_printf_i+0x1cc>
 8003efc:	6019      	str	r1, [r3, #0]
 8003efe:	e002      	b.n	8003f06 <_printf_i+0x1d2>
 8003f00:	0670      	lsls	r0, r6, #25
 8003f02:	d5fb      	bpl.n	8003efc <_printf_i+0x1c8>
 8003f04:	8019      	strh	r1, [r3, #0]
 8003f06:	2300      	movs	r3, #0
 8003f08:	6123      	str	r3, [r4, #16]
 8003f0a:	4615      	mov	r5, r2
 8003f0c:	e7ba      	b.n	8003e84 <_printf_i+0x150>
 8003f0e:	682b      	ldr	r3, [r5, #0]
 8003f10:	1d1a      	adds	r2, r3, #4
 8003f12:	602a      	str	r2, [r5, #0]
 8003f14:	681d      	ldr	r5, [r3, #0]
 8003f16:	6862      	ldr	r2, [r4, #4]
 8003f18:	2100      	movs	r1, #0
 8003f1a:	4628      	mov	r0, r5
 8003f1c:	f7fc f978 	bl	8000210 <memchr>
 8003f20:	b108      	cbz	r0, 8003f26 <_printf_i+0x1f2>
 8003f22:	1b40      	subs	r0, r0, r5
 8003f24:	6060      	str	r0, [r4, #4]
 8003f26:	6863      	ldr	r3, [r4, #4]
 8003f28:	6123      	str	r3, [r4, #16]
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f30:	e7a8      	b.n	8003e84 <_printf_i+0x150>
 8003f32:	6923      	ldr	r3, [r4, #16]
 8003f34:	462a      	mov	r2, r5
 8003f36:	4649      	mov	r1, r9
 8003f38:	4640      	mov	r0, r8
 8003f3a:	47d0      	blx	sl
 8003f3c:	3001      	adds	r0, #1
 8003f3e:	d0ab      	beq.n	8003e98 <_printf_i+0x164>
 8003f40:	6823      	ldr	r3, [r4, #0]
 8003f42:	079b      	lsls	r3, r3, #30
 8003f44:	d413      	bmi.n	8003f6e <_printf_i+0x23a>
 8003f46:	68e0      	ldr	r0, [r4, #12]
 8003f48:	9b03      	ldr	r3, [sp, #12]
 8003f4a:	4298      	cmp	r0, r3
 8003f4c:	bfb8      	it	lt
 8003f4e:	4618      	movlt	r0, r3
 8003f50:	e7a4      	b.n	8003e9c <_printf_i+0x168>
 8003f52:	2301      	movs	r3, #1
 8003f54:	4632      	mov	r2, r6
 8003f56:	4649      	mov	r1, r9
 8003f58:	4640      	mov	r0, r8
 8003f5a:	47d0      	blx	sl
 8003f5c:	3001      	adds	r0, #1
 8003f5e:	d09b      	beq.n	8003e98 <_printf_i+0x164>
 8003f60:	3501      	adds	r5, #1
 8003f62:	68e3      	ldr	r3, [r4, #12]
 8003f64:	9903      	ldr	r1, [sp, #12]
 8003f66:	1a5b      	subs	r3, r3, r1
 8003f68:	42ab      	cmp	r3, r5
 8003f6a:	dcf2      	bgt.n	8003f52 <_printf_i+0x21e>
 8003f6c:	e7eb      	b.n	8003f46 <_printf_i+0x212>
 8003f6e:	2500      	movs	r5, #0
 8003f70:	f104 0619 	add.w	r6, r4, #25
 8003f74:	e7f5      	b.n	8003f62 <_printf_i+0x22e>
 8003f76:	bf00      	nop
 8003f78:	08005781 	.word	0x08005781
 8003f7c:	08005792 	.word	0x08005792

08003f80 <memcpy>:
 8003f80:	440a      	add	r2, r1
 8003f82:	4291      	cmp	r1, r2
 8003f84:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8003f88:	d100      	bne.n	8003f8c <memcpy+0xc>
 8003f8a:	4770      	bx	lr
 8003f8c:	b510      	push	{r4, lr}
 8003f8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003f92:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003f96:	4291      	cmp	r1, r2
 8003f98:	d1f9      	bne.n	8003f8e <memcpy+0xe>
 8003f9a:	bd10      	pop	{r4, pc}

08003f9c <memmove>:
 8003f9c:	4288      	cmp	r0, r1
 8003f9e:	b510      	push	{r4, lr}
 8003fa0:	eb01 0402 	add.w	r4, r1, r2
 8003fa4:	d902      	bls.n	8003fac <memmove+0x10>
 8003fa6:	4284      	cmp	r4, r0
 8003fa8:	4623      	mov	r3, r4
 8003faa:	d807      	bhi.n	8003fbc <memmove+0x20>
 8003fac:	1e43      	subs	r3, r0, #1
 8003fae:	42a1      	cmp	r1, r4
 8003fb0:	d008      	beq.n	8003fc4 <memmove+0x28>
 8003fb2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003fb6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003fba:	e7f8      	b.n	8003fae <memmove+0x12>
 8003fbc:	4402      	add	r2, r0
 8003fbe:	4601      	mov	r1, r0
 8003fc0:	428a      	cmp	r2, r1
 8003fc2:	d100      	bne.n	8003fc6 <memmove+0x2a>
 8003fc4:	bd10      	pop	{r4, pc}
 8003fc6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003fca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003fce:	e7f7      	b.n	8003fc0 <memmove+0x24>

08003fd0 <_free_r>:
 8003fd0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003fd2:	2900      	cmp	r1, #0
 8003fd4:	d044      	beq.n	8004060 <_free_r+0x90>
 8003fd6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003fda:	9001      	str	r0, [sp, #4]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	f1a1 0404 	sub.w	r4, r1, #4
 8003fe2:	bfb8      	it	lt
 8003fe4:	18e4      	addlt	r4, r4, r3
 8003fe6:	f000 f913 	bl	8004210 <__malloc_lock>
 8003fea:	4a1e      	ldr	r2, [pc, #120]	; (8004064 <_free_r+0x94>)
 8003fec:	9801      	ldr	r0, [sp, #4]
 8003fee:	6813      	ldr	r3, [r2, #0]
 8003ff0:	b933      	cbnz	r3, 8004000 <_free_r+0x30>
 8003ff2:	6063      	str	r3, [r4, #4]
 8003ff4:	6014      	str	r4, [r2, #0]
 8003ff6:	b003      	add	sp, #12
 8003ff8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003ffc:	f000 b90e 	b.w	800421c <__malloc_unlock>
 8004000:	42a3      	cmp	r3, r4
 8004002:	d908      	bls.n	8004016 <_free_r+0x46>
 8004004:	6825      	ldr	r5, [r4, #0]
 8004006:	1961      	adds	r1, r4, r5
 8004008:	428b      	cmp	r3, r1
 800400a:	bf01      	itttt	eq
 800400c:	6819      	ldreq	r1, [r3, #0]
 800400e:	685b      	ldreq	r3, [r3, #4]
 8004010:	1949      	addeq	r1, r1, r5
 8004012:	6021      	streq	r1, [r4, #0]
 8004014:	e7ed      	b.n	8003ff2 <_free_r+0x22>
 8004016:	461a      	mov	r2, r3
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	b10b      	cbz	r3, 8004020 <_free_r+0x50>
 800401c:	42a3      	cmp	r3, r4
 800401e:	d9fa      	bls.n	8004016 <_free_r+0x46>
 8004020:	6811      	ldr	r1, [r2, #0]
 8004022:	1855      	adds	r5, r2, r1
 8004024:	42a5      	cmp	r5, r4
 8004026:	d10b      	bne.n	8004040 <_free_r+0x70>
 8004028:	6824      	ldr	r4, [r4, #0]
 800402a:	4421      	add	r1, r4
 800402c:	1854      	adds	r4, r2, r1
 800402e:	42a3      	cmp	r3, r4
 8004030:	6011      	str	r1, [r2, #0]
 8004032:	d1e0      	bne.n	8003ff6 <_free_r+0x26>
 8004034:	681c      	ldr	r4, [r3, #0]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	6053      	str	r3, [r2, #4]
 800403a:	4421      	add	r1, r4
 800403c:	6011      	str	r1, [r2, #0]
 800403e:	e7da      	b.n	8003ff6 <_free_r+0x26>
 8004040:	d902      	bls.n	8004048 <_free_r+0x78>
 8004042:	230c      	movs	r3, #12
 8004044:	6003      	str	r3, [r0, #0]
 8004046:	e7d6      	b.n	8003ff6 <_free_r+0x26>
 8004048:	6825      	ldr	r5, [r4, #0]
 800404a:	1961      	adds	r1, r4, r5
 800404c:	428b      	cmp	r3, r1
 800404e:	bf04      	itt	eq
 8004050:	6819      	ldreq	r1, [r3, #0]
 8004052:	685b      	ldreq	r3, [r3, #4]
 8004054:	6063      	str	r3, [r4, #4]
 8004056:	bf04      	itt	eq
 8004058:	1949      	addeq	r1, r1, r5
 800405a:	6021      	streq	r1, [r4, #0]
 800405c:	6054      	str	r4, [r2, #4]
 800405e:	e7ca      	b.n	8003ff6 <_free_r+0x26>
 8004060:	b003      	add	sp, #12
 8004062:	bd30      	pop	{r4, r5, pc}
 8004064:	2000038c 	.word	0x2000038c

08004068 <sbrk_aligned>:
 8004068:	b570      	push	{r4, r5, r6, lr}
 800406a:	4e0e      	ldr	r6, [pc, #56]	; (80040a4 <sbrk_aligned+0x3c>)
 800406c:	460c      	mov	r4, r1
 800406e:	6831      	ldr	r1, [r6, #0]
 8004070:	4605      	mov	r5, r0
 8004072:	b911      	cbnz	r1, 800407a <sbrk_aligned+0x12>
 8004074:	f000 f8bc 	bl	80041f0 <_sbrk_r>
 8004078:	6030      	str	r0, [r6, #0]
 800407a:	4621      	mov	r1, r4
 800407c:	4628      	mov	r0, r5
 800407e:	f000 f8b7 	bl	80041f0 <_sbrk_r>
 8004082:	1c43      	adds	r3, r0, #1
 8004084:	d00a      	beq.n	800409c <sbrk_aligned+0x34>
 8004086:	1cc4      	adds	r4, r0, #3
 8004088:	f024 0403 	bic.w	r4, r4, #3
 800408c:	42a0      	cmp	r0, r4
 800408e:	d007      	beq.n	80040a0 <sbrk_aligned+0x38>
 8004090:	1a21      	subs	r1, r4, r0
 8004092:	4628      	mov	r0, r5
 8004094:	f000 f8ac 	bl	80041f0 <_sbrk_r>
 8004098:	3001      	adds	r0, #1
 800409a:	d101      	bne.n	80040a0 <sbrk_aligned+0x38>
 800409c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80040a0:	4620      	mov	r0, r4
 80040a2:	bd70      	pop	{r4, r5, r6, pc}
 80040a4:	20000390 	.word	0x20000390

080040a8 <_malloc_r>:
 80040a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040ac:	1ccd      	adds	r5, r1, #3
 80040ae:	f025 0503 	bic.w	r5, r5, #3
 80040b2:	3508      	adds	r5, #8
 80040b4:	2d0c      	cmp	r5, #12
 80040b6:	bf38      	it	cc
 80040b8:	250c      	movcc	r5, #12
 80040ba:	2d00      	cmp	r5, #0
 80040bc:	4607      	mov	r7, r0
 80040be:	db01      	blt.n	80040c4 <_malloc_r+0x1c>
 80040c0:	42a9      	cmp	r1, r5
 80040c2:	d905      	bls.n	80040d0 <_malloc_r+0x28>
 80040c4:	230c      	movs	r3, #12
 80040c6:	603b      	str	r3, [r7, #0]
 80040c8:	2600      	movs	r6, #0
 80040ca:	4630      	mov	r0, r6
 80040cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80040d0:	4e2e      	ldr	r6, [pc, #184]	; (800418c <_malloc_r+0xe4>)
 80040d2:	f000 f89d 	bl	8004210 <__malloc_lock>
 80040d6:	6833      	ldr	r3, [r6, #0]
 80040d8:	461c      	mov	r4, r3
 80040da:	bb34      	cbnz	r4, 800412a <_malloc_r+0x82>
 80040dc:	4629      	mov	r1, r5
 80040de:	4638      	mov	r0, r7
 80040e0:	f7ff ffc2 	bl	8004068 <sbrk_aligned>
 80040e4:	1c43      	adds	r3, r0, #1
 80040e6:	4604      	mov	r4, r0
 80040e8:	d14d      	bne.n	8004186 <_malloc_r+0xde>
 80040ea:	6834      	ldr	r4, [r6, #0]
 80040ec:	4626      	mov	r6, r4
 80040ee:	2e00      	cmp	r6, #0
 80040f0:	d140      	bne.n	8004174 <_malloc_r+0xcc>
 80040f2:	6823      	ldr	r3, [r4, #0]
 80040f4:	4631      	mov	r1, r6
 80040f6:	4638      	mov	r0, r7
 80040f8:	eb04 0803 	add.w	r8, r4, r3
 80040fc:	f000 f878 	bl	80041f0 <_sbrk_r>
 8004100:	4580      	cmp	r8, r0
 8004102:	d13a      	bne.n	800417a <_malloc_r+0xd2>
 8004104:	6821      	ldr	r1, [r4, #0]
 8004106:	3503      	adds	r5, #3
 8004108:	1a6d      	subs	r5, r5, r1
 800410a:	f025 0503 	bic.w	r5, r5, #3
 800410e:	3508      	adds	r5, #8
 8004110:	2d0c      	cmp	r5, #12
 8004112:	bf38      	it	cc
 8004114:	250c      	movcc	r5, #12
 8004116:	4629      	mov	r1, r5
 8004118:	4638      	mov	r0, r7
 800411a:	f7ff ffa5 	bl	8004068 <sbrk_aligned>
 800411e:	3001      	adds	r0, #1
 8004120:	d02b      	beq.n	800417a <_malloc_r+0xd2>
 8004122:	6823      	ldr	r3, [r4, #0]
 8004124:	442b      	add	r3, r5
 8004126:	6023      	str	r3, [r4, #0]
 8004128:	e00e      	b.n	8004148 <_malloc_r+0xa0>
 800412a:	6822      	ldr	r2, [r4, #0]
 800412c:	1b52      	subs	r2, r2, r5
 800412e:	d41e      	bmi.n	800416e <_malloc_r+0xc6>
 8004130:	2a0b      	cmp	r2, #11
 8004132:	d916      	bls.n	8004162 <_malloc_r+0xba>
 8004134:	1961      	adds	r1, r4, r5
 8004136:	42a3      	cmp	r3, r4
 8004138:	6025      	str	r5, [r4, #0]
 800413a:	bf18      	it	ne
 800413c:	6059      	strne	r1, [r3, #4]
 800413e:	6863      	ldr	r3, [r4, #4]
 8004140:	bf08      	it	eq
 8004142:	6031      	streq	r1, [r6, #0]
 8004144:	5162      	str	r2, [r4, r5]
 8004146:	604b      	str	r3, [r1, #4]
 8004148:	4638      	mov	r0, r7
 800414a:	f104 060b 	add.w	r6, r4, #11
 800414e:	f000 f865 	bl	800421c <__malloc_unlock>
 8004152:	f026 0607 	bic.w	r6, r6, #7
 8004156:	1d23      	adds	r3, r4, #4
 8004158:	1af2      	subs	r2, r6, r3
 800415a:	d0b6      	beq.n	80040ca <_malloc_r+0x22>
 800415c:	1b9b      	subs	r3, r3, r6
 800415e:	50a3      	str	r3, [r4, r2]
 8004160:	e7b3      	b.n	80040ca <_malloc_r+0x22>
 8004162:	6862      	ldr	r2, [r4, #4]
 8004164:	42a3      	cmp	r3, r4
 8004166:	bf0c      	ite	eq
 8004168:	6032      	streq	r2, [r6, #0]
 800416a:	605a      	strne	r2, [r3, #4]
 800416c:	e7ec      	b.n	8004148 <_malloc_r+0xa0>
 800416e:	4623      	mov	r3, r4
 8004170:	6864      	ldr	r4, [r4, #4]
 8004172:	e7b2      	b.n	80040da <_malloc_r+0x32>
 8004174:	4634      	mov	r4, r6
 8004176:	6876      	ldr	r6, [r6, #4]
 8004178:	e7b9      	b.n	80040ee <_malloc_r+0x46>
 800417a:	230c      	movs	r3, #12
 800417c:	603b      	str	r3, [r7, #0]
 800417e:	4638      	mov	r0, r7
 8004180:	f000 f84c 	bl	800421c <__malloc_unlock>
 8004184:	e7a1      	b.n	80040ca <_malloc_r+0x22>
 8004186:	6025      	str	r5, [r4, #0]
 8004188:	e7de      	b.n	8004148 <_malloc_r+0xa0>
 800418a:	bf00      	nop
 800418c:	2000038c 	.word	0x2000038c

08004190 <_realloc_r>:
 8004190:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004194:	4680      	mov	r8, r0
 8004196:	4614      	mov	r4, r2
 8004198:	460e      	mov	r6, r1
 800419a:	b921      	cbnz	r1, 80041a6 <_realloc_r+0x16>
 800419c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80041a0:	4611      	mov	r1, r2
 80041a2:	f7ff bf81 	b.w	80040a8 <_malloc_r>
 80041a6:	b92a      	cbnz	r2, 80041b4 <_realloc_r+0x24>
 80041a8:	f7ff ff12 	bl	8003fd0 <_free_r>
 80041ac:	4625      	mov	r5, r4
 80041ae:	4628      	mov	r0, r5
 80041b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80041b4:	f000 f838 	bl	8004228 <_malloc_usable_size_r>
 80041b8:	4284      	cmp	r4, r0
 80041ba:	4607      	mov	r7, r0
 80041bc:	d802      	bhi.n	80041c4 <_realloc_r+0x34>
 80041be:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80041c2:	d812      	bhi.n	80041ea <_realloc_r+0x5a>
 80041c4:	4621      	mov	r1, r4
 80041c6:	4640      	mov	r0, r8
 80041c8:	f7ff ff6e 	bl	80040a8 <_malloc_r>
 80041cc:	4605      	mov	r5, r0
 80041ce:	2800      	cmp	r0, #0
 80041d0:	d0ed      	beq.n	80041ae <_realloc_r+0x1e>
 80041d2:	42bc      	cmp	r4, r7
 80041d4:	4622      	mov	r2, r4
 80041d6:	4631      	mov	r1, r6
 80041d8:	bf28      	it	cs
 80041da:	463a      	movcs	r2, r7
 80041dc:	f7ff fed0 	bl	8003f80 <memcpy>
 80041e0:	4631      	mov	r1, r6
 80041e2:	4640      	mov	r0, r8
 80041e4:	f7ff fef4 	bl	8003fd0 <_free_r>
 80041e8:	e7e1      	b.n	80041ae <_realloc_r+0x1e>
 80041ea:	4635      	mov	r5, r6
 80041ec:	e7df      	b.n	80041ae <_realloc_r+0x1e>
	...

080041f0 <_sbrk_r>:
 80041f0:	b538      	push	{r3, r4, r5, lr}
 80041f2:	4d06      	ldr	r5, [pc, #24]	; (800420c <_sbrk_r+0x1c>)
 80041f4:	2300      	movs	r3, #0
 80041f6:	4604      	mov	r4, r0
 80041f8:	4608      	mov	r0, r1
 80041fa:	602b      	str	r3, [r5, #0]
 80041fc:	f7fc fe54 	bl	8000ea8 <_sbrk>
 8004200:	1c43      	adds	r3, r0, #1
 8004202:	d102      	bne.n	800420a <_sbrk_r+0x1a>
 8004204:	682b      	ldr	r3, [r5, #0]
 8004206:	b103      	cbz	r3, 800420a <_sbrk_r+0x1a>
 8004208:	6023      	str	r3, [r4, #0]
 800420a:	bd38      	pop	{r3, r4, r5, pc}
 800420c:	20000394 	.word	0x20000394

08004210 <__malloc_lock>:
 8004210:	4801      	ldr	r0, [pc, #4]	; (8004218 <__malloc_lock+0x8>)
 8004212:	f000 b811 	b.w	8004238 <__retarget_lock_acquire_recursive>
 8004216:	bf00      	nop
 8004218:	20000398 	.word	0x20000398

0800421c <__malloc_unlock>:
 800421c:	4801      	ldr	r0, [pc, #4]	; (8004224 <__malloc_unlock+0x8>)
 800421e:	f000 b80c 	b.w	800423a <__retarget_lock_release_recursive>
 8004222:	bf00      	nop
 8004224:	20000398 	.word	0x20000398

08004228 <_malloc_usable_size_r>:
 8004228:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800422c:	1f18      	subs	r0, r3, #4
 800422e:	2b00      	cmp	r3, #0
 8004230:	bfbc      	itt	lt
 8004232:	580b      	ldrlt	r3, [r1, r0]
 8004234:	18c0      	addlt	r0, r0, r3
 8004236:	4770      	bx	lr

08004238 <__retarget_lock_acquire_recursive>:
 8004238:	4770      	bx	lr

0800423a <__retarget_lock_release_recursive>:
 800423a:	4770      	bx	lr

0800423c <_init>:
 800423c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800423e:	bf00      	nop
 8004240:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004242:	bc08      	pop	{r3}
 8004244:	469e      	mov	lr, r3
 8004246:	4770      	bx	lr

08004248 <_fini>:
 8004248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800424a:	bf00      	nop
 800424c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800424e:	bc08      	pop	{r3}
 8004250:	469e      	mov	lr, r3
 8004252:	4770      	bx	lr
