
nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000055b4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000157c  08005784  08005784  00015784  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d00  08006d00  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08006d00  08006d00  00016d00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006d08  08006d08  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d08  08006d08  00016d08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006d0c  08006d0c  00016d0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08006d10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003c4  20000080  08006d90  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000444  08006d90  00020444  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001316c  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ad9  00000000  00000000  0003321c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001100  00000000  00000000  00035cf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fe0  00000000  00000000  00036df8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023772  00000000  00000000  00037dd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016774  00000000  00000000  0005b54a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d3de9  00000000  00000000  00071cbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00145aa7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ae4  00000000  00000000  00145af8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000080 	.word	0x20000080
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800576c 	.word	0x0800576c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000084 	.word	0x20000084
 800020c:	0800576c 	.word	0x0800576c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80005ba:	f000 fa21 	bl	8000a00 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80005be:	f644 6320 	movw	r3, #20000	; 0x4e20
 80005c2:	2201      	movs	r2, #1
 80005c4:	2178      	movs	r1, #120	; 0x78
 80005c6:	485b      	ldr	r0, [pc, #364]	; (8000734 <SSD1306_Init+0x180>)
 80005c8:	f002 f85e 	bl	8002688 <HAL_I2C_IsDeviceReady>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80005d2:	2300      	movs	r3, #0
 80005d4:	e0a9      	b.n	800072a <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 80005d6:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80005da:	607b      	str	r3, [r7, #4]
	while(p>0)
 80005dc:	e002      	b.n	80005e4 <SSD1306_Init+0x30>
		p--;
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	3b01      	subs	r3, #1
 80005e2:	607b      	str	r3, [r7, #4]
	while(p>0)
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d1f9      	bne.n	80005de <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80005ea:	22ae      	movs	r2, #174	; 0xae
 80005ec:	2100      	movs	r1, #0
 80005ee:	2078      	movs	r0, #120	; 0x78
 80005f0:	f000 fa82 	bl	8000af8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 80005f4:	2220      	movs	r2, #32
 80005f6:	2100      	movs	r1, #0
 80005f8:	2078      	movs	r0, #120	; 0x78
 80005fa:	f000 fa7d 	bl	8000af8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80005fe:	2210      	movs	r2, #16
 8000600:	2100      	movs	r1, #0
 8000602:	2078      	movs	r0, #120	; 0x78
 8000604:	f000 fa78 	bl	8000af8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000608:	22b0      	movs	r2, #176	; 0xb0
 800060a:	2100      	movs	r1, #0
 800060c:	2078      	movs	r0, #120	; 0x78
 800060e:	f000 fa73 	bl	8000af8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8000612:	22c8      	movs	r2, #200	; 0xc8
 8000614:	2100      	movs	r1, #0
 8000616:	2078      	movs	r0, #120	; 0x78
 8000618:	f000 fa6e 	bl	8000af8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 800061c:	2200      	movs	r2, #0
 800061e:	2100      	movs	r1, #0
 8000620:	2078      	movs	r0, #120	; 0x78
 8000622:	f000 fa69 	bl	8000af8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8000626:	2210      	movs	r2, #16
 8000628:	2100      	movs	r1, #0
 800062a:	2078      	movs	r0, #120	; 0x78
 800062c:	f000 fa64 	bl	8000af8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000630:	2240      	movs	r2, #64	; 0x40
 8000632:	2100      	movs	r1, #0
 8000634:	2078      	movs	r0, #120	; 0x78
 8000636:	f000 fa5f 	bl	8000af8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 800063a:	2281      	movs	r2, #129	; 0x81
 800063c:	2100      	movs	r1, #0
 800063e:	2078      	movs	r0, #120	; 0x78
 8000640:	f000 fa5a 	bl	8000af8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8000644:	22ff      	movs	r2, #255	; 0xff
 8000646:	2100      	movs	r1, #0
 8000648:	2078      	movs	r0, #120	; 0x78
 800064a:	f000 fa55 	bl	8000af8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800064e:	22a1      	movs	r2, #161	; 0xa1
 8000650:	2100      	movs	r1, #0
 8000652:	2078      	movs	r0, #120	; 0x78
 8000654:	f000 fa50 	bl	8000af8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000658:	22a6      	movs	r2, #166	; 0xa6
 800065a:	2100      	movs	r1, #0
 800065c:	2078      	movs	r0, #120	; 0x78
 800065e:	f000 fa4b 	bl	8000af8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8000662:	22a8      	movs	r2, #168	; 0xa8
 8000664:	2100      	movs	r1, #0
 8000666:	2078      	movs	r0, #120	; 0x78
 8000668:	f000 fa46 	bl	8000af8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x1F); //
 800066c:	221f      	movs	r2, #31
 800066e:	2100      	movs	r1, #0
 8000670:	2078      	movs	r0, #120	; 0x78
 8000672:	f000 fa41 	bl	8000af8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000676:	22a4      	movs	r2, #164	; 0xa4
 8000678:	2100      	movs	r1, #0
 800067a:	2078      	movs	r0, #120	; 0x78
 800067c:	f000 fa3c 	bl	8000af8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8000680:	22d3      	movs	r2, #211	; 0xd3
 8000682:	2100      	movs	r1, #0
 8000684:	2078      	movs	r0, #120	; 0x78
 8000686:	f000 fa37 	bl	8000af8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 800068a:	2200      	movs	r2, #0
 800068c:	2100      	movs	r1, #0
 800068e:	2078      	movs	r0, #120	; 0x78
 8000690:	f000 fa32 	bl	8000af8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8000694:	22d5      	movs	r2, #213	; 0xd5
 8000696:	2100      	movs	r1, #0
 8000698:	2078      	movs	r0, #120	; 0x78
 800069a:	f000 fa2d 	bl	8000af8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 800069e:	22f0      	movs	r2, #240	; 0xf0
 80006a0:	2100      	movs	r1, #0
 80006a2:	2078      	movs	r0, #120	; 0x78
 80006a4:	f000 fa28 	bl	8000af8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80006a8:	22d9      	movs	r2, #217	; 0xd9
 80006aa:	2100      	movs	r1, #0
 80006ac:	2078      	movs	r0, #120	; 0x78
 80006ae:	f000 fa23 	bl	8000af8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80006b2:	2222      	movs	r2, #34	; 0x22
 80006b4:	2100      	movs	r1, #0
 80006b6:	2078      	movs	r0, #120	; 0x78
 80006b8:	f000 fa1e 	bl	8000af8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80006bc:	22da      	movs	r2, #218	; 0xda
 80006be:	2100      	movs	r1, #0
 80006c0:	2078      	movs	r0, #120	; 0x78
 80006c2:	f000 fa19 	bl	8000af8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x02);
 80006c6:	2202      	movs	r2, #2
 80006c8:	2100      	movs	r1, #0
 80006ca:	2078      	movs	r0, #120	; 0x78
 80006cc:	f000 fa14 	bl	8000af8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80006d0:	22db      	movs	r2, #219	; 0xdb
 80006d2:	2100      	movs	r1, #0
 80006d4:	2078      	movs	r0, #120	; 0x78
 80006d6:	f000 fa0f 	bl	8000af8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80006da:	2220      	movs	r2, #32
 80006dc:	2100      	movs	r1, #0
 80006de:	2078      	movs	r0, #120	; 0x78
 80006e0:	f000 fa0a 	bl	8000af8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80006e4:	228d      	movs	r2, #141	; 0x8d
 80006e6:	2100      	movs	r1, #0
 80006e8:	2078      	movs	r0, #120	; 0x78
 80006ea:	f000 fa05 	bl	8000af8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80006ee:	2214      	movs	r2, #20
 80006f0:	2100      	movs	r1, #0
 80006f2:	2078      	movs	r0, #120	; 0x78
 80006f4:	f000 fa00 	bl	8000af8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80006f8:	22af      	movs	r2, #175	; 0xaf
 80006fa:	2100      	movs	r1, #0
 80006fc:	2078      	movs	r0, #120	; 0x78
 80006fe:	f000 f9fb 	bl	8000af8 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8000702:	222e      	movs	r2, #46	; 0x2e
 8000704:	2100      	movs	r1, #0
 8000706:	2078      	movs	r0, #120	; 0x78
 8000708:	f000 f9f6 	bl	8000af8 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 800070c:	2000      	movs	r0, #0
 800070e:	f000 f843 	bl	8000798 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 8000712:	f000 f813 	bl	800073c <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 8000716:	4b08      	ldr	r3, [pc, #32]	; (8000738 <SSD1306_Init+0x184>)
 8000718:	2200      	movs	r2, #0
 800071a:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 800071c:	4b06      	ldr	r3, [pc, #24]	; (8000738 <SSD1306_Init+0x184>)
 800071e:	2200      	movs	r2, #0
 8000720:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 8000722:	4b05      	ldr	r3, [pc, #20]	; (8000738 <SSD1306_Init+0x184>)
 8000724:	2201      	movs	r2, #1
 8000726:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8000728:	2301      	movs	r3, #1
}
 800072a:	4618      	mov	r0, r3
 800072c:	3708      	adds	r7, #8
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	200002a4 	.word	0x200002a4
 8000738:	2000029c 	.word	0x2000029c

0800073c <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8000742:	2300      	movs	r3, #0
 8000744:	71fb      	strb	r3, [r7, #7]
 8000746:	e01d      	b.n	8000784 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8000748:	79fb      	ldrb	r3, [r7, #7]
 800074a:	3b50      	subs	r3, #80	; 0x50
 800074c:	b2db      	uxtb	r3, r3
 800074e:	461a      	mov	r2, r3
 8000750:	2100      	movs	r1, #0
 8000752:	2078      	movs	r0, #120	; 0x78
 8000754:	f000 f9d0 	bl	8000af8 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8000758:	2200      	movs	r2, #0
 800075a:	2100      	movs	r1, #0
 800075c:	2078      	movs	r0, #120	; 0x78
 800075e:	f000 f9cb 	bl	8000af8 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8000762:	2210      	movs	r2, #16
 8000764:	2100      	movs	r1, #0
 8000766:	2078      	movs	r0, #120	; 0x78
 8000768:	f000 f9c6 	bl	8000af8 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 800076c:	79fb      	ldrb	r3, [r7, #7]
 800076e:	01db      	lsls	r3, r3, #7
 8000770:	4a08      	ldr	r2, [pc, #32]	; (8000794 <SSD1306_UpdateScreen+0x58>)
 8000772:	441a      	add	r2, r3
 8000774:	2380      	movs	r3, #128	; 0x80
 8000776:	2140      	movs	r1, #64	; 0x40
 8000778:	2078      	movs	r0, #120	; 0x78
 800077a:	f000 f957 	bl	8000a2c <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800077e:	79fb      	ldrb	r3, [r7, #7]
 8000780:	3301      	adds	r3, #1
 8000782:	71fb      	strb	r3, [r7, #7]
 8000784:	79fb      	ldrb	r3, [r7, #7]
 8000786:	2b07      	cmp	r3, #7
 8000788:	d9de      	bls.n	8000748 <SSD1306_UpdateScreen+0xc>
	}
}
 800078a:	bf00      	nop
 800078c:	bf00      	nop
 800078e:	3708      	adds	r7, #8
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	2000009c 	.word	0x2000009c

08000798 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	4603      	mov	r3, r0
 80007a0:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80007a2:	79fb      	ldrb	r3, [r7, #7]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d101      	bne.n	80007ac <SSD1306_Fill+0x14>
 80007a8:	2300      	movs	r3, #0
 80007aa:	e000      	b.n	80007ae <SSD1306_Fill+0x16>
 80007ac:	23ff      	movs	r3, #255	; 0xff
 80007ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007b2:	4619      	mov	r1, r3
 80007b4:	4803      	ldr	r0, [pc, #12]	; (80007c4 <SSD1306_Fill+0x2c>)
 80007b6:	f004 fb63 	bl	8004e80 <memset>
}
 80007ba:	bf00      	nop
 80007bc:	3708      	adds	r7, #8
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	2000009c 	.word	0x2000009c

080007c8 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80007c8:	b480      	push	{r7}
 80007ca:	b083      	sub	sp, #12
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	4603      	mov	r3, r0
 80007d0:	80fb      	strh	r3, [r7, #6]
 80007d2:	460b      	mov	r3, r1
 80007d4:	80bb      	strh	r3, [r7, #4]
 80007d6:	4613      	mov	r3, r2
 80007d8:	70fb      	strb	r3, [r7, #3]
	if (
 80007da:	88fb      	ldrh	r3, [r7, #6]
 80007dc:	2b7f      	cmp	r3, #127	; 0x7f
 80007de:	d848      	bhi.n	8000872 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80007e0:	88bb      	ldrh	r3, [r7, #4]
 80007e2:	2b1f      	cmp	r3, #31
 80007e4:	d845      	bhi.n	8000872 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80007e6:	4b26      	ldr	r3, [pc, #152]	; (8000880 <SSD1306_DrawPixel+0xb8>)
 80007e8:	791b      	ldrb	r3, [r3, #4]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d006      	beq.n	80007fc <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80007ee:	78fb      	ldrb	r3, [r7, #3]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	bf0c      	ite	eq
 80007f4:	2301      	moveq	r3, #1
 80007f6:	2300      	movne	r3, #0
 80007f8:	b2db      	uxtb	r3, r3
 80007fa:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80007fc:	78fb      	ldrb	r3, [r7, #3]
 80007fe:	2b01      	cmp	r3, #1
 8000800:	d11a      	bne.n	8000838 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000802:	88fa      	ldrh	r2, [r7, #6]
 8000804:	88bb      	ldrh	r3, [r7, #4]
 8000806:	08db      	lsrs	r3, r3, #3
 8000808:	b298      	uxth	r0, r3
 800080a:	4603      	mov	r3, r0
 800080c:	01db      	lsls	r3, r3, #7
 800080e:	4413      	add	r3, r2
 8000810:	4a1c      	ldr	r2, [pc, #112]	; (8000884 <SSD1306_DrawPixel+0xbc>)
 8000812:	5cd3      	ldrb	r3, [r2, r3]
 8000814:	b25a      	sxtb	r2, r3
 8000816:	88bb      	ldrh	r3, [r7, #4]
 8000818:	f003 0307 	and.w	r3, r3, #7
 800081c:	2101      	movs	r1, #1
 800081e:	fa01 f303 	lsl.w	r3, r1, r3
 8000822:	b25b      	sxtb	r3, r3
 8000824:	4313      	orrs	r3, r2
 8000826:	b259      	sxtb	r1, r3
 8000828:	88fa      	ldrh	r2, [r7, #6]
 800082a:	4603      	mov	r3, r0
 800082c:	01db      	lsls	r3, r3, #7
 800082e:	4413      	add	r3, r2
 8000830:	b2c9      	uxtb	r1, r1
 8000832:	4a14      	ldr	r2, [pc, #80]	; (8000884 <SSD1306_DrawPixel+0xbc>)
 8000834:	54d1      	strb	r1, [r2, r3]
 8000836:	e01d      	b.n	8000874 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000838:	88fa      	ldrh	r2, [r7, #6]
 800083a:	88bb      	ldrh	r3, [r7, #4]
 800083c:	08db      	lsrs	r3, r3, #3
 800083e:	b298      	uxth	r0, r3
 8000840:	4603      	mov	r3, r0
 8000842:	01db      	lsls	r3, r3, #7
 8000844:	4413      	add	r3, r2
 8000846:	4a0f      	ldr	r2, [pc, #60]	; (8000884 <SSD1306_DrawPixel+0xbc>)
 8000848:	5cd3      	ldrb	r3, [r2, r3]
 800084a:	b25a      	sxtb	r2, r3
 800084c:	88bb      	ldrh	r3, [r7, #4]
 800084e:	f003 0307 	and.w	r3, r3, #7
 8000852:	2101      	movs	r1, #1
 8000854:	fa01 f303 	lsl.w	r3, r1, r3
 8000858:	b25b      	sxtb	r3, r3
 800085a:	43db      	mvns	r3, r3
 800085c:	b25b      	sxtb	r3, r3
 800085e:	4013      	ands	r3, r2
 8000860:	b259      	sxtb	r1, r3
 8000862:	88fa      	ldrh	r2, [r7, #6]
 8000864:	4603      	mov	r3, r0
 8000866:	01db      	lsls	r3, r3, #7
 8000868:	4413      	add	r3, r2
 800086a:	b2c9      	uxtb	r1, r1
 800086c:	4a05      	ldr	r2, [pc, #20]	; (8000884 <SSD1306_DrawPixel+0xbc>)
 800086e:	54d1      	strb	r1, [r2, r3]
 8000870:	e000      	b.n	8000874 <SSD1306_DrawPixel+0xac>
		return;
 8000872:	bf00      	nop
	}
}
 8000874:	370c      	adds	r7, #12
 8000876:	46bd      	mov	sp, r7
 8000878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087c:	4770      	bx	lr
 800087e:	bf00      	nop
 8000880:	2000029c 	.word	0x2000029c
 8000884:	2000009c 	.word	0x2000009c

08000888 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8000888:	b480      	push	{r7}
 800088a:	b083      	sub	sp, #12
 800088c:	af00      	add	r7, sp, #0
 800088e:	4603      	mov	r3, r0
 8000890:	460a      	mov	r2, r1
 8000892:	80fb      	strh	r3, [r7, #6]
 8000894:	4613      	mov	r3, r2
 8000896:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8000898:	4a05      	ldr	r2, [pc, #20]	; (80008b0 <SSD1306_GotoXY+0x28>)
 800089a:	88fb      	ldrh	r3, [r7, #6]
 800089c:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 800089e:	4a04      	ldr	r2, [pc, #16]	; (80008b0 <SSD1306_GotoXY+0x28>)
 80008a0:	88bb      	ldrh	r3, [r7, #4]
 80008a2:	8053      	strh	r3, [r2, #2]
}
 80008a4:	bf00      	nop
 80008a6:	370c      	adds	r7, #12
 80008a8:	46bd      	mov	sp, r7
 80008aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ae:	4770      	bx	lr
 80008b0:	2000029c 	.word	0x2000029c

080008b4 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b086      	sub	sp, #24
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	4603      	mov	r3, r0
 80008bc:	6039      	str	r1, [r7, #0]
 80008be:	71fb      	strb	r3, [r7, #7]
 80008c0:	4613      	mov	r3, r2
 80008c2:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80008c4:	4b3a      	ldr	r3, [pc, #232]	; (80009b0 <SSD1306_Putc+0xfc>)
 80008c6:	881b      	ldrh	r3, [r3, #0]
 80008c8:	461a      	mov	r2, r3
 80008ca:	683b      	ldr	r3, [r7, #0]
 80008cc:	781b      	ldrb	r3, [r3, #0]
 80008ce:	4413      	add	r3, r2
	if (
 80008d0:	2b7f      	cmp	r3, #127	; 0x7f
 80008d2:	dc07      	bgt.n	80008e4 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80008d4:	4b36      	ldr	r3, [pc, #216]	; (80009b0 <SSD1306_Putc+0xfc>)
 80008d6:	885b      	ldrh	r3, [r3, #2]
 80008d8:	461a      	mov	r2, r3
 80008da:	683b      	ldr	r3, [r7, #0]
 80008dc:	785b      	ldrb	r3, [r3, #1]
 80008de:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80008e0:	2b1f      	cmp	r3, #31
 80008e2:	dd01      	ble.n	80008e8 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 80008e4:	2300      	movs	r3, #0
 80008e6:	e05e      	b.n	80009a6 <SSD1306_Putc+0xf2>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80008e8:	2300      	movs	r3, #0
 80008ea:	617b      	str	r3, [r7, #20]
 80008ec:	e04b      	b.n	8000986 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80008ee:	683b      	ldr	r3, [r7, #0]
 80008f0:	685a      	ldr	r2, [r3, #4]
 80008f2:	79fb      	ldrb	r3, [r7, #7]
 80008f4:	3b20      	subs	r3, #32
 80008f6:	6839      	ldr	r1, [r7, #0]
 80008f8:	7849      	ldrb	r1, [r1, #1]
 80008fa:	fb01 f303 	mul.w	r3, r1, r3
 80008fe:	4619      	mov	r1, r3
 8000900:	697b      	ldr	r3, [r7, #20]
 8000902:	440b      	add	r3, r1
 8000904:	005b      	lsls	r3, r3, #1
 8000906:	4413      	add	r3, r2
 8000908:	881b      	ldrh	r3, [r3, #0]
 800090a:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 800090c:	2300      	movs	r3, #0
 800090e:	613b      	str	r3, [r7, #16]
 8000910:	e030      	b.n	8000974 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8000912:	68fa      	ldr	r2, [r7, #12]
 8000914:	693b      	ldr	r3, [r7, #16]
 8000916:	fa02 f303 	lsl.w	r3, r2, r3
 800091a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800091e:	2b00      	cmp	r3, #0
 8000920:	d010      	beq.n	8000944 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8000922:	4b23      	ldr	r3, [pc, #140]	; (80009b0 <SSD1306_Putc+0xfc>)
 8000924:	881a      	ldrh	r2, [r3, #0]
 8000926:	693b      	ldr	r3, [r7, #16]
 8000928:	b29b      	uxth	r3, r3
 800092a:	4413      	add	r3, r2
 800092c:	b298      	uxth	r0, r3
 800092e:	4b20      	ldr	r3, [pc, #128]	; (80009b0 <SSD1306_Putc+0xfc>)
 8000930:	885a      	ldrh	r2, [r3, #2]
 8000932:	697b      	ldr	r3, [r7, #20]
 8000934:	b29b      	uxth	r3, r3
 8000936:	4413      	add	r3, r2
 8000938:	b29b      	uxth	r3, r3
 800093a:	79ba      	ldrb	r2, [r7, #6]
 800093c:	4619      	mov	r1, r3
 800093e:	f7ff ff43 	bl	80007c8 <SSD1306_DrawPixel>
 8000942:	e014      	b.n	800096e <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8000944:	4b1a      	ldr	r3, [pc, #104]	; (80009b0 <SSD1306_Putc+0xfc>)
 8000946:	881a      	ldrh	r2, [r3, #0]
 8000948:	693b      	ldr	r3, [r7, #16]
 800094a:	b29b      	uxth	r3, r3
 800094c:	4413      	add	r3, r2
 800094e:	b298      	uxth	r0, r3
 8000950:	4b17      	ldr	r3, [pc, #92]	; (80009b0 <SSD1306_Putc+0xfc>)
 8000952:	885a      	ldrh	r2, [r3, #2]
 8000954:	697b      	ldr	r3, [r7, #20]
 8000956:	b29b      	uxth	r3, r3
 8000958:	4413      	add	r3, r2
 800095a:	b299      	uxth	r1, r3
 800095c:	79bb      	ldrb	r3, [r7, #6]
 800095e:	2b00      	cmp	r3, #0
 8000960:	bf0c      	ite	eq
 8000962:	2301      	moveq	r3, #1
 8000964:	2300      	movne	r3, #0
 8000966:	b2db      	uxtb	r3, r3
 8000968:	461a      	mov	r2, r3
 800096a:	f7ff ff2d 	bl	80007c8 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 800096e:	693b      	ldr	r3, [r7, #16]
 8000970:	3301      	adds	r3, #1
 8000972:	613b      	str	r3, [r7, #16]
 8000974:	683b      	ldr	r3, [r7, #0]
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	461a      	mov	r2, r3
 800097a:	693b      	ldr	r3, [r7, #16]
 800097c:	4293      	cmp	r3, r2
 800097e:	d3c8      	bcc.n	8000912 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8000980:	697b      	ldr	r3, [r7, #20]
 8000982:	3301      	adds	r3, #1
 8000984:	617b      	str	r3, [r7, #20]
 8000986:	683b      	ldr	r3, [r7, #0]
 8000988:	785b      	ldrb	r3, [r3, #1]
 800098a:	461a      	mov	r2, r3
 800098c:	697b      	ldr	r3, [r7, #20]
 800098e:	4293      	cmp	r3, r2
 8000990:	d3ad      	bcc.n	80008ee <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8000992:	4b07      	ldr	r3, [pc, #28]	; (80009b0 <SSD1306_Putc+0xfc>)
 8000994:	881a      	ldrh	r2, [r3, #0]
 8000996:	683b      	ldr	r3, [r7, #0]
 8000998:	781b      	ldrb	r3, [r3, #0]
 800099a:	b29b      	uxth	r3, r3
 800099c:	4413      	add	r3, r2
 800099e:	b29a      	uxth	r2, r3
 80009a0:	4b03      	ldr	r3, [pc, #12]	; (80009b0 <SSD1306_Putc+0xfc>)
 80009a2:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 80009a4:	79fb      	ldrb	r3, [r7, #7]
}
 80009a6:	4618      	mov	r0, r3
 80009a8:	3718      	adds	r7, #24
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	2000029c 	.word	0x2000029c

080009b4 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b084      	sub	sp, #16
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	60f8      	str	r0, [r7, #12]
 80009bc:	60b9      	str	r1, [r7, #8]
 80009be:	4613      	mov	r3, r2
 80009c0:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 80009c2:	e012      	b.n	80009ea <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	79fa      	ldrb	r2, [r7, #7]
 80009ca:	68b9      	ldr	r1, [r7, #8]
 80009cc:	4618      	mov	r0, r3
 80009ce:	f7ff ff71 	bl	80008b4 <SSD1306_Putc>
 80009d2:	4603      	mov	r3, r0
 80009d4:	461a      	mov	r2, r3
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	781b      	ldrb	r3, [r3, #0]
 80009da:	429a      	cmp	r2, r3
 80009dc:	d002      	beq.n	80009e4 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	781b      	ldrb	r3, [r3, #0]
 80009e2:	e008      	b.n	80009f6 <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	3301      	adds	r3, #1
 80009e8:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	781b      	ldrb	r3, [r3, #0]
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d1e8      	bne.n	80009c4 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	781b      	ldrb	r3, [r3, #0]
}
 80009f6:	4618      	mov	r0, r3
 80009f8:	3710      	adds	r7, #16
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
	...

08000a00 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8000a00:	b480      	push	{r7}
 8000a02:	b083      	sub	sp, #12
 8000a04:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8000a06:	4b08      	ldr	r3, [pc, #32]	; (8000a28 <ssd1306_I2C_Init+0x28>)
 8000a08:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000a0a:	e002      	b.n	8000a12 <ssd1306_I2C_Init+0x12>
		p--;
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	3b01      	subs	r3, #1
 8000a10:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d1f9      	bne.n	8000a0c <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8000a18:	bf00      	nop
 8000a1a:	bf00      	nop
 8000a1c:	370c      	adds	r7, #12
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop
 8000a28:	0003d090 	.word	0x0003d090

08000a2c <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8000a2c:	b590      	push	{r4, r7, lr}
 8000a2e:	b0c7      	sub	sp, #284	; 0x11c
 8000a30:	af02      	add	r7, sp, #8
 8000a32:	4604      	mov	r4, r0
 8000a34:	4608      	mov	r0, r1
 8000a36:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8000a3a:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8000a3e:	600a      	str	r2, [r1, #0]
 8000a40:	4619      	mov	r1, r3
 8000a42:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000a46:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8000a4a:	4622      	mov	r2, r4
 8000a4c:	701a      	strb	r2, [r3, #0]
 8000a4e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000a52:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8000a56:	4602      	mov	r2, r0
 8000a58:	701a      	strb	r2, [r3, #0]
 8000a5a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000a5e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000a62:	460a      	mov	r2, r1
 8000a64:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8000a66:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000a6a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000a6e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000a72:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8000a76:	7812      	ldrb	r2, [r2, #0]
 8000a78:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8000a80:	e015      	b.n	8000aae <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8000a82:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000a86:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000a8a:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8000a8e:	6812      	ldr	r2, [r2, #0]
 8000a90:	441a      	add	r2, r3
 8000a92:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000a96:	3301      	adds	r3, #1
 8000a98:	7811      	ldrb	r1, [r2, #0]
 8000a9a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000a9e:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8000aa2:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8000aa4:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000aa8:	3301      	adds	r3, #1
 8000aaa:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8000aae:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000ab2:	b29b      	uxth	r3, r3
 8000ab4:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000ab8:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8000abc:	8812      	ldrh	r2, [r2, #0]
 8000abe:	429a      	cmp	r2, r3
 8000ac0:	d8df      	bhi.n	8000a82 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8000ac2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000ac6:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	b299      	uxth	r1, r3
 8000ace:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000ad2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000ad6:	881b      	ldrh	r3, [r3, #0]
 8000ad8:	3301      	adds	r3, #1
 8000ada:	b29b      	uxth	r3, r3
 8000adc:	f107 020c 	add.w	r2, r7, #12
 8000ae0:	200a      	movs	r0, #10
 8000ae2:	9000      	str	r0, [sp, #0]
 8000ae4:	4803      	ldr	r0, [pc, #12]	; (8000af4 <ssd1306_I2C_WriteMulti+0xc8>)
 8000ae6:	f001 fcd1 	bl	800248c <HAL_I2C_Master_Transmit>
}
 8000aea:	bf00      	nop
 8000aec:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd90      	pop	{r4, r7, pc}
 8000af4:	200002a4 	.word	0x200002a4

08000af8 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b086      	sub	sp, #24
 8000afc:	af02      	add	r7, sp, #8
 8000afe:	4603      	mov	r3, r0
 8000b00:	71fb      	strb	r3, [r7, #7]
 8000b02:	460b      	mov	r3, r1
 8000b04:	71bb      	strb	r3, [r7, #6]
 8000b06:	4613      	mov	r3, r2
 8000b08:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8000b0a:	79bb      	ldrb	r3, [r7, #6]
 8000b0c:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8000b0e:	797b      	ldrb	r3, [r7, #5]
 8000b10:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8000b12:	79fb      	ldrb	r3, [r7, #7]
 8000b14:	b299      	uxth	r1, r3
 8000b16:	f107 020c 	add.w	r2, r7, #12
 8000b1a:	230a      	movs	r3, #10
 8000b1c:	9300      	str	r3, [sp, #0]
 8000b1e:	2302      	movs	r3, #2
 8000b20:	4803      	ldr	r0, [pc, #12]	; (8000b30 <ssd1306_I2C_Write+0x38>)
 8000b22:	f001 fcb3 	bl	800248c <HAL_I2C_Master_Transmit>
}
 8000b26:	bf00      	nop
 8000b28:	3710      	adds	r7, #16
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	200002a4 	.word	0x200002a4

08000b34 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	607b      	str	r3, [r7, #4]
 8000b3e:	4b0c      	ldr	r3, [pc, #48]	; (8000b70 <MX_DMA_Init+0x3c>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b42:	4a0b      	ldr	r2, [pc, #44]	; (8000b70 <MX_DMA_Init+0x3c>)
 8000b44:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b48:	6313      	str	r3, [r2, #48]	; 0x30
 8000b4a:	4b09      	ldr	r3, [pc, #36]	; (8000b70 <MX_DMA_Init+0x3c>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b52:	607b      	str	r3, [r7, #4]
 8000b54:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000b56:	2200      	movs	r2, #0
 8000b58:	2100      	movs	r1, #0
 8000b5a:	200b      	movs	r0, #11
 8000b5c:	f000 fde3 	bl	8001726 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000b60:	200b      	movs	r0, #11
 8000b62:	f000 fdfc 	bl	800175e <HAL_NVIC_EnableIRQ>

}
 8000b66:	bf00      	nop
 8000b68:	3708      	adds	r7, #8
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	40023800 	.word	0x40023800

08000b74 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b088      	sub	sp, #32
 8000b78:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b7a:	f107 030c 	add.w	r3, r7, #12
 8000b7e:	2200      	movs	r2, #0
 8000b80:	601a      	str	r2, [r3, #0]
 8000b82:	605a      	str	r2, [r3, #4]
 8000b84:	609a      	str	r2, [r3, #8]
 8000b86:	60da      	str	r2, [r3, #12]
 8000b88:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	60bb      	str	r3, [r7, #8]
 8000b8e:	4b18      	ldr	r3, [pc, #96]	; (8000bf0 <MX_GPIO_Init+0x7c>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b92:	4a17      	ldr	r2, [pc, #92]	; (8000bf0 <MX_GPIO_Init+0x7c>)
 8000b94:	f043 0301 	orr.w	r3, r3, #1
 8000b98:	6313      	str	r3, [r2, #48]	; 0x30
 8000b9a:	4b15      	ldr	r3, [pc, #84]	; (8000bf0 <MX_GPIO_Init+0x7c>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	f003 0301 	and.w	r3, r3, #1
 8000ba2:	60bb      	str	r3, [r7, #8]
 8000ba4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	607b      	str	r3, [r7, #4]
 8000baa:	4b11      	ldr	r3, [pc, #68]	; (8000bf0 <MX_GPIO_Init+0x7c>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bae:	4a10      	ldr	r2, [pc, #64]	; (8000bf0 <MX_GPIO_Init+0x7c>)
 8000bb0:	f043 0302 	orr.w	r3, r3, #2
 8000bb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb6:	4b0e      	ldr	r3, [pc, #56]	; (8000bf0 <MX_GPIO_Init+0x7c>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bba:	f003 0302 	and.w	r3, r3, #2
 8000bbe:	607b      	str	r3, [r7, #4]
 8000bc0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	2120      	movs	r1, #32
 8000bc6:	480b      	ldr	r0, [pc, #44]	; (8000bf4 <MX_GPIO_Init+0x80>)
 8000bc8:	f001 fae8 	bl	800219c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000bcc:	2320      	movs	r3, #32
 8000bce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000bdc:	f107 030c 	add.w	r3, r7, #12
 8000be0:	4619      	mov	r1, r3
 8000be2:	4804      	ldr	r0, [pc, #16]	; (8000bf4 <MX_GPIO_Init+0x80>)
 8000be4:	f001 f946 	bl	8001e74 <HAL_GPIO_Init>

}
 8000be8:	bf00      	nop
 8000bea:	3720      	adds	r7, #32
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	40023800 	.word	0x40023800
 8000bf4:	40020000 	.word	0x40020000

08000bf8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000bfc:	4b12      	ldr	r3, [pc, #72]	; (8000c48 <MX_I2C1_Init+0x50>)
 8000bfe:	4a13      	ldr	r2, [pc, #76]	; (8000c4c <MX_I2C1_Init+0x54>)
 8000c00:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000c02:	4b11      	ldr	r3, [pc, #68]	; (8000c48 <MX_I2C1_Init+0x50>)
 8000c04:	4a12      	ldr	r2, [pc, #72]	; (8000c50 <MX_I2C1_Init+0x58>)
 8000c06:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c08:	4b0f      	ldr	r3, [pc, #60]	; (8000c48 <MX_I2C1_Init+0x50>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000c0e:	4b0e      	ldr	r3, [pc, #56]	; (8000c48 <MX_I2C1_Init+0x50>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c14:	4b0c      	ldr	r3, [pc, #48]	; (8000c48 <MX_I2C1_Init+0x50>)
 8000c16:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c1a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c1c:	4b0a      	ldr	r3, [pc, #40]	; (8000c48 <MX_I2C1_Init+0x50>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000c22:	4b09      	ldr	r3, [pc, #36]	; (8000c48 <MX_I2C1_Init+0x50>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c28:	4b07      	ldr	r3, [pc, #28]	; (8000c48 <MX_I2C1_Init+0x50>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c2e:	4b06      	ldr	r3, [pc, #24]	; (8000c48 <MX_I2C1_Init+0x50>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c34:	4804      	ldr	r0, [pc, #16]	; (8000c48 <MX_I2C1_Init+0x50>)
 8000c36:	f001 fae5 	bl	8002204 <HAL_I2C_Init>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000c40:	f000 f934 	bl	8000eac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c44:	bf00      	nop
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	200002a4 	.word	0x200002a4
 8000c4c:	40005400 	.word	0x40005400
 8000c50:	00061a80 	.word	0x00061a80

08000c54 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b08a      	sub	sp, #40	; 0x28
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c5c:	f107 0314 	add.w	r3, r7, #20
 8000c60:	2200      	movs	r2, #0
 8000c62:	601a      	str	r2, [r3, #0]
 8000c64:	605a      	str	r2, [r3, #4]
 8000c66:	609a      	str	r2, [r3, #8]
 8000c68:	60da      	str	r2, [r3, #12]
 8000c6a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a19      	ldr	r2, [pc, #100]	; (8000cd8 <HAL_I2C_MspInit+0x84>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d12c      	bne.n	8000cd0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c76:	2300      	movs	r3, #0
 8000c78:	613b      	str	r3, [r7, #16]
 8000c7a:	4b18      	ldr	r3, [pc, #96]	; (8000cdc <HAL_I2C_MspInit+0x88>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7e:	4a17      	ldr	r2, [pc, #92]	; (8000cdc <HAL_I2C_MspInit+0x88>)
 8000c80:	f043 0302 	orr.w	r3, r3, #2
 8000c84:	6313      	str	r3, [r2, #48]	; 0x30
 8000c86:	4b15      	ldr	r3, [pc, #84]	; (8000cdc <HAL_I2C_MspInit+0x88>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8a:	f003 0302 	and.w	r3, r3, #2
 8000c8e:	613b      	str	r3, [r7, #16]
 8000c90:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000c92:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c98:	2312      	movs	r3, #18
 8000c9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ca0:	2303      	movs	r3, #3
 8000ca2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ca4:	2304      	movs	r3, #4
 8000ca6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ca8:	f107 0314 	add.w	r3, r7, #20
 8000cac:	4619      	mov	r1, r3
 8000cae:	480c      	ldr	r0, [pc, #48]	; (8000ce0 <HAL_I2C_MspInit+0x8c>)
 8000cb0:	f001 f8e0 	bl	8001e74 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	60fb      	str	r3, [r7, #12]
 8000cb8:	4b08      	ldr	r3, [pc, #32]	; (8000cdc <HAL_I2C_MspInit+0x88>)
 8000cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cbc:	4a07      	ldr	r2, [pc, #28]	; (8000cdc <HAL_I2C_MspInit+0x88>)
 8000cbe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000cc2:	6413      	str	r3, [r2, #64]	; 0x40
 8000cc4:	4b05      	ldr	r3, [pc, #20]	; (8000cdc <HAL_I2C_MspInit+0x88>)
 8000cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ccc:	60fb      	str	r3, [r7, #12]
 8000cce:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000cd0:	bf00      	nop
 8000cd2:	3728      	adds	r7, #40	; 0x28
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	40005400 	.word	0x40005400
 8000cdc:	40023800 	.word	0x40023800
 8000ce0:	40020400 	.word	0x40020400

08000ce4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ce4:	b5b0      	push	{r4, r5, r7, lr}
 8000ce6:	b094      	sub	sp, #80	; 0x50
 8000ce8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cea:	f000 fbab 	bl	8001444 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cee:	f000 f87d 	bl	8000dec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cf2:	f7ff ff3f 	bl	8000b74 <MX_GPIO_Init>
  MX_DMA_Init();
 8000cf6:	f7ff ff1d 	bl	8000b34 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000cfa:	f000 fb07 	bl	800130c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000cfe:	f7ff ff7b 	bl	8000bf8 <MX_I2C1_Init>
  MX_TIM3_Init();
 8000d02:	f000 f97d 	bl	8001000 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000d06:	f000 f9cf 	bl	80010a8 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

	SSD1306_Init();
 8000d0a:	f7ff fc53 	bl	80005b4 <SSD1306_Init>

	SSD1306_GotoXY (0, 0);
 8000d0e:	2100      	movs	r1, #0
 8000d10:	2000      	movs	r0, #0
 8000d12:	f7ff fdb9 	bl	8000888 <SSD1306_GotoXY>
	SSD1306_Puts("HA3PB", &Font_7x10, 1);
 8000d16:	2201      	movs	r2, #1
 8000d18:	492a      	ldr	r1, [pc, #168]	; (8000dc4 <main+0xe0>)
 8000d1a:	482b      	ldr	r0, [pc, #172]	; (8000dc8 <main+0xe4>)
 8000d1c:	f7ff fe4a 	bl	80009b4 <SSD1306_Puts>

	SSD1306_GotoXY(0, 10);
 8000d20:	210a      	movs	r1, #10
 8000d22:	2000      	movs	r0, #0
 8000d24:	f7ff fdb0 	bl	8000888 <SSD1306_GotoXY>
	SSD1306_Puts("APRS GADGET", &Font_11x18, 1);
 8000d28:	2201      	movs	r2, #1
 8000d2a:	4928      	ldr	r1, [pc, #160]	; (8000dcc <main+0xe8>)
 8000d2c:	4828      	ldr	r0, [pc, #160]	; (8000dd0 <main+0xec>)
 8000d2e:	f7ff fe41 	bl	80009b4 <SSD1306_Puts>

	char counter[12];

	char menu[4][7] = {"CALL","PERIOD","ICON","QUIT"};
 8000d32:	4b28      	ldr	r3, [pc, #160]	; (8000dd4 <main+0xf0>)
 8000d34:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8000d38:	461d      	mov	r5, r3
 8000d3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d3e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d42:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	uint16_t sine[18] = {0x00C9,0x010E,0x014B,0x0178,0x0190,0x0190,0x0178,0x014B,0x010E,0x00C9,0x0084,0x0047,0x001A,0x0002,0x0002,0x001A,0x0047,0x0084};
 8000d46:	4b24      	ldr	r3, [pc, #144]	; (8000dd8 <main+0xf4>)
 8000d48:	1d3c      	adds	r4, r7, #4
 8000d4a:	461d      	mov	r5, r3
 8000d4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d54:	682b      	ldr	r3, [r5, #0]
 8000d56:	6023      	str	r3, [r4, #0]


	//FSK_Init();
	HAL_TIM_PWM_Start_DMA(&htim4, TIM_CHANNEL_1, sine, 18);
 8000d58:	1d3a      	adds	r2, r7, #4
 8000d5a:	2312      	movs	r3, #18
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	481f      	ldr	r0, [pc, #124]	; (8000ddc <main+0xf8>)
 8000d60:	f002 fe02 	bl	8003968 <HAL_TIM_PWM_Start_DMA>

	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8000d64:	213c      	movs	r1, #60	; 0x3c
 8000d66:	481e      	ldr	r0, [pc, #120]	; (8000de0 <main+0xfc>)
 8000d68:	f003 f86c 	bl	8003e44 <HAL_TIM_Encoder_Start>
	// __HAL_TIM_GET_COUNTER(&htim3);

	SSD1306_UpdateScreen();
 8000d6c:	f7ff fce6 	bl	800073c <SSD1306_UpdateScreen>
	HAL_Delay (1000);
 8000d70:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d74:	f000 fbd8 	bl	8001528 <HAL_Delay>
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		sprintf(counter, "MENU:%6s", menu[(__HAL_TIM_GET_COUNTER(&htim3))>>2]);
 8000d78:	4b19      	ldr	r3, [pc, #100]	; (8000de0 <main+0xfc>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d7e:	089a      	lsrs	r2, r3, #2
 8000d80:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000d84:	4613      	mov	r3, r2
 8000d86:	00db      	lsls	r3, r3, #3
 8000d88:	1a9b      	subs	r3, r3, r2
 8000d8a:	18ca      	adds	r2, r1, r3
 8000d8c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000d90:	4914      	ldr	r1, [pc, #80]	; (8000de4 <main+0x100>)
 8000d92:	4618      	mov	r0, r3
 8000d94:	f004 f87c 	bl	8004e90 <siprintf>
		SSD1306_GotoXY(0, 10);
 8000d98:	210a      	movs	r1, #10
 8000d9a:	2000      	movs	r0, #0
 8000d9c:	f7ff fd74 	bl	8000888 <SSD1306_GotoXY>
		SSD1306_Puts(counter, &Font_11x18, 1);
 8000da0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000da4:	2201      	movs	r2, #1
 8000da6:	4909      	ldr	r1, [pc, #36]	; (8000dcc <main+0xe8>)
 8000da8:	4618      	mov	r0, r3
 8000daa:	f7ff fe03 	bl	80009b4 <SSD1306_Puts>
		SSD1306_UpdateScreen();
 8000dae:	f7ff fcc5 	bl	800073c <SSD1306_UpdateScreen>

		HAL_Delay(20);
 8000db2:	2014      	movs	r0, #20
 8000db4:	f000 fbb8 	bl	8001528 <HAL_Delay>

		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000db8:	2120      	movs	r1, #32
 8000dba:	480b      	ldr	r0, [pc, #44]	; (8000de8 <main+0x104>)
 8000dbc:	f001 fa07 	bl	80021ce <HAL_GPIO_TogglePin>
		sprintf(counter, "MENU:%6s", menu[(__HAL_TIM_GET_COUNTER(&htim3))>>2]);
 8000dc0:	e7da      	b.n	8000d78 <main+0x94>
 8000dc2:	bf00      	nop
 8000dc4:	20000000 	.word	0x20000000
 8000dc8:	08005784 	.word	0x08005784
 8000dcc:	20000008 	.word	0x20000008
 8000dd0:	0800578c 	.word	0x0800578c
 8000dd4:	080057a4 	.word	0x080057a4
 8000dd8:	080057c0 	.word	0x080057c0
 8000ddc:	20000344 	.word	0x20000344
 8000de0:	200002fc 	.word	0x200002fc
 8000de4:	08005798 	.word	0x08005798
 8000de8:	40020000 	.word	0x40020000

08000dec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b094      	sub	sp, #80	; 0x50
 8000df0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000df2:	f107 031c 	add.w	r3, r7, #28
 8000df6:	2234      	movs	r2, #52	; 0x34
 8000df8:	2100      	movs	r1, #0
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f004 f840 	bl	8004e80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e00:	f107 0308 	add.w	r3, r7, #8
 8000e04:	2200      	movs	r2, #0
 8000e06:	601a      	str	r2, [r3, #0]
 8000e08:	605a      	str	r2, [r3, #4]
 8000e0a:	609a      	str	r2, [r3, #8]
 8000e0c:	60da      	str	r2, [r3, #12]
 8000e0e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e10:	2300      	movs	r3, #0
 8000e12:	607b      	str	r3, [r7, #4]
 8000e14:	4b23      	ldr	r3, [pc, #140]	; (8000ea4 <SystemClock_Config+0xb8>)
 8000e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e18:	4a22      	ldr	r2, [pc, #136]	; (8000ea4 <SystemClock_Config+0xb8>)
 8000e1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e1e:	6413      	str	r3, [r2, #64]	; 0x40
 8000e20:	4b20      	ldr	r3, [pc, #128]	; (8000ea4 <SystemClock_Config+0xb8>)
 8000e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e28:	607b      	str	r3, [r7, #4]
 8000e2a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	603b      	str	r3, [r7, #0]
 8000e30:	4b1d      	ldr	r3, [pc, #116]	; (8000ea8 <SystemClock_Config+0xbc>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000e38:	4a1b      	ldr	r2, [pc, #108]	; (8000ea8 <SystemClock_Config+0xbc>)
 8000e3a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e3e:	6013      	str	r3, [r2, #0]
 8000e40:	4b19      	ldr	r3, [pc, #100]	; (8000ea8 <SystemClock_Config+0xbc>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e48:	603b      	str	r3, [r7, #0]
 8000e4a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e4c:	2302      	movs	r3, #2
 8000e4e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e50:	2301      	movs	r3, #1
 8000e52:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e54:	2310      	movs	r3, #16
 8000e56:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e5c:	f107 031c 	add.w	r3, r7, #28
 8000e60:	4618      	mov	r0, r3
 8000e62:	f002 fa93 	bl	800338c <HAL_RCC_OscConfig>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d001      	beq.n	8000e70 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000e6c:	f000 f81e 	bl	8000eac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e70:	230f      	movs	r3, #15
 8000e72:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000e74:	2300      	movs	r3, #0
 8000e76:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e80:	2300      	movs	r3, #0
 8000e82:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e84:	f107 0308 	add.w	r3, r7, #8
 8000e88:	2100      	movs	r1, #0
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f001 ff34 	bl	8002cf8 <HAL_RCC_ClockConfig>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000e96:	f000 f809 	bl	8000eac <Error_Handler>
  }
}
 8000e9a:	bf00      	nop
 8000e9c:	3750      	adds	r7, #80	; 0x50
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	40023800 	.word	0x40023800
 8000ea8:	40007000 	.word	0x40007000

08000eac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000eb0:	b672      	cpsid	i
}
 8000eb2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000eb4:	e7fe      	b.n	8000eb4 <Error_Handler+0x8>
	...

08000eb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	607b      	str	r3, [r7, #4]
 8000ec2:	4b10      	ldr	r3, [pc, #64]	; (8000f04 <HAL_MspInit+0x4c>)
 8000ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ec6:	4a0f      	ldr	r2, [pc, #60]	; (8000f04 <HAL_MspInit+0x4c>)
 8000ec8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ecc:	6453      	str	r3, [r2, #68]	; 0x44
 8000ece:	4b0d      	ldr	r3, [pc, #52]	; (8000f04 <HAL_MspInit+0x4c>)
 8000ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ed2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ed6:	607b      	str	r3, [r7, #4]
 8000ed8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eda:	2300      	movs	r3, #0
 8000edc:	603b      	str	r3, [r7, #0]
 8000ede:	4b09      	ldr	r3, [pc, #36]	; (8000f04 <HAL_MspInit+0x4c>)
 8000ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee2:	4a08      	ldr	r2, [pc, #32]	; (8000f04 <HAL_MspInit+0x4c>)
 8000ee4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ee8:	6413      	str	r3, [r2, #64]	; 0x40
 8000eea:	4b06      	ldr	r3, [pc, #24]	; (8000f04 <HAL_MspInit+0x4c>)
 8000eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ef2:	603b      	str	r3, [r7, #0]
 8000ef4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000ef6:	2007      	movs	r0, #7
 8000ef8:	f000 fc0a 	bl	8001710 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000efc:	bf00      	nop
 8000efe:	3708      	adds	r7, #8
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	40023800 	.word	0x40023800

08000f08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f0c:	e7fe      	b.n	8000f0c <NMI_Handler+0x4>

08000f0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f0e:	b480      	push	{r7}
 8000f10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f12:	e7fe      	b.n	8000f12 <HardFault_Handler+0x4>

08000f14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f18:	e7fe      	b.n	8000f18 <MemManage_Handler+0x4>

08000f1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f1a:	b480      	push	{r7}
 8000f1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f1e:	e7fe      	b.n	8000f1e <BusFault_Handler+0x4>

08000f20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f24:	e7fe      	b.n	8000f24 <UsageFault_Handler+0x4>

08000f26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f26:	b480      	push	{r7}
 8000f28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f2a:	bf00      	nop
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr

08000f34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f38:	bf00      	nop
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr

08000f42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f42:	b480      	push	{r7}
 8000f44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f46:	bf00      	nop
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr

08000f50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f54:	f000 fac8 	bl	80014e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f58:	bf00      	nop
 8000f5a:	bd80      	pop	{r7, pc}

08000f5c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch1);
 8000f60:	4802      	ldr	r0, [pc, #8]	; (8000f6c <DMA1_Stream0_IRQHandler+0x10>)
 8000f62:	f000 fd1d 	bl	80019a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000f66:	bf00      	nop
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	2000038c 	.word	0x2000038c

08000f70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b086      	sub	sp, #24
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f78:	4a14      	ldr	r2, [pc, #80]	; (8000fcc <_sbrk+0x5c>)
 8000f7a:	4b15      	ldr	r3, [pc, #84]	; (8000fd0 <_sbrk+0x60>)
 8000f7c:	1ad3      	subs	r3, r2, r3
 8000f7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f84:	4b13      	ldr	r3, [pc, #76]	; (8000fd4 <_sbrk+0x64>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d102      	bne.n	8000f92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f8c:	4b11      	ldr	r3, [pc, #68]	; (8000fd4 <_sbrk+0x64>)
 8000f8e:	4a12      	ldr	r2, [pc, #72]	; (8000fd8 <_sbrk+0x68>)
 8000f90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f92:	4b10      	ldr	r3, [pc, #64]	; (8000fd4 <_sbrk+0x64>)
 8000f94:	681a      	ldr	r2, [r3, #0]
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	4413      	add	r3, r2
 8000f9a:	693a      	ldr	r2, [r7, #16]
 8000f9c:	429a      	cmp	r2, r3
 8000f9e:	d207      	bcs.n	8000fb0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fa0:	f003 ff44 	bl	8004e2c <__errno>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	220c      	movs	r2, #12
 8000fa8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000faa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000fae:	e009      	b.n	8000fc4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fb0:	4b08      	ldr	r3, [pc, #32]	; (8000fd4 <_sbrk+0x64>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fb6:	4b07      	ldr	r3, [pc, #28]	; (8000fd4 <_sbrk+0x64>)
 8000fb8:	681a      	ldr	r2, [r3, #0]
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	4413      	add	r3, r2
 8000fbe:	4a05      	ldr	r2, [pc, #20]	; (8000fd4 <_sbrk+0x64>)
 8000fc0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fc2:	68fb      	ldr	r3, [r7, #12]
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	3718      	adds	r7, #24
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	20020000 	.word	0x20020000
 8000fd0:	00000400 	.word	0x00000400
 8000fd4:	200002f8 	.word	0x200002f8
 8000fd8:	20000448 	.word	0x20000448

08000fdc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fe0:	4b06      	ldr	r3, [pc, #24]	; (8000ffc <SystemInit+0x20>)
 8000fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fe6:	4a05      	ldr	r2, [pc, #20]	; (8000ffc <SystemInit+0x20>)
 8000fe8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ff0:	bf00      	nop
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	e000ed00 	.word	0xe000ed00

08001000 <MX_TIM3_Init>:
TIM_HandleTypeDef htim4;
DMA_HandleTypeDef hdma_tim4_ch1;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b08c      	sub	sp, #48	; 0x30
 8001004:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001006:	f107 030c 	add.w	r3, r7, #12
 800100a:	2224      	movs	r2, #36	; 0x24
 800100c:	2100      	movs	r1, #0
 800100e:	4618      	mov	r0, r3
 8001010:	f003 ff36 	bl	8004e80 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001014:	1d3b      	adds	r3, r7, #4
 8001016:	2200      	movs	r2, #0
 8001018:	601a      	str	r2, [r3, #0]
 800101a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800101c:	4b20      	ldr	r3, [pc, #128]	; (80010a0 <MX_TIM3_Init+0xa0>)
 800101e:	4a21      	ldr	r2, [pc, #132]	; (80010a4 <MX_TIM3_Init+0xa4>)
 8001020:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001022:	4b1f      	ldr	r3, [pc, #124]	; (80010a0 <MX_TIM3_Init+0xa0>)
 8001024:	2200      	movs	r2, #0
 8001026:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001028:	4b1d      	ldr	r3, [pc, #116]	; (80010a0 <MX_TIM3_Init+0xa0>)
 800102a:	2200      	movs	r2, #0
 800102c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 15;
 800102e:	4b1c      	ldr	r3, [pc, #112]	; (80010a0 <MX_TIM3_Init+0xa0>)
 8001030:	220f      	movs	r2, #15
 8001032:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001034:	4b1a      	ldr	r3, [pc, #104]	; (80010a0 <MX_TIM3_Init+0xa0>)
 8001036:	2200      	movs	r2, #0
 8001038:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800103a:	4b19      	ldr	r3, [pc, #100]	; (80010a0 <MX_TIM3_Init+0xa0>)
 800103c:	2280      	movs	r2, #128	; 0x80
 800103e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001040:	2303      	movs	r3, #3
 8001042:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001044:	2302      	movs	r3, #2
 8001046:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001048:	2301      	movs	r3, #1
 800104a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800104c:	2300      	movs	r3, #0
 800104e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001050:	230a      	movs	r3, #10
 8001052:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001054:	2302      	movs	r3, #2
 8001056:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001058:	2301      	movs	r3, #1
 800105a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800105c:	2300      	movs	r3, #0
 800105e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8001060:	230a      	movs	r3, #10
 8001062:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001064:	f107 030c 	add.w	r3, r7, #12
 8001068:	4619      	mov	r1, r3
 800106a:	480d      	ldr	r0, [pc, #52]	; (80010a0 <MX_TIM3_Init+0xa0>)
 800106c:	f002 fe44 	bl	8003cf8 <HAL_TIM_Encoder_Init>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8001076:	f7ff ff19 	bl	8000eac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800107a:	2300      	movs	r3, #0
 800107c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800107e:	2300      	movs	r3, #0
 8001080:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001082:	1d3b      	adds	r3, r7, #4
 8001084:	4619      	mov	r1, r3
 8001086:	4806      	ldr	r0, [pc, #24]	; (80010a0 <MX_TIM3_Init+0xa0>)
 8001088:	f003 fb92 	bl	80047b0 <HAL_TIMEx_MasterConfigSynchronization>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8001092:	f7ff ff0b 	bl	8000eac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001096:	bf00      	nop
 8001098:	3730      	adds	r7, #48	; 0x30
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	200002fc 	.word	0x200002fc
 80010a4:	40000400 	.word	0x40000400

080010a8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b08a      	sub	sp, #40	; 0x28
 80010ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010ae:	f107 0320 	add.w	r3, r7, #32
 80010b2:	2200      	movs	r2, #0
 80010b4:	601a      	str	r2, [r3, #0]
 80010b6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010b8:	1d3b      	adds	r3, r7, #4
 80010ba:	2200      	movs	r2, #0
 80010bc:	601a      	str	r2, [r3, #0]
 80010be:	605a      	str	r2, [r3, #4]
 80010c0:	609a      	str	r2, [r3, #8]
 80010c2:	60da      	str	r2, [r3, #12]
 80010c4:	611a      	str	r2, [r3, #16]
 80010c6:	615a      	str	r2, [r3, #20]
 80010c8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80010ca:	4b22      	ldr	r3, [pc, #136]	; (8001154 <MX_TIM4_Init+0xac>)
 80010cc:	4a22      	ldr	r2, [pc, #136]	; (8001158 <MX_TIM4_Init+0xb0>)
 80010ce:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80010d0:	4b20      	ldr	r3, [pc, #128]	; (8001154 <MX_TIM4_Init+0xac>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010d6:	4b1f      	ldr	r3, [pc, #124]	; (8001154 <MX_TIM4_Init+0xac>)
 80010d8:	2200      	movs	r2, #0
 80010da:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 403;
 80010dc:	4b1d      	ldr	r3, [pc, #116]	; (8001154 <MX_TIM4_Init+0xac>)
 80010de:	f240 1293 	movw	r2, #403	; 0x193
 80010e2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010e4:	4b1b      	ldr	r3, [pc, #108]	; (8001154 <MX_TIM4_Init+0xac>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80010ea:	4b1a      	ldr	r3, [pc, #104]	; (8001154 <MX_TIM4_Init+0xac>)
 80010ec:	2280      	movs	r2, #128	; 0x80
 80010ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80010f0:	4818      	ldr	r0, [pc, #96]	; (8001154 <MX_TIM4_Init+0xac>)
 80010f2:	f002 fbe9 	bl	80038c8 <HAL_TIM_PWM_Init>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80010fc:	f7ff fed6 	bl	8000eac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001100:	2300      	movs	r3, #0
 8001102:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001104:	2300      	movs	r3, #0
 8001106:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001108:	f107 0320 	add.w	r3, r7, #32
 800110c:	4619      	mov	r1, r3
 800110e:	4811      	ldr	r0, [pc, #68]	; (8001154 <MX_TIM4_Init+0xac>)
 8001110:	f003 fb4e 	bl	80047b0 <HAL_TIMEx_MasterConfigSynchronization>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 800111a:	f7ff fec7 	bl	8000eac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800111e:	2360      	movs	r3, #96	; 0x60
 8001120:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1;
 8001122:	2301      	movs	r3, #1
 8001124:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001126:	2300      	movs	r3, #0
 8001128:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800112a:	2300      	movs	r3, #0
 800112c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800112e:	1d3b      	adds	r3, r7, #4
 8001130:	2200      	movs	r2, #0
 8001132:	4619      	mov	r1, r3
 8001134:	4807      	ldr	r0, [pc, #28]	; (8001154 <MX_TIM4_Init+0xac>)
 8001136:	f002 ff13 	bl	8003f60 <HAL_TIM_PWM_ConfigChannel>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8001140:	f7ff feb4 	bl	8000eac <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001144:	4803      	ldr	r0, [pc, #12]	; (8001154 <MX_TIM4_Init+0xac>)
 8001146:	f000 f8a7 	bl	8001298 <HAL_TIM_MspPostInit>

}
 800114a:	bf00      	nop
 800114c:	3728      	adds	r7, #40	; 0x28
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	20000344 	.word	0x20000344
 8001158:	40000800 	.word	0x40000800

0800115c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b08a      	sub	sp, #40	; 0x28
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001164:	f107 0314 	add.w	r3, r7, #20
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	605a      	str	r2, [r3, #4]
 800116e:	609a      	str	r2, [r3, #8]
 8001170:	60da      	str	r2, [r3, #12]
 8001172:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a19      	ldr	r2, [pc, #100]	; (80011e0 <HAL_TIM_Encoder_MspInit+0x84>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d12b      	bne.n	80011d6 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800117e:	2300      	movs	r3, #0
 8001180:	613b      	str	r3, [r7, #16]
 8001182:	4b18      	ldr	r3, [pc, #96]	; (80011e4 <HAL_TIM_Encoder_MspInit+0x88>)
 8001184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001186:	4a17      	ldr	r2, [pc, #92]	; (80011e4 <HAL_TIM_Encoder_MspInit+0x88>)
 8001188:	f043 0302 	orr.w	r3, r3, #2
 800118c:	6413      	str	r3, [r2, #64]	; 0x40
 800118e:	4b15      	ldr	r3, [pc, #84]	; (80011e4 <HAL_TIM_Encoder_MspInit+0x88>)
 8001190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001192:	f003 0302 	and.w	r3, r3, #2
 8001196:	613b      	str	r3, [r7, #16]
 8001198:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800119a:	2300      	movs	r3, #0
 800119c:	60fb      	str	r3, [r7, #12]
 800119e:	4b11      	ldr	r3, [pc, #68]	; (80011e4 <HAL_TIM_Encoder_MspInit+0x88>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a2:	4a10      	ldr	r2, [pc, #64]	; (80011e4 <HAL_TIM_Encoder_MspInit+0x88>)
 80011a4:	f043 0301 	orr.w	r3, r3, #1
 80011a8:	6313      	str	r3, [r2, #48]	; 0x30
 80011aa:	4b0e      	ldr	r3, [pc, #56]	; (80011e4 <HAL_TIM_Encoder_MspInit+0x88>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ae:	f003 0301 	and.w	r3, r3, #1
 80011b2:	60fb      	str	r3, [r7, #12]
 80011b4:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80011b6:	23c0      	movs	r3, #192	; 0xc0
 80011b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ba:	2302      	movs	r3, #2
 80011bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011be:	2300      	movs	r3, #0
 80011c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c2:	2300      	movs	r3, #0
 80011c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80011c6:	2302      	movs	r3, #2
 80011c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ca:	f107 0314 	add.w	r3, r7, #20
 80011ce:	4619      	mov	r1, r3
 80011d0:	4805      	ldr	r0, [pc, #20]	; (80011e8 <HAL_TIM_Encoder_MspInit+0x8c>)
 80011d2:	f000 fe4f 	bl	8001e74 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80011d6:	bf00      	nop
 80011d8:	3728      	adds	r7, #40	; 0x28
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	40000400 	.word	0x40000400
 80011e4:	40023800 	.word	0x40023800
 80011e8:	40020000 	.word	0x40020000

080011ec <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b084      	sub	sp, #16
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a23      	ldr	r2, [pc, #140]	; (8001288 <HAL_TIM_PWM_MspInit+0x9c>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d13f      	bne.n	800127e <HAL_TIM_PWM_MspInit+0x92>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80011fe:	2300      	movs	r3, #0
 8001200:	60fb      	str	r3, [r7, #12]
 8001202:	4b22      	ldr	r3, [pc, #136]	; (800128c <HAL_TIM_PWM_MspInit+0xa0>)
 8001204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001206:	4a21      	ldr	r2, [pc, #132]	; (800128c <HAL_TIM_PWM_MspInit+0xa0>)
 8001208:	f043 0304 	orr.w	r3, r3, #4
 800120c:	6413      	str	r3, [r2, #64]	; 0x40
 800120e:	4b1f      	ldr	r3, [pc, #124]	; (800128c <HAL_TIM_PWM_MspInit+0xa0>)
 8001210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001212:	f003 0304 	and.w	r3, r3, #4
 8001216:	60fb      	str	r3, [r7, #12]
 8001218:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 DMA Init */
    /* TIM4_CH1 Init */
    hdma_tim4_ch1.Instance = DMA1_Stream0;
 800121a:	4b1d      	ldr	r3, [pc, #116]	; (8001290 <HAL_TIM_PWM_MspInit+0xa4>)
 800121c:	4a1d      	ldr	r2, [pc, #116]	; (8001294 <HAL_TIM_PWM_MspInit+0xa8>)
 800121e:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch1.Init.Channel = DMA_CHANNEL_2;
 8001220:	4b1b      	ldr	r3, [pc, #108]	; (8001290 <HAL_TIM_PWM_MspInit+0xa4>)
 8001222:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001226:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001228:	4b19      	ldr	r3, [pc, #100]	; (8001290 <HAL_TIM_PWM_MspInit+0xa4>)
 800122a:	2240      	movs	r2, #64	; 0x40
 800122c:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800122e:	4b18      	ldr	r3, [pc, #96]	; (8001290 <HAL_TIM_PWM_MspInit+0xa4>)
 8001230:	2200      	movs	r2, #0
 8001232:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001234:	4b16      	ldr	r3, [pc, #88]	; (8001290 <HAL_TIM_PWM_MspInit+0xa4>)
 8001236:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800123a:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800123c:	4b14      	ldr	r3, [pc, #80]	; (8001290 <HAL_TIM_PWM_MspInit+0xa4>)
 800123e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001242:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001244:	4b12      	ldr	r3, [pc, #72]	; (8001290 <HAL_TIM_PWM_MspInit+0xa4>)
 8001246:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800124a:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch1.Init.Mode = DMA_CIRCULAR;
 800124c:	4b10      	ldr	r3, [pc, #64]	; (8001290 <HAL_TIM_PWM_MspInit+0xa4>)
 800124e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001252:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8001254:	4b0e      	ldr	r3, [pc, #56]	; (8001290 <HAL_TIM_PWM_MspInit+0xa4>)
 8001256:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800125a:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800125c:	4b0c      	ldr	r3, [pc, #48]	; (8001290 <HAL_TIM_PWM_MspInit+0xa4>)
 800125e:	2200      	movs	r2, #0
 8001260:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch1) != HAL_OK)
 8001262:	480b      	ldr	r0, [pc, #44]	; (8001290 <HAL_TIM_PWM_MspInit+0xa4>)
 8001264:	f000 fa96 	bl	8001794 <HAL_DMA_Init>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <HAL_TIM_PWM_MspInit+0x86>
    {
      Error_Handler();
 800126e:	f7ff fe1d 	bl	8000eac <Error_Handler>
    }

    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC1],hdma_tim4_ch1);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	4a06      	ldr	r2, [pc, #24]	; (8001290 <HAL_TIM_PWM_MspInit+0xa4>)
 8001276:	625a      	str	r2, [r3, #36]	; 0x24
 8001278:	4a05      	ldr	r2, [pc, #20]	; (8001290 <HAL_TIM_PWM_MspInit+0xa4>)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800127e:	bf00      	nop
 8001280:	3710      	adds	r7, #16
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	40000800 	.word	0x40000800
 800128c:	40023800 	.word	0x40023800
 8001290:	2000038c 	.word	0x2000038c
 8001294:	40026010 	.word	0x40026010

08001298 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b088      	sub	sp, #32
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a0:	f107 030c 	add.w	r3, r7, #12
 80012a4:	2200      	movs	r2, #0
 80012a6:	601a      	str	r2, [r3, #0]
 80012a8:	605a      	str	r2, [r3, #4]
 80012aa:	609a      	str	r2, [r3, #8]
 80012ac:	60da      	str	r2, [r3, #12]
 80012ae:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a12      	ldr	r2, [pc, #72]	; (8001300 <HAL_TIM_MspPostInit+0x68>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d11d      	bne.n	80012f6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ba:	2300      	movs	r3, #0
 80012bc:	60bb      	str	r3, [r7, #8]
 80012be:	4b11      	ldr	r3, [pc, #68]	; (8001304 <HAL_TIM_MspPostInit+0x6c>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c2:	4a10      	ldr	r2, [pc, #64]	; (8001304 <HAL_TIM_MspPostInit+0x6c>)
 80012c4:	f043 0302 	orr.w	r3, r3, #2
 80012c8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ca:	4b0e      	ldr	r3, [pc, #56]	; (8001304 <HAL_TIM_MspPostInit+0x6c>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ce:	f003 0302 	and.w	r3, r3, #2
 80012d2:	60bb      	str	r3, [r7, #8]
 80012d4:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80012d6:	2340      	movs	r3, #64	; 0x40
 80012d8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012da:	2302      	movs	r3, #2
 80012dc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012de:	2300      	movs	r3, #0
 80012e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e2:	2300      	movs	r3, #0
 80012e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80012e6:	2302      	movs	r3, #2
 80012e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ea:	f107 030c 	add.w	r3, r7, #12
 80012ee:	4619      	mov	r1, r3
 80012f0:	4805      	ldr	r0, [pc, #20]	; (8001308 <HAL_TIM_MspPostInit+0x70>)
 80012f2:	f000 fdbf 	bl	8001e74 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80012f6:	bf00      	nop
 80012f8:	3720      	adds	r7, #32
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	40000800 	.word	0x40000800
 8001304:	40023800 	.word	0x40023800
 8001308:	40020400 	.word	0x40020400

0800130c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001310:	4b11      	ldr	r3, [pc, #68]	; (8001358 <MX_USART2_UART_Init+0x4c>)
 8001312:	4a12      	ldr	r2, [pc, #72]	; (800135c <MX_USART2_UART_Init+0x50>)
 8001314:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001316:	4b10      	ldr	r3, [pc, #64]	; (8001358 <MX_USART2_UART_Init+0x4c>)
 8001318:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800131c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800131e:	4b0e      	ldr	r3, [pc, #56]	; (8001358 <MX_USART2_UART_Init+0x4c>)
 8001320:	2200      	movs	r2, #0
 8001322:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001324:	4b0c      	ldr	r3, [pc, #48]	; (8001358 <MX_USART2_UART_Init+0x4c>)
 8001326:	2200      	movs	r2, #0
 8001328:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800132a:	4b0b      	ldr	r3, [pc, #44]	; (8001358 <MX_USART2_UART_Init+0x4c>)
 800132c:	2200      	movs	r2, #0
 800132e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001330:	4b09      	ldr	r3, [pc, #36]	; (8001358 <MX_USART2_UART_Init+0x4c>)
 8001332:	220c      	movs	r2, #12
 8001334:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001336:	4b08      	ldr	r3, [pc, #32]	; (8001358 <MX_USART2_UART_Init+0x4c>)
 8001338:	2200      	movs	r2, #0
 800133a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800133c:	4b06      	ldr	r3, [pc, #24]	; (8001358 <MX_USART2_UART_Init+0x4c>)
 800133e:	2200      	movs	r2, #0
 8001340:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001342:	4805      	ldr	r0, [pc, #20]	; (8001358 <MX_USART2_UART_Init+0x4c>)
 8001344:	f003 fab0 	bl	80048a8 <HAL_UART_Init>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800134e:	f7ff fdad 	bl	8000eac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001352:	bf00      	nop
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	200003ec 	.word	0x200003ec
 800135c:	40004400 	.word	0x40004400

08001360 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b08a      	sub	sp, #40	; 0x28
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001368:	f107 0314 	add.w	r3, r7, #20
 800136c:	2200      	movs	r2, #0
 800136e:	601a      	str	r2, [r3, #0]
 8001370:	605a      	str	r2, [r3, #4]
 8001372:	609a      	str	r2, [r3, #8]
 8001374:	60da      	str	r2, [r3, #12]
 8001376:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a19      	ldr	r2, [pc, #100]	; (80013e4 <HAL_UART_MspInit+0x84>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d12b      	bne.n	80013da <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001382:	2300      	movs	r3, #0
 8001384:	613b      	str	r3, [r7, #16]
 8001386:	4b18      	ldr	r3, [pc, #96]	; (80013e8 <HAL_UART_MspInit+0x88>)
 8001388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138a:	4a17      	ldr	r2, [pc, #92]	; (80013e8 <HAL_UART_MspInit+0x88>)
 800138c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001390:	6413      	str	r3, [r2, #64]	; 0x40
 8001392:	4b15      	ldr	r3, [pc, #84]	; (80013e8 <HAL_UART_MspInit+0x88>)
 8001394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800139a:	613b      	str	r3, [r7, #16]
 800139c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800139e:	2300      	movs	r3, #0
 80013a0:	60fb      	str	r3, [r7, #12]
 80013a2:	4b11      	ldr	r3, [pc, #68]	; (80013e8 <HAL_UART_MspInit+0x88>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a6:	4a10      	ldr	r2, [pc, #64]	; (80013e8 <HAL_UART_MspInit+0x88>)
 80013a8:	f043 0301 	orr.w	r3, r3, #1
 80013ac:	6313      	str	r3, [r2, #48]	; 0x30
 80013ae:	4b0e      	ldr	r3, [pc, #56]	; (80013e8 <HAL_UART_MspInit+0x88>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b2:	f003 0301 	and.w	r3, r3, #1
 80013b6:	60fb      	str	r3, [r7, #12]
 80013b8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80013ba:	230c      	movs	r3, #12
 80013bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013be:	2302      	movs	r3, #2
 80013c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c2:	2300      	movs	r3, #0
 80013c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013c6:	2303      	movs	r3, #3
 80013c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013ca:	2307      	movs	r3, #7
 80013cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ce:	f107 0314 	add.w	r3, r7, #20
 80013d2:	4619      	mov	r1, r3
 80013d4:	4805      	ldr	r0, [pc, #20]	; (80013ec <HAL_UART_MspInit+0x8c>)
 80013d6:	f000 fd4d 	bl	8001e74 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80013da:	bf00      	nop
 80013dc:	3728      	adds	r7, #40	; 0x28
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	40004400 	.word	0x40004400
 80013e8:	40023800 	.word	0x40023800
 80013ec:	40020000 	.word	0x40020000

080013f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80013f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001428 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013f4:	480d      	ldr	r0, [pc, #52]	; (800142c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80013f6:	490e      	ldr	r1, [pc, #56]	; (8001430 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80013f8:	4a0e      	ldr	r2, [pc, #56]	; (8001434 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013fc:	e002      	b.n	8001404 <LoopCopyDataInit>

080013fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001400:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001402:	3304      	adds	r3, #4

08001404 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001404:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001406:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001408:	d3f9      	bcc.n	80013fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800140a:	4a0b      	ldr	r2, [pc, #44]	; (8001438 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800140c:	4c0b      	ldr	r4, [pc, #44]	; (800143c <LoopFillZerobss+0x26>)
  movs r3, #0
 800140e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001410:	e001      	b.n	8001416 <LoopFillZerobss>

08001412 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001412:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001414:	3204      	adds	r2, #4

08001416 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001416:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001418:	d3fb      	bcc.n	8001412 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800141a:	f7ff fddf 	bl	8000fdc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800141e:	f003 fd0b 	bl	8004e38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001422:	f7ff fc5f 	bl	8000ce4 <main>
  bx  lr    
 8001426:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001428:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800142c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001430:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001434:	08006d10 	.word	0x08006d10
  ldr r2, =_sbss
 8001438:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 800143c:	20000444 	.word	0x20000444

08001440 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001440:	e7fe      	b.n	8001440 <ADC_IRQHandler>
	...

08001444 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001448:	4b0e      	ldr	r3, [pc, #56]	; (8001484 <HAL_Init+0x40>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a0d      	ldr	r2, [pc, #52]	; (8001484 <HAL_Init+0x40>)
 800144e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001452:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001454:	4b0b      	ldr	r3, [pc, #44]	; (8001484 <HAL_Init+0x40>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a0a      	ldr	r2, [pc, #40]	; (8001484 <HAL_Init+0x40>)
 800145a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800145e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001460:	4b08      	ldr	r3, [pc, #32]	; (8001484 <HAL_Init+0x40>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a07      	ldr	r2, [pc, #28]	; (8001484 <HAL_Init+0x40>)
 8001466:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800146a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800146c:	2003      	movs	r0, #3
 800146e:	f000 f94f 	bl	8001710 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001472:	2000      	movs	r0, #0
 8001474:	f000 f808 	bl	8001488 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001478:	f7ff fd1e 	bl	8000eb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800147c:	2300      	movs	r3, #0
}
 800147e:	4618      	mov	r0, r3
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	40023c00 	.word	0x40023c00

08001488 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001490:	4b12      	ldr	r3, [pc, #72]	; (80014dc <HAL_InitTick+0x54>)
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	4b12      	ldr	r3, [pc, #72]	; (80014e0 <HAL_InitTick+0x58>)
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	4619      	mov	r1, r3
 800149a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800149e:	fbb3 f3f1 	udiv	r3, r3, r1
 80014a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80014a6:	4618      	mov	r0, r3
 80014a8:	f000 f967 	bl	800177a <HAL_SYSTICK_Config>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014b2:	2301      	movs	r3, #1
 80014b4:	e00e      	b.n	80014d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2b0f      	cmp	r3, #15
 80014ba:	d80a      	bhi.n	80014d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014bc:	2200      	movs	r2, #0
 80014be:	6879      	ldr	r1, [r7, #4]
 80014c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80014c4:	f000 f92f 	bl	8001726 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014c8:	4a06      	ldr	r2, [pc, #24]	; (80014e4 <HAL_InitTick+0x5c>)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014ce:	2300      	movs	r3, #0
 80014d0:	e000      	b.n	80014d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	3708      	adds	r7, #8
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	20000010 	.word	0x20000010
 80014e0:	20000018 	.word	0x20000018
 80014e4:	20000014 	.word	0x20000014

080014e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014ec:	4b06      	ldr	r3, [pc, #24]	; (8001508 <HAL_IncTick+0x20>)
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	461a      	mov	r2, r3
 80014f2:	4b06      	ldr	r3, [pc, #24]	; (800150c <HAL_IncTick+0x24>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4413      	add	r3, r2
 80014f8:	4a04      	ldr	r2, [pc, #16]	; (800150c <HAL_IncTick+0x24>)
 80014fa:	6013      	str	r3, [r2, #0]
}
 80014fc:	bf00      	nop
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	20000018 	.word	0x20000018
 800150c:	20000430 	.word	0x20000430

08001510 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
  return uwTick;
 8001514:	4b03      	ldr	r3, [pc, #12]	; (8001524 <HAL_GetTick+0x14>)
 8001516:	681b      	ldr	r3, [r3, #0]
}
 8001518:	4618      	mov	r0, r3
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	20000430 	.word	0x20000430

08001528 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b084      	sub	sp, #16
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001530:	f7ff ffee 	bl	8001510 <HAL_GetTick>
 8001534:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001540:	d005      	beq.n	800154e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001542:	4b0a      	ldr	r3, [pc, #40]	; (800156c <HAL_Delay+0x44>)
 8001544:	781b      	ldrb	r3, [r3, #0]
 8001546:	461a      	mov	r2, r3
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	4413      	add	r3, r2
 800154c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800154e:	bf00      	nop
 8001550:	f7ff ffde 	bl	8001510 <HAL_GetTick>
 8001554:	4602      	mov	r2, r0
 8001556:	68bb      	ldr	r3, [r7, #8]
 8001558:	1ad3      	subs	r3, r2, r3
 800155a:	68fa      	ldr	r2, [r7, #12]
 800155c:	429a      	cmp	r2, r3
 800155e:	d8f7      	bhi.n	8001550 <HAL_Delay+0x28>
  {
  }
}
 8001560:	bf00      	nop
 8001562:	bf00      	nop
 8001564:	3710      	adds	r7, #16
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	20000018 	.word	0x20000018

08001570 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001570:	b480      	push	{r7}
 8001572:	b085      	sub	sp, #20
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	f003 0307 	and.w	r3, r3, #7
 800157e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001580:	4b0c      	ldr	r3, [pc, #48]	; (80015b4 <__NVIC_SetPriorityGrouping+0x44>)
 8001582:	68db      	ldr	r3, [r3, #12]
 8001584:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001586:	68ba      	ldr	r2, [r7, #8]
 8001588:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800158c:	4013      	ands	r3, r2
 800158e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001598:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800159c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015a2:	4a04      	ldr	r2, [pc, #16]	; (80015b4 <__NVIC_SetPriorityGrouping+0x44>)
 80015a4:	68bb      	ldr	r3, [r7, #8]
 80015a6:	60d3      	str	r3, [r2, #12]
}
 80015a8:	bf00      	nop
 80015aa:	3714      	adds	r7, #20
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr
 80015b4:	e000ed00 	.word	0xe000ed00

080015b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015bc:	4b04      	ldr	r3, [pc, #16]	; (80015d0 <__NVIC_GetPriorityGrouping+0x18>)
 80015be:	68db      	ldr	r3, [r3, #12]
 80015c0:	0a1b      	lsrs	r3, r3, #8
 80015c2:	f003 0307 	and.w	r3, r3, #7
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr
 80015d0:	e000ed00 	.word	0xe000ed00

080015d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
 80015da:	4603      	mov	r3, r0
 80015dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	db0b      	blt.n	80015fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015e6:	79fb      	ldrb	r3, [r7, #7]
 80015e8:	f003 021f 	and.w	r2, r3, #31
 80015ec:	4907      	ldr	r1, [pc, #28]	; (800160c <__NVIC_EnableIRQ+0x38>)
 80015ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f2:	095b      	lsrs	r3, r3, #5
 80015f4:	2001      	movs	r0, #1
 80015f6:	fa00 f202 	lsl.w	r2, r0, r2
 80015fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015fe:	bf00      	nop
 8001600:	370c      	adds	r7, #12
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr
 800160a:	bf00      	nop
 800160c:	e000e100 	.word	0xe000e100

08001610 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001610:	b480      	push	{r7}
 8001612:	b083      	sub	sp, #12
 8001614:	af00      	add	r7, sp, #0
 8001616:	4603      	mov	r3, r0
 8001618:	6039      	str	r1, [r7, #0]
 800161a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800161c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001620:	2b00      	cmp	r3, #0
 8001622:	db0a      	blt.n	800163a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	b2da      	uxtb	r2, r3
 8001628:	490c      	ldr	r1, [pc, #48]	; (800165c <__NVIC_SetPriority+0x4c>)
 800162a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800162e:	0112      	lsls	r2, r2, #4
 8001630:	b2d2      	uxtb	r2, r2
 8001632:	440b      	add	r3, r1
 8001634:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001638:	e00a      	b.n	8001650 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	b2da      	uxtb	r2, r3
 800163e:	4908      	ldr	r1, [pc, #32]	; (8001660 <__NVIC_SetPriority+0x50>)
 8001640:	79fb      	ldrb	r3, [r7, #7]
 8001642:	f003 030f 	and.w	r3, r3, #15
 8001646:	3b04      	subs	r3, #4
 8001648:	0112      	lsls	r2, r2, #4
 800164a:	b2d2      	uxtb	r2, r2
 800164c:	440b      	add	r3, r1
 800164e:	761a      	strb	r2, [r3, #24]
}
 8001650:	bf00      	nop
 8001652:	370c      	adds	r7, #12
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr
 800165c:	e000e100 	.word	0xe000e100
 8001660:	e000ed00 	.word	0xe000ed00

08001664 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001664:	b480      	push	{r7}
 8001666:	b089      	sub	sp, #36	; 0x24
 8001668:	af00      	add	r7, sp, #0
 800166a:	60f8      	str	r0, [r7, #12]
 800166c:	60b9      	str	r1, [r7, #8]
 800166e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	f003 0307 	and.w	r3, r3, #7
 8001676:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001678:	69fb      	ldr	r3, [r7, #28]
 800167a:	f1c3 0307 	rsb	r3, r3, #7
 800167e:	2b04      	cmp	r3, #4
 8001680:	bf28      	it	cs
 8001682:	2304      	movcs	r3, #4
 8001684:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	3304      	adds	r3, #4
 800168a:	2b06      	cmp	r3, #6
 800168c:	d902      	bls.n	8001694 <NVIC_EncodePriority+0x30>
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	3b03      	subs	r3, #3
 8001692:	e000      	b.n	8001696 <NVIC_EncodePriority+0x32>
 8001694:	2300      	movs	r3, #0
 8001696:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001698:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800169c:	69bb      	ldr	r3, [r7, #24]
 800169e:	fa02 f303 	lsl.w	r3, r2, r3
 80016a2:	43da      	mvns	r2, r3
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	401a      	ands	r2, r3
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	fa01 f303 	lsl.w	r3, r1, r3
 80016b6:	43d9      	mvns	r1, r3
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016bc:	4313      	orrs	r3, r2
         );
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3724      	adds	r7, #36	; 0x24
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
	...

080016cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	3b01      	subs	r3, #1
 80016d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016dc:	d301      	bcc.n	80016e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016de:	2301      	movs	r3, #1
 80016e0:	e00f      	b.n	8001702 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016e2:	4a0a      	ldr	r2, [pc, #40]	; (800170c <SysTick_Config+0x40>)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	3b01      	subs	r3, #1
 80016e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016ea:	210f      	movs	r1, #15
 80016ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80016f0:	f7ff ff8e 	bl	8001610 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016f4:	4b05      	ldr	r3, [pc, #20]	; (800170c <SysTick_Config+0x40>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016fa:	4b04      	ldr	r3, [pc, #16]	; (800170c <SysTick_Config+0x40>)
 80016fc:	2207      	movs	r2, #7
 80016fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001700:	2300      	movs	r3, #0
}
 8001702:	4618      	mov	r0, r3
 8001704:	3708      	adds	r7, #8
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	e000e010 	.word	0xe000e010

08001710 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001718:	6878      	ldr	r0, [r7, #4]
 800171a:	f7ff ff29 	bl	8001570 <__NVIC_SetPriorityGrouping>
}
 800171e:	bf00      	nop
 8001720:	3708      	adds	r7, #8
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}

08001726 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001726:	b580      	push	{r7, lr}
 8001728:	b086      	sub	sp, #24
 800172a:	af00      	add	r7, sp, #0
 800172c:	4603      	mov	r3, r0
 800172e:	60b9      	str	r1, [r7, #8]
 8001730:	607a      	str	r2, [r7, #4]
 8001732:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001734:	2300      	movs	r3, #0
 8001736:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001738:	f7ff ff3e 	bl	80015b8 <__NVIC_GetPriorityGrouping>
 800173c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800173e:	687a      	ldr	r2, [r7, #4]
 8001740:	68b9      	ldr	r1, [r7, #8]
 8001742:	6978      	ldr	r0, [r7, #20]
 8001744:	f7ff ff8e 	bl	8001664 <NVIC_EncodePriority>
 8001748:	4602      	mov	r2, r0
 800174a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800174e:	4611      	mov	r1, r2
 8001750:	4618      	mov	r0, r3
 8001752:	f7ff ff5d 	bl	8001610 <__NVIC_SetPriority>
}
 8001756:	bf00      	nop
 8001758:	3718      	adds	r7, #24
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}

0800175e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800175e:	b580      	push	{r7, lr}
 8001760:	b082      	sub	sp, #8
 8001762:	af00      	add	r7, sp, #0
 8001764:	4603      	mov	r3, r0
 8001766:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001768:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800176c:	4618      	mov	r0, r3
 800176e:	f7ff ff31 	bl	80015d4 <__NVIC_EnableIRQ>
}
 8001772:	bf00      	nop
 8001774:	3708      	adds	r7, #8
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}

0800177a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800177a:	b580      	push	{r7, lr}
 800177c:	b082      	sub	sp, #8
 800177e:	af00      	add	r7, sp, #0
 8001780:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001782:	6878      	ldr	r0, [r7, #4]
 8001784:	f7ff ffa2 	bl	80016cc <SysTick_Config>
 8001788:	4603      	mov	r3, r0
}
 800178a:	4618      	mov	r0, r3
 800178c:	3708      	adds	r7, #8
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
	...

08001794 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b086      	sub	sp, #24
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800179c:	2300      	movs	r3, #0
 800179e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80017a0:	f7ff feb6 	bl	8001510 <HAL_GetTick>
 80017a4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d101      	bne.n	80017b0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80017ac:	2301      	movs	r3, #1
 80017ae:	e099      	b.n	80018e4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2202      	movs	r2, #2
 80017b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2200      	movs	r2, #0
 80017bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f022 0201 	bic.w	r2, r2, #1
 80017ce:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017d0:	e00f      	b.n	80017f2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80017d2:	f7ff fe9d 	bl	8001510 <HAL_GetTick>
 80017d6:	4602      	mov	r2, r0
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	1ad3      	subs	r3, r2, r3
 80017dc:	2b05      	cmp	r3, #5
 80017de:	d908      	bls.n	80017f2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2220      	movs	r2, #32
 80017e4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2203      	movs	r2, #3
 80017ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80017ee:	2303      	movs	r3, #3
 80017f0:	e078      	b.n	80018e4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f003 0301 	and.w	r3, r3, #1
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d1e8      	bne.n	80017d2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001808:	697a      	ldr	r2, [r7, #20]
 800180a:	4b38      	ldr	r3, [pc, #224]	; (80018ec <HAL_DMA_Init+0x158>)
 800180c:	4013      	ands	r3, r2
 800180e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	685a      	ldr	r2, [r3, #4]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800181e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	691b      	ldr	r3, [r3, #16]
 8001824:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800182a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	699b      	ldr	r3, [r3, #24]
 8001830:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001836:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6a1b      	ldr	r3, [r3, #32]
 800183c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800183e:	697a      	ldr	r2, [r7, #20]
 8001840:	4313      	orrs	r3, r2
 8001842:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001848:	2b04      	cmp	r3, #4
 800184a:	d107      	bne.n	800185c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001854:	4313      	orrs	r3, r2
 8001856:	697a      	ldr	r2, [r7, #20]
 8001858:	4313      	orrs	r3, r2
 800185a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	697a      	ldr	r2, [r7, #20]
 8001862:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	695b      	ldr	r3, [r3, #20]
 800186a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	f023 0307 	bic.w	r3, r3, #7
 8001872:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001878:	697a      	ldr	r2, [r7, #20]
 800187a:	4313      	orrs	r3, r2
 800187c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001882:	2b04      	cmp	r3, #4
 8001884:	d117      	bne.n	80018b6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800188a:	697a      	ldr	r2, [r7, #20]
 800188c:	4313      	orrs	r3, r2
 800188e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001894:	2b00      	cmp	r3, #0
 8001896:	d00e      	beq.n	80018b6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001898:	6878      	ldr	r0, [r7, #4]
 800189a:	f000 fa6f 	bl	8001d7c <DMA_CheckFifoParam>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d008      	beq.n	80018b6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2240      	movs	r2, #64	; 0x40
 80018a8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2201      	movs	r2, #1
 80018ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80018b2:	2301      	movs	r3, #1
 80018b4:	e016      	b.n	80018e4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	697a      	ldr	r2, [r7, #20]
 80018bc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80018be:	6878      	ldr	r0, [r7, #4]
 80018c0:	f000 fa26 	bl	8001d10 <DMA_CalcBaseAndBitshift>
 80018c4:	4603      	mov	r3, r0
 80018c6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018cc:	223f      	movs	r2, #63	; 0x3f
 80018ce:	409a      	lsls	r2, r3
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2200      	movs	r2, #0
 80018d8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2201      	movs	r2, #1
 80018de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80018e2:	2300      	movs	r3, #0
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	3718      	adds	r7, #24
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	f010803f 	.word	0xf010803f

080018f0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b086      	sub	sp, #24
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	60f8      	str	r0, [r7, #12]
 80018f8:	60b9      	str	r1, [r7, #8]
 80018fa:	607a      	str	r2, [r7, #4]
 80018fc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80018fe:	2300      	movs	r3, #0
 8001900:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001906:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800190e:	2b01      	cmp	r3, #1
 8001910:	d101      	bne.n	8001916 <HAL_DMA_Start_IT+0x26>
 8001912:	2302      	movs	r3, #2
 8001914:	e040      	b.n	8001998 <HAL_DMA_Start_IT+0xa8>
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	2201      	movs	r2, #1
 800191a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001924:	b2db      	uxtb	r3, r3
 8001926:	2b01      	cmp	r3, #1
 8001928:	d12f      	bne.n	800198a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	2202      	movs	r2, #2
 800192e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	2200      	movs	r2, #0
 8001936:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	687a      	ldr	r2, [r7, #4]
 800193c:	68b9      	ldr	r1, [r7, #8]
 800193e:	68f8      	ldr	r0, [r7, #12]
 8001940:	f000 f9b8 	bl	8001cb4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001948:	223f      	movs	r2, #63	; 0x3f
 800194a:	409a      	lsls	r2, r3
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f042 0216 	orr.w	r2, r2, #22
 800195e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001964:	2b00      	cmp	r3, #0
 8001966:	d007      	beq.n	8001978 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f042 0208 	orr.w	r2, r2, #8
 8001976:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f042 0201 	orr.w	r2, r2, #1
 8001986:	601a      	str	r2, [r3, #0]
 8001988:	e005      	b.n	8001996 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	2200      	movs	r2, #0
 800198e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001992:	2302      	movs	r3, #2
 8001994:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001996:	7dfb      	ldrb	r3, [r7, #23]
}
 8001998:	4618      	mov	r0, r3
 800199a:	3718      	adds	r7, #24
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}

080019a0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b086      	sub	sp, #24
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80019a8:	2300      	movs	r3, #0
 80019aa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80019ac:	4b8e      	ldr	r3, [pc, #568]	; (8001be8 <HAL_DMA_IRQHandler+0x248>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a8e      	ldr	r2, [pc, #568]	; (8001bec <HAL_DMA_IRQHandler+0x24c>)
 80019b2:	fba2 2303 	umull	r2, r3, r2, r3
 80019b6:	0a9b      	lsrs	r3, r3, #10
 80019b8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019be:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019ca:	2208      	movs	r2, #8
 80019cc:	409a      	lsls	r2, r3
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	4013      	ands	r3, r2
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d01a      	beq.n	8001a0c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f003 0304 	and.w	r3, r3, #4
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d013      	beq.n	8001a0c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f022 0204 	bic.w	r2, r2, #4
 80019f2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019f8:	2208      	movs	r2, #8
 80019fa:	409a      	lsls	r2, r3
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a04:	f043 0201 	orr.w	r2, r3, #1
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a10:	2201      	movs	r2, #1
 8001a12:	409a      	lsls	r2, r3
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	4013      	ands	r3, r2
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d012      	beq.n	8001a42 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	695b      	ldr	r3, [r3, #20]
 8001a22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d00b      	beq.n	8001a42 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a2e:	2201      	movs	r2, #1
 8001a30:	409a      	lsls	r2, r3
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a3a:	f043 0202 	orr.w	r2, r3, #2
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a46:	2204      	movs	r2, #4
 8001a48:	409a      	lsls	r2, r3
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d012      	beq.n	8001a78 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f003 0302 	and.w	r3, r3, #2
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d00b      	beq.n	8001a78 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a64:	2204      	movs	r2, #4
 8001a66:	409a      	lsls	r2, r3
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a70:	f043 0204 	orr.w	r2, r3, #4
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a7c:	2210      	movs	r2, #16
 8001a7e:	409a      	lsls	r2, r3
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	4013      	ands	r3, r2
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d043      	beq.n	8001b10 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 0308 	and.w	r3, r3, #8
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d03c      	beq.n	8001b10 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a9a:	2210      	movs	r2, #16
 8001a9c:	409a      	lsls	r2, r3
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d018      	beq.n	8001ae2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d108      	bne.n	8001ad0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d024      	beq.n	8001b10 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	4798      	blx	r3
 8001ace:	e01f      	b.n	8001b10 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d01b      	beq.n	8001b10 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001adc:	6878      	ldr	r0, [r7, #4]
 8001ade:	4798      	blx	r3
 8001ae0:	e016      	b.n	8001b10 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d107      	bne.n	8001b00 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f022 0208 	bic.w	r2, r2, #8
 8001afe:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d003      	beq.n	8001b10 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b14:	2220      	movs	r2, #32
 8001b16:	409a      	lsls	r2, r3
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	f000 808f 	beq.w	8001c40 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 0310 	and.w	r3, r3, #16
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	f000 8087 	beq.w	8001c40 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b36:	2220      	movs	r2, #32
 8001b38:	409a      	lsls	r2, r3
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b44:	b2db      	uxtb	r3, r3
 8001b46:	2b05      	cmp	r3, #5
 8001b48:	d136      	bne.n	8001bb8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f022 0216 	bic.w	r2, r2, #22
 8001b58:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	695a      	ldr	r2, [r3, #20]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b68:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d103      	bne.n	8001b7a <HAL_DMA_IRQHandler+0x1da>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d007      	beq.n	8001b8a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f022 0208 	bic.w	r2, r2, #8
 8001b88:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b8e:	223f      	movs	r2, #63	; 0x3f
 8001b90:	409a      	lsls	r2, r3
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2201      	movs	r2, #1
 8001b9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d07e      	beq.n	8001cac <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	4798      	blx	r3
        }
        return;
 8001bb6:	e079      	b.n	8001cac <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d01d      	beq.n	8001c02 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d10d      	bne.n	8001bf0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d031      	beq.n	8001c40 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001be0:	6878      	ldr	r0, [r7, #4]
 8001be2:	4798      	blx	r3
 8001be4:	e02c      	b.n	8001c40 <HAL_DMA_IRQHandler+0x2a0>
 8001be6:	bf00      	nop
 8001be8:	20000010 	.word	0x20000010
 8001bec:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d023      	beq.n	8001c40 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bfc:	6878      	ldr	r0, [r7, #4]
 8001bfe:	4798      	blx	r3
 8001c00:	e01e      	b.n	8001c40 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d10f      	bne.n	8001c30 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f022 0210 	bic.w	r2, r2, #16
 8001c1e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2201      	movs	r2, #1
 8001c24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d003      	beq.n	8001c40 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c3c:	6878      	ldr	r0, [r7, #4]
 8001c3e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d032      	beq.n	8001cae <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c4c:	f003 0301 	and.w	r3, r3, #1
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d022      	beq.n	8001c9a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2205      	movs	r2, #5
 8001c58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f022 0201 	bic.w	r2, r2, #1
 8001c6a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	3301      	adds	r3, #1
 8001c70:	60bb      	str	r3, [r7, #8]
 8001c72:	697a      	ldr	r2, [r7, #20]
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d307      	bcc.n	8001c88 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 0301 	and.w	r3, r3, #1
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d1f2      	bne.n	8001c6c <HAL_DMA_IRQHandler+0x2cc>
 8001c86:	e000      	b.n	8001c8a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001c88:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2200      	movs	r2, #0
 8001c96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d005      	beq.n	8001cae <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	4798      	blx	r3
 8001caa:	e000      	b.n	8001cae <HAL_DMA_IRQHandler+0x30e>
        return;
 8001cac:	bf00      	nop
    }
  }
}
 8001cae:	3718      	adds	r7, #24
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}

08001cb4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b085      	sub	sp, #20
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	60f8      	str	r0, [r7, #12]
 8001cbc:	60b9      	str	r1, [r7, #8]
 8001cbe:	607a      	str	r2, [r7, #4]
 8001cc0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001cd0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	683a      	ldr	r2, [r7, #0]
 8001cd8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	2b40      	cmp	r3, #64	; 0x40
 8001ce0:	d108      	bne.n	8001cf4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	687a      	ldr	r2, [r7, #4]
 8001ce8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	68ba      	ldr	r2, [r7, #8]
 8001cf0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001cf2:	e007      	b.n	8001d04 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	68ba      	ldr	r2, [r7, #8]
 8001cfa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	687a      	ldr	r2, [r7, #4]
 8001d02:	60da      	str	r2, [r3, #12]
}
 8001d04:	bf00      	nop
 8001d06:	3714      	adds	r7, #20
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr

08001d10 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b085      	sub	sp, #20
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	3b10      	subs	r3, #16
 8001d20:	4a14      	ldr	r2, [pc, #80]	; (8001d74 <DMA_CalcBaseAndBitshift+0x64>)
 8001d22:	fba2 2303 	umull	r2, r3, r2, r3
 8001d26:	091b      	lsrs	r3, r3, #4
 8001d28:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001d2a:	4a13      	ldr	r2, [pc, #76]	; (8001d78 <DMA_CalcBaseAndBitshift+0x68>)
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	4413      	add	r3, r2
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	461a      	mov	r2, r3
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	2b03      	cmp	r3, #3
 8001d3c:	d909      	bls.n	8001d52 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001d46:	f023 0303 	bic.w	r3, r3, #3
 8001d4a:	1d1a      	adds	r2, r3, #4
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	659a      	str	r2, [r3, #88]	; 0x58
 8001d50:	e007      	b.n	8001d62 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001d5a:	f023 0303 	bic.w	r3, r3, #3
 8001d5e:	687a      	ldr	r2, [r7, #4]
 8001d60:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3714      	adds	r7, #20
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
 8001d72:	bf00      	nop
 8001d74:	aaaaaaab 	.word	0xaaaaaaab
 8001d78:	08006cc4 	.word	0x08006cc4

08001d7c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b085      	sub	sp, #20
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d84:	2300      	movs	r3, #0
 8001d86:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d8c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	699b      	ldr	r3, [r3, #24]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d11f      	bne.n	8001dd6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001d96:	68bb      	ldr	r3, [r7, #8]
 8001d98:	2b03      	cmp	r3, #3
 8001d9a:	d856      	bhi.n	8001e4a <DMA_CheckFifoParam+0xce>
 8001d9c:	a201      	add	r2, pc, #4	; (adr r2, 8001da4 <DMA_CheckFifoParam+0x28>)
 8001d9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001da2:	bf00      	nop
 8001da4:	08001db5 	.word	0x08001db5
 8001da8:	08001dc7 	.word	0x08001dc7
 8001dac:	08001db5 	.word	0x08001db5
 8001db0:	08001e4b 	.word	0x08001e4b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001db8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d046      	beq.n	8001e4e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001dc4:	e043      	b.n	8001e4e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dca:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001dce:	d140      	bne.n	8001e52 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001dd4:	e03d      	b.n	8001e52 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	699b      	ldr	r3, [r3, #24]
 8001dda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001dde:	d121      	bne.n	8001e24 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	2b03      	cmp	r3, #3
 8001de4:	d837      	bhi.n	8001e56 <DMA_CheckFifoParam+0xda>
 8001de6:	a201      	add	r2, pc, #4	; (adr r2, 8001dec <DMA_CheckFifoParam+0x70>)
 8001de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dec:	08001dfd 	.word	0x08001dfd
 8001df0:	08001e03 	.word	0x08001e03
 8001df4:	08001dfd 	.word	0x08001dfd
 8001df8:	08001e15 	.word	0x08001e15
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	73fb      	strb	r3, [r7, #15]
      break;
 8001e00:	e030      	b.n	8001e64 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e06:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d025      	beq.n	8001e5a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e12:	e022      	b.n	8001e5a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e18:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001e1c:	d11f      	bne.n	8001e5e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001e22:	e01c      	b.n	8001e5e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	2b02      	cmp	r3, #2
 8001e28:	d903      	bls.n	8001e32 <DMA_CheckFifoParam+0xb6>
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	2b03      	cmp	r3, #3
 8001e2e:	d003      	beq.n	8001e38 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001e30:	e018      	b.n	8001e64 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	73fb      	strb	r3, [r7, #15]
      break;
 8001e36:	e015      	b.n	8001e64 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e3c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d00e      	beq.n	8001e62 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001e44:	2301      	movs	r3, #1
 8001e46:	73fb      	strb	r3, [r7, #15]
      break;
 8001e48:	e00b      	b.n	8001e62 <DMA_CheckFifoParam+0xe6>
      break;
 8001e4a:	bf00      	nop
 8001e4c:	e00a      	b.n	8001e64 <DMA_CheckFifoParam+0xe8>
      break;
 8001e4e:	bf00      	nop
 8001e50:	e008      	b.n	8001e64 <DMA_CheckFifoParam+0xe8>
      break;
 8001e52:	bf00      	nop
 8001e54:	e006      	b.n	8001e64 <DMA_CheckFifoParam+0xe8>
      break;
 8001e56:	bf00      	nop
 8001e58:	e004      	b.n	8001e64 <DMA_CheckFifoParam+0xe8>
      break;
 8001e5a:	bf00      	nop
 8001e5c:	e002      	b.n	8001e64 <DMA_CheckFifoParam+0xe8>
      break;   
 8001e5e:	bf00      	nop
 8001e60:	e000      	b.n	8001e64 <DMA_CheckFifoParam+0xe8>
      break;
 8001e62:	bf00      	nop
    }
  } 
  
  return status; 
 8001e64:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3714      	adds	r7, #20
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr
 8001e72:	bf00      	nop

08001e74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b089      	sub	sp, #36	; 0x24
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
 8001e7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e82:	2300      	movs	r3, #0
 8001e84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e86:	2300      	movs	r3, #0
 8001e88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	61fb      	str	r3, [r7, #28]
 8001e8e:	e165      	b.n	800215c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e90:	2201      	movs	r2, #1
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	fa02 f303 	lsl.w	r3, r2, r3
 8001e98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	697a      	ldr	r2, [r7, #20]
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ea4:	693a      	ldr	r2, [r7, #16]
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	f040 8154 	bne.w	8002156 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	f003 0303 	and.w	r3, r3, #3
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d005      	beq.n	8001ec6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ec2:	2b02      	cmp	r3, #2
 8001ec4:	d130      	bne.n	8001f28 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ecc:	69fb      	ldr	r3, [r7, #28]
 8001ece:	005b      	lsls	r3, r3, #1
 8001ed0:	2203      	movs	r2, #3
 8001ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed6:	43db      	mvns	r3, r3
 8001ed8:	69ba      	ldr	r2, [r7, #24]
 8001eda:	4013      	ands	r3, r2
 8001edc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	68da      	ldr	r2, [r3, #12]
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	005b      	lsls	r3, r3, #1
 8001ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eea:	69ba      	ldr	r2, [r7, #24]
 8001eec:	4313      	orrs	r3, r2
 8001eee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	69ba      	ldr	r2, [r7, #24]
 8001ef4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001efc:	2201      	movs	r2, #1
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	fa02 f303 	lsl.w	r3, r2, r3
 8001f04:	43db      	mvns	r3, r3
 8001f06:	69ba      	ldr	r2, [r7, #24]
 8001f08:	4013      	ands	r3, r2
 8001f0a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	091b      	lsrs	r3, r3, #4
 8001f12:	f003 0201 	and.w	r2, r3, #1
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1c:	69ba      	ldr	r2, [r7, #24]
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	69ba      	ldr	r2, [r7, #24]
 8001f26:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f003 0303 	and.w	r3, r3, #3
 8001f30:	2b03      	cmp	r3, #3
 8001f32:	d017      	beq.n	8001f64 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	005b      	lsls	r3, r3, #1
 8001f3e:	2203      	movs	r2, #3
 8001f40:	fa02 f303 	lsl.w	r3, r2, r3
 8001f44:	43db      	mvns	r3, r3
 8001f46:	69ba      	ldr	r2, [r7, #24]
 8001f48:	4013      	ands	r3, r2
 8001f4a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	689a      	ldr	r2, [r3, #8]
 8001f50:	69fb      	ldr	r3, [r7, #28]
 8001f52:	005b      	lsls	r3, r3, #1
 8001f54:	fa02 f303 	lsl.w	r3, r2, r3
 8001f58:	69ba      	ldr	r2, [r7, #24]
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	69ba      	ldr	r2, [r7, #24]
 8001f62:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f003 0303 	and.w	r3, r3, #3
 8001f6c:	2b02      	cmp	r3, #2
 8001f6e:	d123      	bne.n	8001fb8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f70:	69fb      	ldr	r3, [r7, #28]
 8001f72:	08da      	lsrs	r2, r3, #3
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	3208      	adds	r2, #8
 8001f78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	f003 0307 	and.w	r3, r3, #7
 8001f84:	009b      	lsls	r3, r3, #2
 8001f86:	220f      	movs	r2, #15
 8001f88:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8c:	43db      	mvns	r3, r3
 8001f8e:	69ba      	ldr	r2, [r7, #24]
 8001f90:	4013      	ands	r3, r2
 8001f92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	691a      	ldr	r2, [r3, #16]
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	f003 0307 	and.w	r3, r3, #7
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa4:	69ba      	ldr	r2, [r7, #24]
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	08da      	lsrs	r2, r3, #3
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	3208      	adds	r2, #8
 8001fb2:	69b9      	ldr	r1, [r7, #24]
 8001fb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	005b      	lsls	r3, r3, #1
 8001fc2:	2203      	movs	r2, #3
 8001fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc8:	43db      	mvns	r3, r3
 8001fca:	69ba      	ldr	r2, [r7, #24]
 8001fcc:	4013      	ands	r3, r2
 8001fce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f003 0203 	and.w	r2, r3, #3
 8001fd8:	69fb      	ldr	r3, [r7, #28]
 8001fda:	005b      	lsls	r3, r3, #1
 8001fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe0:	69ba      	ldr	r2, [r7, #24]
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	69ba      	ldr	r2, [r7, #24]
 8001fea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	f000 80ae 	beq.w	8002156 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	60fb      	str	r3, [r7, #12]
 8001ffe:	4b5d      	ldr	r3, [pc, #372]	; (8002174 <HAL_GPIO_Init+0x300>)
 8002000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002002:	4a5c      	ldr	r2, [pc, #368]	; (8002174 <HAL_GPIO_Init+0x300>)
 8002004:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002008:	6453      	str	r3, [r2, #68]	; 0x44
 800200a:	4b5a      	ldr	r3, [pc, #360]	; (8002174 <HAL_GPIO_Init+0x300>)
 800200c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800200e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002012:	60fb      	str	r3, [r7, #12]
 8002014:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002016:	4a58      	ldr	r2, [pc, #352]	; (8002178 <HAL_GPIO_Init+0x304>)
 8002018:	69fb      	ldr	r3, [r7, #28]
 800201a:	089b      	lsrs	r3, r3, #2
 800201c:	3302      	adds	r3, #2
 800201e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002022:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	f003 0303 	and.w	r3, r3, #3
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	220f      	movs	r2, #15
 800202e:	fa02 f303 	lsl.w	r3, r2, r3
 8002032:	43db      	mvns	r3, r3
 8002034:	69ba      	ldr	r2, [r7, #24]
 8002036:	4013      	ands	r3, r2
 8002038:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4a4f      	ldr	r2, [pc, #316]	; (800217c <HAL_GPIO_Init+0x308>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d025      	beq.n	800208e <HAL_GPIO_Init+0x21a>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4a4e      	ldr	r2, [pc, #312]	; (8002180 <HAL_GPIO_Init+0x30c>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d01f      	beq.n	800208a <HAL_GPIO_Init+0x216>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4a4d      	ldr	r2, [pc, #308]	; (8002184 <HAL_GPIO_Init+0x310>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d019      	beq.n	8002086 <HAL_GPIO_Init+0x212>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4a4c      	ldr	r2, [pc, #304]	; (8002188 <HAL_GPIO_Init+0x314>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d013      	beq.n	8002082 <HAL_GPIO_Init+0x20e>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4a4b      	ldr	r2, [pc, #300]	; (800218c <HAL_GPIO_Init+0x318>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d00d      	beq.n	800207e <HAL_GPIO_Init+0x20a>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4a4a      	ldr	r2, [pc, #296]	; (8002190 <HAL_GPIO_Init+0x31c>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d007      	beq.n	800207a <HAL_GPIO_Init+0x206>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4a49      	ldr	r2, [pc, #292]	; (8002194 <HAL_GPIO_Init+0x320>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d101      	bne.n	8002076 <HAL_GPIO_Init+0x202>
 8002072:	2306      	movs	r3, #6
 8002074:	e00c      	b.n	8002090 <HAL_GPIO_Init+0x21c>
 8002076:	2307      	movs	r3, #7
 8002078:	e00a      	b.n	8002090 <HAL_GPIO_Init+0x21c>
 800207a:	2305      	movs	r3, #5
 800207c:	e008      	b.n	8002090 <HAL_GPIO_Init+0x21c>
 800207e:	2304      	movs	r3, #4
 8002080:	e006      	b.n	8002090 <HAL_GPIO_Init+0x21c>
 8002082:	2303      	movs	r3, #3
 8002084:	e004      	b.n	8002090 <HAL_GPIO_Init+0x21c>
 8002086:	2302      	movs	r3, #2
 8002088:	e002      	b.n	8002090 <HAL_GPIO_Init+0x21c>
 800208a:	2301      	movs	r3, #1
 800208c:	e000      	b.n	8002090 <HAL_GPIO_Init+0x21c>
 800208e:	2300      	movs	r3, #0
 8002090:	69fa      	ldr	r2, [r7, #28]
 8002092:	f002 0203 	and.w	r2, r2, #3
 8002096:	0092      	lsls	r2, r2, #2
 8002098:	4093      	lsls	r3, r2
 800209a:	69ba      	ldr	r2, [r7, #24]
 800209c:	4313      	orrs	r3, r2
 800209e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020a0:	4935      	ldr	r1, [pc, #212]	; (8002178 <HAL_GPIO_Init+0x304>)
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	089b      	lsrs	r3, r3, #2
 80020a6:	3302      	adds	r3, #2
 80020a8:	69ba      	ldr	r2, [r7, #24]
 80020aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020ae:	4b3a      	ldr	r3, [pc, #232]	; (8002198 <HAL_GPIO_Init+0x324>)
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	43db      	mvns	r3, r3
 80020b8:	69ba      	ldr	r2, [r7, #24]
 80020ba:	4013      	ands	r3, r2
 80020bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d003      	beq.n	80020d2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80020ca:	69ba      	ldr	r2, [r7, #24]
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	4313      	orrs	r3, r2
 80020d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020d2:	4a31      	ldr	r2, [pc, #196]	; (8002198 <HAL_GPIO_Init+0x324>)
 80020d4:	69bb      	ldr	r3, [r7, #24]
 80020d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020d8:	4b2f      	ldr	r3, [pc, #188]	; (8002198 <HAL_GPIO_Init+0x324>)
 80020da:	68db      	ldr	r3, [r3, #12]
 80020dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	43db      	mvns	r3, r3
 80020e2:	69ba      	ldr	r2, [r7, #24]
 80020e4:	4013      	ands	r3, r2
 80020e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d003      	beq.n	80020fc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80020f4:	69ba      	ldr	r2, [r7, #24]
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	4313      	orrs	r3, r2
 80020fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80020fc:	4a26      	ldr	r2, [pc, #152]	; (8002198 <HAL_GPIO_Init+0x324>)
 80020fe:	69bb      	ldr	r3, [r7, #24]
 8002100:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002102:	4b25      	ldr	r3, [pc, #148]	; (8002198 <HAL_GPIO_Init+0x324>)
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	43db      	mvns	r3, r3
 800210c:	69ba      	ldr	r2, [r7, #24]
 800210e:	4013      	ands	r3, r2
 8002110:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800211a:	2b00      	cmp	r3, #0
 800211c:	d003      	beq.n	8002126 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800211e:	69ba      	ldr	r2, [r7, #24]
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	4313      	orrs	r3, r2
 8002124:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002126:	4a1c      	ldr	r2, [pc, #112]	; (8002198 <HAL_GPIO_Init+0x324>)
 8002128:	69bb      	ldr	r3, [r7, #24]
 800212a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800212c:	4b1a      	ldr	r3, [pc, #104]	; (8002198 <HAL_GPIO_Init+0x324>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	43db      	mvns	r3, r3
 8002136:	69ba      	ldr	r2, [r7, #24]
 8002138:	4013      	ands	r3, r2
 800213a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002144:	2b00      	cmp	r3, #0
 8002146:	d003      	beq.n	8002150 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002148:	69ba      	ldr	r2, [r7, #24]
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	4313      	orrs	r3, r2
 800214e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002150:	4a11      	ldr	r2, [pc, #68]	; (8002198 <HAL_GPIO_Init+0x324>)
 8002152:	69bb      	ldr	r3, [r7, #24]
 8002154:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	3301      	adds	r3, #1
 800215a:	61fb      	str	r3, [r7, #28]
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	2b0f      	cmp	r3, #15
 8002160:	f67f ae96 	bls.w	8001e90 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002164:	bf00      	nop
 8002166:	bf00      	nop
 8002168:	3724      	adds	r7, #36	; 0x24
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop
 8002174:	40023800 	.word	0x40023800
 8002178:	40013800 	.word	0x40013800
 800217c:	40020000 	.word	0x40020000
 8002180:	40020400 	.word	0x40020400
 8002184:	40020800 	.word	0x40020800
 8002188:	40020c00 	.word	0x40020c00
 800218c:	40021000 	.word	0x40021000
 8002190:	40021400 	.word	0x40021400
 8002194:	40021800 	.word	0x40021800
 8002198:	40013c00 	.word	0x40013c00

0800219c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800219c:	b480      	push	{r7}
 800219e:	b083      	sub	sp, #12
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
 80021a4:	460b      	mov	r3, r1
 80021a6:	807b      	strh	r3, [r7, #2]
 80021a8:	4613      	mov	r3, r2
 80021aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021ac:	787b      	ldrb	r3, [r7, #1]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d003      	beq.n	80021ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021b2:	887a      	ldrh	r2, [r7, #2]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80021b8:	e003      	b.n	80021c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80021ba:	887b      	ldrh	r3, [r7, #2]
 80021bc:	041a      	lsls	r2, r3, #16
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	619a      	str	r2, [r3, #24]
}
 80021c2:	bf00      	nop
 80021c4:	370c      	adds	r7, #12
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr

080021ce <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80021ce:	b480      	push	{r7}
 80021d0:	b085      	sub	sp, #20
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	6078      	str	r0, [r7, #4]
 80021d6:	460b      	mov	r3, r1
 80021d8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	695b      	ldr	r3, [r3, #20]
 80021de:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80021e0:	887a      	ldrh	r2, [r7, #2]
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	4013      	ands	r3, r2
 80021e6:	041a      	lsls	r2, r3, #16
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	43d9      	mvns	r1, r3
 80021ec:	887b      	ldrh	r3, [r7, #2]
 80021ee:	400b      	ands	r3, r1
 80021f0:	431a      	orrs	r2, r3
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	619a      	str	r2, [r3, #24]
}
 80021f6:	bf00      	nop
 80021f8:	3714      	adds	r7, #20
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr
	...

08002204 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b084      	sub	sp, #16
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d101      	bne.n	8002216 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e12b      	b.n	800246e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800221c:	b2db      	uxtb	r3, r3
 800221e:	2b00      	cmp	r3, #0
 8002220:	d106      	bne.n	8002230 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2200      	movs	r2, #0
 8002226:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800222a:	6878      	ldr	r0, [r7, #4]
 800222c:	f7fe fd12 	bl	8000c54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2224      	movs	r2, #36	; 0x24
 8002234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f022 0201 	bic.w	r2, r2, #1
 8002246:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002256:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002266:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002268:	f000 fe38 	bl	8002edc <HAL_RCC_GetPCLK1Freq>
 800226c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	4a81      	ldr	r2, [pc, #516]	; (8002478 <HAL_I2C_Init+0x274>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d807      	bhi.n	8002288 <HAL_I2C_Init+0x84>
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	4a80      	ldr	r2, [pc, #512]	; (800247c <HAL_I2C_Init+0x278>)
 800227c:	4293      	cmp	r3, r2
 800227e:	bf94      	ite	ls
 8002280:	2301      	movls	r3, #1
 8002282:	2300      	movhi	r3, #0
 8002284:	b2db      	uxtb	r3, r3
 8002286:	e006      	b.n	8002296 <HAL_I2C_Init+0x92>
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	4a7d      	ldr	r2, [pc, #500]	; (8002480 <HAL_I2C_Init+0x27c>)
 800228c:	4293      	cmp	r3, r2
 800228e:	bf94      	ite	ls
 8002290:	2301      	movls	r3, #1
 8002292:	2300      	movhi	r3, #0
 8002294:	b2db      	uxtb	r3, r3
 8002296:	2b00      	cmp	r3, #0
 8002298:	d001      	beq.n	800229e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e0e7      	b.n	800246e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	4a78      	ldr	r2, [pc, #480]	; (8002484 <HAL_I2C_Init+0x280>)
 80022a2:	fba2 2303 	umull	r2, r3, r2, r3
 80022a6:	0c9b      	lsrs	r3, r3, #18
 80022a8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	68ba      	ldr	r2, [r7, #8]
 80022ba:	430a      	orrs	r2, r1
 80022bc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	6a1b      	ldr	r3, [r3, #32]
 80022c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	4a6a      	ldr	r2, [pc, #424]	; (8002478 <HAL_I2C_Init+0x274>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d802      	bhi.n	80022d8 <HAL_I2C_Init+0xd4>
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	3301      	adds	r3, #1
 80022d6:	e009      	b.n	80022ec <HAL_I2C_Init+0xe8>
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80022de:	fb02 f303 	mul.w	r3, r2, r3
 80022e2:	4a69      	ldr	r2, [pc, #420]	; (8002488 <HAL_I2C_Init+0x284>)
 80022e4:	fba2 2303 	umull	r2, r3, r2, r3
 80022e8:	099b      	lsrs	r3, r3, #6
 80022ea:	3301      	adds	r3, #1
 80022ec:	687a      	ldr	r2, [r7, #4]
 80022ee:	6812      	ldr	r2, [r2, #0]
 80022f0:	430b      	orrs	r3, r1
 80022f2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	69db      	ldr	r3, [r3, #28]
 80022fa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80022fe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	495c      	ldr	r1, [pc, #368]	; (8002478 <HAL_I2C_Init+0x274>)
 8002308:	428b      	cmp	r3, r1
 800230a:	d819      	bhi.n	8002340 <HAL_I2C_Init+0x13c>
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	1e59      	subs	r1, r3, #1
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	005b      	lsls	r3, r3, #1
 8002316:	fbb1 f3f3 	udiv	r3, r1, r3
 800231a:	1c59      	adds	r1, r3, #1
 800231c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002320:	400b      	ands	r3, r1
 8002322:	2b00      	cmp	r3, #0
 8002324:	d00a      	beq.n	800233c <HAL_I2C_Init+0x138>
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	1e59      	subs	r1, r3, #1
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	005b      	lsls	r3, r3, #1
 8002330:	fbb1 f3f3 	udiv	r3, r1, r3
 8002334:	3301      	adds	r3, #1
 8002336:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800233a:	e051      	b.n	80023e0 <HAL_I2C_Init+0x1dc>
 800233c:	2304      	movs	r3, #4
 800233e:	e04f      	b.n	80023e0 <HAL_I2C_Init+0x1dc>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d111      	bne.n	800236c <HAL_I2C_Init+0x168>
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	1e58      	subs	r0, r3, #1
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6859      	ldr	r1, [r3, #4]
 8002350:	460b      	mov	r3, r1
 8002352:	005b      	lsls	r3, r3, #1
 8002354:	440b      	add	r3, r1
 8002356:	fbb0 f3f3 	udiv	r3, r0, r3
 800235a:	3301      	adds	r3, #1
 800235c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002360:	2b00      	cmp	r3, #0
 8002362:	bf0c      	ite	eq
 8002364:	2301      	moveq	r3, #1
 8002366:	2300      	movne	r3, #0
 8002368:	b2db      	uxtb	r3, r3
 800236a:	e012      	b.n	8002392 <HAL_I2C_Init+0x18e>
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	1e58      	subs	r0, r3, #1
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6859      	ldr	r1, [r3, #4]
 8002374:	460b      	mov	r3, r1
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	440b      	add	r3, r1
 800237a:	0099      	lsls	r1, r3, #2
 800237c:	440b      	add	r3, r1
 800237e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002382:	3301      	adds	r3, #1
 8002384:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002388:	2b00      	cmp	r3, #0
 800238a:	bf0c      	ite	eq
 800238c:	2301      	moveq	r3, #1
 800238e:	2300      	movne	r3, #0
 8002390:	b2db      	uxtb	r3, r3
 8002392:	2b00      	cmp	r3, #0
 8002394:	d001      	beq.n	800239a <HAL_I2C_Init+0x196>
 8002396:	2301      	movs	r3, #1
 8002398:	e022      	b.n	80023e0 <HAL_I2C_Init+0x1dc>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d10e      	bne.n	80023c0 <HAL_I2C_Init+0x1bc>
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	1e58      	subs	r0, r3, #1
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6859      	ldr	r1, [r3, #4]
 80023aa:	460b      	mov	r3, r1
 80023ac:	005b      	lsls	r3, r3, #1
 80023ae:	440b      	add	r3, r1
 80023b0:	fbb0 f3f3 	udiv	r3, r0, r3
 80023b4:	3301      	adds	r3, #1
 80023b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023be:	e00f      	b.n	80023e0 <HAL_I2C_Init+0x1dc>
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	1e58      	subs	r0, r3, #1
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6859      	ldr	r1, [r3, #4]
 80023c8:	460b      	mov	r3, r1
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	440b      	add	r3, r1
 80023ce:	0099      	lsls	r1, r3, #2
 80023d0:	440b      	add	r3, r1
 80023d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80023d6:	3301      	adds	r3, #1
 80023d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80023e0:	6879      	ldr	r1, [r7, #4]
 80023e2:	6809      	ldr	r1, [r1, #0]
 80023e4:	4313      	orrs	r3, r2
 80023e6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	69da      	ldr	r2, [r3, #28]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6a1b      	ldr	r3, [r3, #32]
 80023fa:	431a      	orrs	r2, r3
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	430a      	orrs	r2, r1
 8002402:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800240e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002412:	687a      	ldr	r2, [r7, #4]
 8002414:	6911      	ldr	r1, [r2, #16]
 8002416:	687a      	ldr	r2, [r7, #4]
 8002418:	68d2      	ldr	r2, [r2, #12]
 800241a:	4311      	orrs	r1, r2
 800241c:	687a      	ldr	r2, [r7, #4]
 800241e:	6812      	ldr	r2, [r2, #0]
 8002420:	430b      	orrs	r3, r1
 8002422:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	68db      	ldr	r3, [r3, #12]
 800242a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	695a      	ldr	r2, [r3, #20]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	699b      	ldr	r3, [r3, #24]
 8002436:	431a      	orrs	r2, r3
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	430a      	orrs	r2, r1
 800243e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f042 0201 	orr.w	r2, r2, #1
 800244e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2200      	movs	r2, #0
 8002454:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2220      	movs	r2, #32
 800245a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2200      	movs	r2, #0
 8002462:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2200      	movs	r2, #0
 8002468:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800246c:	2300      	movs	r3, #0
}
 800246e:	4618      	mov	r0, r3
 8002470:	3710      	adds	r7, #16
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	000186a0 	.word	0x000186a0
 800247c:	001e847f 	.word	0x001e847f
 8002480:	003d08ff 	.word	0x003d08ff
 8002484:	431bde83 	.word	0x431bde83
 8002488:	10624dd3 	.word	0x10624dd3

0800248c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b088      	sub	sp, #32
 8002490:	af02      	add	r7, sp, #8
 8002492:	60f8      	str	r0, [r7, #12]
 8002494:	607a      	str	r2, [r7, #4]
 8002496:	461a      	mov	r2, r3
 8002498:	460b      	mov	r3, r1
 800249a:	817b      	strh	r3, [r7, #10]
 800249c:	4613      	mov	r3, r2
 800249e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80024a0:	f7ff f836 	bl	8001510 <HAL_GetTick>
 80024a4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	2b20      	cmp	r3, #32
 80024b0:	f040 80e0 	bne.w	8002674 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	9300      	str	r3, [sp, #0]
 80024b8:	2319      	movs	r3, #25
 80024ba:	2201      	movs	r2, #1
 80024bc:	4970      	ldr	r1, [pc, #448]	; (8002680 <HAL_I2C_Master_Transmit+0x1f4>)
 80024be:	68f8      	ldr	r0, [r7, #12]
 80024c0:	f000 fa92 	bl	80029e8 <I2C_WaitOnFlagUntilTimeout>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d001      	beq.n	80024ce <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80024ca:	2302      	movs	r3, #2
 80024cc:	e0d3      	b.n	8002676 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d101      	bne.n	80024dc <HAL_I2C_Master_Transmit+0x50>
 80024d8:	2302      	movs	r3, #2
 80024da:	e0cc      	b.n	8002676 <HAL_I2C_Master_Transmit+0x1ea>
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	2201      	movs	r2, #1
 80024e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 0301 	and.w	r3, r3, #1
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d007      	beq.n	8002502 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f042 0201 	orr.w	r2, r2, #1
 8002500:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002510:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	2221      	movs	r2, #33	; 0x21
 8002516:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	2210      	movs	r2, #16
 800251e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	2200      	movs	r2, #0
 8002526:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	687a      	ldr	r2, [r7, #4]
 800252c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	893a      	ldrh	r2, [r7, #8]
 8002532:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002538:	b29a      	uxth	r2, r3
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	4a50      	ldr	r2, [pc, #320]	; (8002684 <HAL_I2C_Master_Transmit+0x1f8>)
 8002542:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002544:	8979      	ldrh	r1, [r7, #10]
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	6a3a      	ldr	r2, [r7, #32]
 800254a:	68f8      	ldr	r0, [r7, #12]
 800254c:	f000 f9ca 	bl	80028e4 <I2C_MasterRequestWrite>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d001      	beq.n	800255a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e08d      	b.n	8002676 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800255a:	2300      	movs	r3, #0
 800255c:	613b      	str	r3, [r7, #16]
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	695b      	ldr	r3, [r3, #20]
 8002564:	613b      	str	r3, [r7, #16]
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	699b      	ldr	r3, [r3, #24]
 800256c:	613b      	str	r3, [r7, #16]
 800256e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002570:	e066      	b.n	8002640 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002572:	697a      	ldr	r2, [r7, #20]
 8002574:	6a39      	ldr	r1, [r7, #32]
 8002576:	68f8      	ldr	r0, [r7, #12]
 8002578:	f000 fb0c 	bl	8002b94 <I2C_WaitOnTXEFlagUntilTimeout>
 800257c:	4603      	mov	r3, r0
 800257e:	2b00      	cmp	r3, #0
 8002580:	d00d      	beq.n	800259e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002586:	2b04      	cmp	r3, #4
 8002588:	d107      	bne.n	800259a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002598:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	e06b      	b.n	8002676 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a2:	781a      	ldrb	r2, [r3, #0]
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ae:	1c5a      	adds	r2, r3, #1
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025b8:	b29b      	uxth	r3, r3
 80025ba:	3b01      	subs	r3, #1
 80025bc:	b29a      	uxth	r2, r3
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025c6:	3b01      	subs	r3, #1
 80025c8:	b29a      	uxth	r2, r3
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	695b      	ldr	r3, [r3, #20]
 80025d4:	f003 0304 	and.w	r3, r3, #4
 80025d8:	2b04      	cmp	r3, #4
 80025da:	d11b      	bne.n	8002614 <HAL_I2C_Master_Transmit+0x188>
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d017      	beq.n	8002614 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e8:	781a      	ldrb	r2, [r3, #0]
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f4:	1c5a      	adds	r2, r3, #1
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025fe:	b29b      	uxth	r3, r3
 8002600:	3b01      	subs	r3, #1
 8002602:	b29a      	uxth	r2, r3
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800260c:	3b01      	subs	r3, #1
 800260e:	b29a      	uxth	r2, r3
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002614:	697a      	ldr	r2, [r7, #20]
 8002616:	6a39      	ldr	r1, [r7, #32]
 8002618:	68f8      	ldr	r0, [r7, #12]
 800261a:	f000 fafc 	bl	8002c16 <I2C_WaitOnBTFFlagUntilTimeout>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	d00d      	beq.n	8002640 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002628:	2b04      	cmp	r3, #4
 800262a:	d107      	bne.n	800263c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800263a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	e01a      	b.n	8002676 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002644:	2b00      	cmp	r3, #0
 8002646:	d194      	bne.n	8002572 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002656:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	2220      	movs	r2, #32
 800265c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	2200      	movs	r2, #0
 8002664:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	2200      	movs	r2, #0
 800266c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002670:	2300      	movs	r3, #0
 8002672:	e000      	b.n	8002676 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002674:	2302      	movs	r3, #2
  }
}
 8002676:	4618      	mov	r0, r3
 8002678:	3718      	adds	r7, #24
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	00100002 	.word	0x00100002
 8002684:	ffff0000 	.word	0xffff0000

08002688 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b08a      	sub	sp, #40	; 0x28
 800268c:	af02      	add	r7, sp, #8
 800268e:	60f8      	str	r0, [r7, #12]
 8002690:	607a      	str	r2, [r7, #4]
 8002692:	603b      	str	r3, [r7, #0]
 8002694:	460b      	mov	r3, r1
 8002696:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002698:	f7fe ff3a 	bl	8001510 <HAL_GetTick>
 800269c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800269e:	2300      	movs	r3, #0
 80026a0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	2b20      	cmp	r3, #32
 80026ac:	f040 8111 	bne.w	80028d2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80026b0:	69fb      	ldr	r3, [r7, #28]
 80026b2:	9300      	str	r3, [sp, #0]
 80026b4:	2319      	movs	r3, #25
 80026b6:	2201      	movs	r2, #1
 80026b8:	4988      	ldr	r1, [pc, #544]	; (80028dc <HAL_I2C_IsDeviceReady+0x254>)
 80026ba:	68f8      	ldr	r0, [r7, #12]
 80026bc:	f000 f994 	bl	80029e8 <I2C_WaitOnFlagUntilTimeout>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d001      	beq.n	80026ca <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80026c6:	2302      	movs	r3, #2
 80026c8:	e104      	b.n	80028d4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d101      	bne.n	80026d8 <HAL_I2C_IsDeviceReady+0x50>
 80026d4:	2302      	movs	r3, #2
 80026d6:	e0fd      	b.n	80028d4 <HAL_I2C_IsDeviceReady+0x24c>
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2201      	movs	r2, #1
 80026dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 0301 	and.w	r3, r3, #1
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d007      	beq.n	80026fe <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f042 0201 	orr.w	r2, r2, #1
 80026fc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800270c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	2224      	movs	r2, #36	; 0x24
 8002712:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	2200      	movs	r2, #0
 800271a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	4a70      	ldr	r2, [pc, #448]	; (80028e0 <HAL_I2C_IsDeviceReady+0x258>)
 8002720:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002730:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	9300      	str	r3, [sp, #0]
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	2200      	movs	r2, #0
 800273a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800273e:	68f8      	ldr	r0, [r7, #12]
 8002740:	f000 f952 	bl	80029e8 <I2C_WaitOnFlagUntilTimeout>
 8002744:	4603      	mov	r3, r0
 8002746:	2b00      	cmp	r3, #0
 8002748:	d00d      	beq.n	8002766 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002754:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002758:	d103      	bne.n	8002762 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002760:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002762:	2303      	movs	r3, #3
 8002764:	e0b6      	b.n	80028d4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002766:	897b      	ldrh	r3, [r7, #10]
 8002768:	b2db      	uxtb	r3, r3
 800276a:	461a      	mov	r2, r3
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002774:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002776:	f7fe fecb 	bl	8001510 <HAL_GetTick>
 800277a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	695b      	ldr	r3, [r3, #20]
 8002782:	f003 0302 	and.w	r3, r3, #2
 8002786:	2b02      	cmp	r3, #2
 8002788:	bf0c      	ite	eq
 800278a:	2301      	moveq	r3, #1
 800278c:	2300      	movne	r3, #0
 800278e:	b2db      	uxtb	r3, r3
 8002790:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	695b      	ldr	r3, [r3, #20]
 8002798:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800279c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027a0:	bf0c      	ite	eq
 80027a2:	2301      	moveq	r3, #1
 80027a4:	2300      	movne	r3, #0
 80027a6:	b2db      	uxtb	r3, r3
 80027a8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80027aa:	e025      	b.n	80027f8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80027ac:	f7fe feb0 	bl	8001510 <HAL_GetTick>
 80027b0:	4602      	mov	r2, r0
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	1ad3      	subs	r3, r2, r3
 80027b6:	683a      	ldr	r2, [r7, #0]
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d302      	bcc.n	80027c2 <HAL_I2C_IsDeviceReady+0x13a>
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d103      	bne.n	80027ca <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	22a0      	movs	r2, #160	; 0xa0
 80027c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	695b      	ldr	r3, [r3, #20]
 80027d0:	f003 0302 	and.w	r3, r3, #2
 80027d4:	2b02      	cmp	r3, #2
 80027d6:	bf0c      	ite	eq
 80027d8:	2301      	moveq	r3, #1
 80027da:	2300      	movne	r3, #0
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	695b      	ldr	r3, [r3, #20]
 80027e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027ee:	bf0c      	ite	eq
 80027f0:	2301      	moveq	r3, #1
 80027f2:	2300      	movne	r3, #0
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027fe:	b2db      	uxtb	r3, r3
 8002800:	2ba0      	cmp	r3, #160	; 0xa0
 8002802:	d005      	beq.n	8002810 <HAL_I2C_IsDeviceReady+0x188>
 8002804:	7dfb      	ldrb	r3, [r7, #23]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d102      	bne.n	8002810 <HAL_I2C_IsDeviceReady+0x188>
 800280a:	7dbb      	ldrb	r3, [r7, #22]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d0cd      	beq.n	80027ac <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2220      	movs	r2, #32
 8002814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	695b      	ldr	r3, [r3, #20]
 800281e:	f003 0302 	and.w	r3, r3, #2
 8002822:	2b02      	cmp	r3, #2
 8002824:	d129      	bne.n	800287a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002834:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002836:	2300      	movs	r3, #0
 8002838:	613b      	str	r3, [r7, #16]
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	695b      	ldr	r3, [r3, #20]
 8002840:	613b      	str	r3, [r7, #16]
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	699b      	ldr	r3, [r3, #24]
 8002848:	613b      	str	r3, [r7, #16]
 800284a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	9300      	str	r3, [sp, #0]
 8002850:	2319      	movs	r3, #25
 8002852:	2201      	movs	r2, #1
 8002854:	4921      	ldr	r1, [pc, #132]	; (80028dc <HAL_I2C_IsDeviceReady+0x254>)
 8002856:	68f8      	ldr	r0, [r7, #12]
 8002858:	f000 f8c6 	bl	80029e8 <I2C_WaitOnFlagUntilTimeout>
 800285c:	4603      	mov	r3, r0
 800285e:	2b00      	cmp	r3, #0
 8002860:	d001      	beq.n	8002866 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e036      	b.n	80028d4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2220      	movs	r2, #32
 800286a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2200      	movs	r2, #0
 8002872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002876:	2300      	movs	r3, #0
 8002878:	e02c      	b.n	80028d4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002888:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002892:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	9300      	str	r3, [sp, #0]
 8002898:	2319      	movs	r3, #25
 800289a:	2201      	movs	r2, #1
 800289c:	490f      	ldr	r1, [pc, #60]	; (80028dc <HAL_I2C_IsDeviceReady+0x254>)
 800289e:	68f8      	ldr	r0, [r7, #12]
 80028a0:	f000 f8a2 	bl	80029e8 <I2C_WaitOnFlagUntilTimeout>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d001      	beq.n	80028ae <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e012      	b.n	80028d4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80028ae:	69bb      	ldr	r3, [r7, #24]
 80028b0:	3301      	adds	r3, #1
 80028b2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80028b4:	69ba      	ldr	r2, [r7, #24]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	429a      	cmp	r2, r3
 80028ba:	f4ff af32 	bcc.w	8002722 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2220      	movs	r2, #32
 80028c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2200      	movs	r2, #0
 80028ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e000      	b.n	80028d4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80028d2:	2302      	movs	r3, #2
  }
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	3720      	adds	r7, #32
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	00100002 	.word	0x00100002
 80028e0:	ffff0000 	.word	0xffff0000

080028e4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b088      	sub	sp, #32
 80028e8:	af02      	add	r7, sp, #8
 80028ea:	60f8      	str	r0, [r7, #12]
 80028ec:	607a      	str	r2, [r7, #4]
 80028ee:	603b      	str	r3, [r7, #0]
 80028f0:	460b      	mov	r3, r1
 80028f2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028f8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	2b08      	cmp	r3, #8
 80028fe:	d006      	beq.n	800290e <I2C_MasterRequestWrite+0x2a>
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	2b01      	cmp	r3, #1
 8002904:	d003      	beq.n	800290e <I2C_MasterRequestWrite+0x2a>
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800290c:	d108      	bne.n	8002920 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800291c:	601a      	str	r2, [r3, #0]
 800291e:	e00b      	b.n	8002938 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002924:	2b12      	cmp	r3, #18
 8002926:	d107      	bne.n	8002938 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002936:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	9300      	str	r3, [sp, #0]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2200      	movs	r2, #0
 8002940:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002944:	68f8      	ldr	r0, [r7, #12]
 8002946:	f000 f84f 	bl	80029e8 <I2C_WaitOnFlagUntilTimeout>
 800294a:	4603      	mov	r3, r0
 800294c:	2b00      	cmp	r3, #0
 800294e:	d00d      	beq.n	800296c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800295a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800295e:	d103      	bne.n	8002968 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002966:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002968:	2303      	movs	r3, #3
 800296a:	e035      	b.n	80029d8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	691b      	ldr	r3, [r3, #16]
 8002970:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002974:	d108      	bne.n	8002988 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002976:	897b      	ldrh	r3, [r7, #10]
 8002978:	b2db      	uxtb	r3, r3
 800297a:	461a      	mov	r2, r3
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002984:	611a      	str	r2, [r3, #16]
 8002986:	e01b      	b.n	80029c0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002988:	897b      	ldrh	r3, [r7, #10]
 800298a:	11db      	asrs	r3, r3, #7
 800298c:	b2db      	uxtb	r3, r3
 800298e:	f003 0306 	and.w	r3, r3, #6
 8002992:	b2db      	uxtb	r3, r3
 8002994:	f063 030f 	orn	r3, r3, #15
 8002998:	b2da      	uxtb	r2, r3
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	687a      	ldr	r2, [r7, #4]
 80029a4:	490e      	ldr	r1, [pc, #56]	; (80029e0 <I2C_MasterRequestWrite+0xfc>)
 80029a6:	68f8      	ldr	r0, [r7, #12]
 80029a8:	f000 f875 	bl	8002a96 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80029ac:	4603      	mov	r3, r0
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d001      	beq.n	80029b6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e010      	b.n	80029d8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80029b6:	897b      	ldrh	r3, [r7, #10]
 80029b8:	b2da      	uxtb	r2, r3
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	4907      	ldr	r1, [pc, #28]	; (80029e4 <I2C_MasterRequestWrite+0x100>)
 80029c6:	68f8      	ldr	r0, [r7, #12]
 80029c8:	f000 f865 	bl	8002a96 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80029cc:	4603      	mov	r3, r0
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d001      	beq.n	80029d6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e000      	b.n	80029d8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80029d6:	2300      	movs	r3, #0
}
 80029d8:	4618      	mov	r0, r3
 80029da:	3718      	adds	r7, #24
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	00010008 	.word	0x00010008
 80029e4:	00010002 	.word	0x00010002

080029e8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b084      	sub	sp, #16
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	60f8      	str	r0, [r7, #12]
 80029f0:	60b9      	str	r1, [r7, #8]
 80029f2:	603b      	str	r3, [r7, #0]
 80029f4:	4613      	mov	r3, r2
 80029f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029f8:	e025      	b.n	8002a46 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a00:	d021      	beq.n	8002a46 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a02:	f7fe fd85 	bl	8001510 <HAL_GetTick>
 8002a06:	4602      	mov	r2, r0
 8002a08:	69bb      	ldr	r3, [r7, #24]
 8002a0a:	1ad3      	subs	r3, r2, r3
 8002a0c:	683a      	ldr	r2, [r7, #0]
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	d302      	bcc.n	8002a18 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d116      	bne.n	8002a46 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2220      	movs	r2, #32
 8002a22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a32:	f043 0220 	orr.w	r2, r3, #32
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e023      	b.n	8002a8e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	0c1b      	lsrs	r3, r3, #16
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d10d      	bne.n	8002a6c <I2C_WaitOnFlagUntilTimeout+0x84>
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	695b      	ldr	r3, [r3, #20]
 8002a56:	43da      	mvns	r2, r3
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	b29b      	uxth	r3, r3
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	bf0c      	ite	eq
 8002a62:	2301      	moveq	r3, #1
 8002a64:	2300      	movne	r3, #0
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	461a      	mov	r2, r3
 8002a6a:	e00c      	b.n	8002a86 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	699b      	ldr	r3, [r3, #24]
 8002a72:	43da      	mvns	r2, r3
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	4013      	ands	r3, r2
 8002a78:	b29b      	uxth	r3, r3
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	bf0c      	ite	eq
 8002a7e:	2301      	moveq	r3, #1
 8002a80:	2300      	movne	r3, #0
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	461a      	mov	r2, r3
 8002a86:	79fb      	ldrb	r3, [r7, #7]
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d0b6      	beq.n	80029fa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002a8c:	2300      	movs	r3, #0
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3710      	adds	r7, #16
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}

08002a96 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002a96:	b580      	push	{r7, lr}
 8002a98:	b084      	sub	sp, #16
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	60f8      	str	r0, [r7, #12]
 8002a9e:	60b9      	str	r1, [r7, #8]
 8002aa0:	607a      	str	r2, [r7, #4]
 8002aa2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002aa4:	e051      	b.n	8002b4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	695b      	ldr	r3, [r3, #20]
 8002aac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ab0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ab4:	d123      	bne.n	8002afe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ac4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002ace:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2220      	movs	r2, #32
 8002ada:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aea:	f043 0204 	orr.w	r2, r3, #4
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2200      	movs	r2, #0
 8002af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e046      	b.n	8002b8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b04:	d021      	beq.n	8002b4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b06:	f7fe fd03 	bl	8001510 <HAL_GetTick>
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	1ad3      	subs	r3, r2, r3
 8002b10:	687a      	ldr	r2, [r7, #4]
 8002b12:	429a      	cmp	r2, r3
 8002b14:	d302      	bcc.n	8002b1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d116      	bne.n	8002b4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2220      	movs	r2, #32
 8002b26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b36:	f043 0220 	orr.w	r2, r3, #32
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2200      	movs	r2, #0
 8002b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e020      	b.n	8002b8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	0c1b      	lsrs	r3, r3, #16
 8002b4e:	b2db      	uxtb	r3, r3
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	d10c      	bne.n	8002b6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	695b      	ldr	r3, [r3, #20]
 8002b5a:	43da      	mvns	r2, r3
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	4013      	ands	r3, r2
 8002b60:	b29b      	uxth	r3, r3
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	bf14      	ite	ne
 8002b66:	2301      	movne	r3, #1
 8002b68:	2300      	moveq	r3, #0
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	e00b      	b.n	8002b86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	699b      	ldr	r3, [r3, #24]
 8002b74:	43da      	mvns	r2, r3
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	4013      	ands	r3, r2
 8002b7a:	b29b      	uxth	r3, r3
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	bf14      	ite	ne
 8002b80:	2301      	movne	r3, #1
 8002b82:	2300      	moveq	r3, #0
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d18d      	bne.n	8002aa6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002b8a:	2300      	movs	r3, #0
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3710      	adds	r7, #16
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}

08002b94 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b084      	sub	sp, #16
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	60f8      	str	r0, [r7, #12]
 8002b9c:	60b9      	str	r1, [r7, #8]
 8002b9e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ba0:	e02d      	b.n	8002bfe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002ba2:	68f8      	ldr	r0, [r7, #12]
 8002ba4:	f000 f878 	bl	8002c98 <I2C_IsAcknowledgeFailed>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d001      	beq.n	8002bb2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e02d      	b.n	8002c0e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002bb8:	d021      	beq.n	8002bfe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bba:	f7fe fca9 	bl	8001510 <HAL_GetTick>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	1ad3      	subs	r3, r2, r3
 8002bc4:	68ba      	ldr	r2, [r7, #8]
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	d302      	bcc.n	8002bd0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d116      	bne.n	8002bfe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2220      	movs	r2, #32
 8002bda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2200      	movs	r2, #0
 8002be2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bea:	f043 0220 	orr.w	r2, r3, #32
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e007      	b.n	8002c0e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	695b      	ldr	r3, [r3, #20]
 8002c04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c08:	2b80      	cmp	r3, #128	; 0x80
 8002c0a:	d1ca      	bne.n	8002ba2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002c0c:	2300      	movs	r3, #0
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3710      	adds	r7, #16
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}

08002c16 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c16:	b580      	push	{r7, lr}
 8002c18:	b084      	sub	sp, #16
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	60f8      	str	r0, [r7, #12]
 8002c1e:	60b9      	str	r1, [r7, #8]
 8002c20:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002c22:	e02d      	b.n	8002c80 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002c24:	68f8      	ldr	r0, [r7, #12]
 8002c26:	f000 f837 	bl	8002c98 <I2C_IsAcknowledgeFailed>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d001      	beq.n	8002c34 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	e02d      	b.n	8002c90 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c3a:	d021      	beq.n	8002c80 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c3c:	f7fe fc68 	bl	8001510 <HAL_GetTick>
 8002c40:	4602      	mov	r2, r0
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	68ba      	ldr	r2, [r7, #8]
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d302      	bcc.n	8002c52 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d116      	bne.n	8002c80 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	2200      	movs	r2, #0
 8002c56:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2220      	movs	r2, #32
 8002c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	2200      	movs	r2, #0
 8002c64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6c:	f043 0220 	orr.w	r2, r3, #32
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2200      	movs	r2, #0
 8002c78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e007      	b.n	8002c90 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	695b      	ldr	r3, [r3, #20]
 8002c86:	f003 0304 	and.w	r3, r3, #4
 8002c8a:	2b04      	cmp	r3, #4
 8002c8c:	d1ca      	bne.n	8002c24 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002c8e:	2300      	movs	r3, #0
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	3710      	adds	r7, #16
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}

08002c98 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b083      	sub	sp, #12
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	695b      	ldr	r3, [r3, #20]
 8002ca6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002caa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cae:	d11b      	bne.n	8002ce8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002cb8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2220      	movs	r2, #32
 8002cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd4:	f043 0204 	orr.w	r2, r3, #4
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e000      	b.n	8002cea <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002ce8:	2300      	movs	r3, #0
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	370c      	adds	r7, #12
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf4:	4770      	bx	lr
	...

08002cf8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b084      	sub	sp, #16
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
 8002d00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d101      	bne.n	8002d0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	e0cc      	b.n	8002ea6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d0c:	4b68      	ldr	r3, [pc, #416]	; (8002eb0 <HAL_RCC_ClockConfig+0x1b8>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 030f 	and.w	r3, r3, #15
 8002d14:	683a      	ldr	r2, [r7, #0]
 8002d16:	429a      	cmp	r2, r3
 8002d18:	d90c      	bls.n	8002d34 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d1a:	4b65      	ldr	r3, [pc, #404]	; (8002eb0 <HAL_RCC_ClockConfig+0x1b8>)
 8002d1c:	683a      	ldr	r2, [r7, #0]
 8002d1e:	b2d2      	uxtb	r2, r2
 8002d20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d22:	4b63      	ldr	r3, [pc, #396]	; (8002eb0 <HAL_RCC_ClockConfig+0x1b8>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 030f 	and.w	r3, r3, #15
 8002d2a:	683a      	ldr	r2, [r7, #0]
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d001      	beq.n	8002d34 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	e0b8      	b.n	8002ea6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f003 0302 	and.w	r3, r3, #2
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d020      	beq.n	8002d82 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 0304 	and.w	r3, r3, #4
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d005      	beq.n	8002d58 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d4c:	4b59      	ldr	r3, [pc, #356]	; (8002eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	4a58      	ldr	r2, [pc, #352]	; (8002eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d52:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002d56:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 0308 	and.w	r3, r3, #8
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d005      	beq.n	8002d70 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d64:	4b53      	ldr	r3, [pc, #332]	; (8002eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	4a52      	ldr	r2, [pc, #328]	; (8002eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d6a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002d6e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d70:	4b50      	ldr	r3, [pc, #320]	; (8002eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	494d      	ldr	r1, [pc, #308]	; (8002eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 0301 	and.w	r3, r3, #1
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d044      	beq.n	8002e18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d107      	bne.n	8002da6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d96:	4b47      	ldr	r3, [pc, #284]	; (8002eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d119      	bne.n	8002dd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e07f      	b.n	8002ea6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	2b02      	cmp	r3, #2
 8002dac:	d003      	beq.n	8002db6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002db2:	2b03      	cmp	r3, #3
 8002db4:	d107      	bne.n	8002dc6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002db6:	4b3f      	ldr	r3, [pc, #252]	; (8002eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d109      	bne.n	8002dd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e06f      	b.n	8002ea6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dc6:	4b3b      	ldr	r3, [pc, #236]	; (8002eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 0302 	and.w	r3, r3, #2
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d101      	bne.n	8002dd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e067      	b.n	8002ea6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002dd6:	4b37      	ldr	r3, [pc, #220]	; (8002eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	f023 0203 	bic.w	r2, r3, #3
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	4934      	ldr	r1, [pc, #208]	; (8002eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002de4:	4313      	orrs	r3, r2
 8002de6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002de8:	f7fe fb92 	bl	8001510 <HAL_GetTick>
 8002dec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dee:	e00a      	b.n	8002e06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002df0:	f7fe fb8e 	bl	8001510 <HAL_GetTick>
 8002df4:	4602      	mov	r2, r0
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d901      	bls.n	8002e06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e02:	2303      	movs	r3, #3
 8002e04:	e04f      	b.n	8002ea6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e06:	4b2b      	ldr	r3, [pc, #172]	; (8002eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	f003 020c 	and.w	r2, r3, #12
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d1eb      	bne.n	8002df0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e18:	4b25      	ldr	r3, [pc, #148]	; (8002eb0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 030f 	and.w	r3, r3, #15
 8002e20:	683a      	ldr	r2, [r7, #0]
 8002e22:	429a      	cmp	r2, r3
 8002e24:	d20c      	bcs.n	8002e40 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e26:	4b22      	ldr	r3, [pc, #136]	; (8002eb0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e28:	683a      	ldr	r2, [r7, #0]
 8002e2a:	b2d2      	uxtb	r2, r2
 8002e2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e2e:	4b20      	ldr	r3, [pc, #128]	; (8002eb0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 030f 	and.w	r3, r3, #15
 8002e36:	683a      	ldr	r2, [r7, #0]
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d001      	beq.n	8002e40 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e032      	b.n	8002ea6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 0304 	and.w	r3, r3, #4
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d008      	beq.n	8002e5e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e4c:	4b19      	ldr	r3, [pc, #100]	; (8002eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	4916      	ldr	r1, [pc, #88]	; (8002eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 0308 	and.w	r3, r3, #8
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d009      	beq.n	8002e7e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e6a:	4b12      	ldr	r3, [pc, #72]	; (8002eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	691b      	ldr	r3, [r3, #16]
 8002e76:	00db      	lsls	r3, r3, #3
 8002e78:	490e      	ldr	r1, [pc, #56]	; (8002eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e7e:	f000 f855 	bl	8002f2c <HAL_RCC_GetSysClockFreq>
 8002e82:	4602      	mov	r2, r0
 8002e84:	4b0b      	ldr	r3, [pc, #44]	; (8002eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	091b      	lsrs	r3, r3, #4
 8002e8a:	f003 030f 	and.w	r3, r3, #15
 8002e8e:	490a      	ldr	r1, [pc, #40]	; (8002eb8 <HAL_RCC_ClockConfig+0x1c0>)
 8002e90:	5ccb      	ldrb	r3, [r1, r3]
 8002e92:	fa22 f303 	lsr.w	r3, r2, r3
 8002e96:	4a09      	ldr	r2, [pc, #36]	; (8002ebc <HAL_RCC_ClockConfig+0x1c4>)
 8002e98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002e9a:	4b09      	ldr	r3, [pc, #36]	; (8002ec0 <HAL_RCC_ClockConfig+0x1c8>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f7fe faf2 	bl	8001488 <HAL_InitTick>

  return HAL_OK;
 8002ea4:	2300      	movs	r3, #0
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3710      	adds	r7, #16
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	40023c00 	.word	0x40023c00
 8002eb4:	40023800 	.word	0x40023800
 8002eb8:	08006cac 	.word	0x08006cac
 8002ebc:	20000010 	.word	0x20000010
 8002ec0:	20000014 	.word	0x20000014

08002ec4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ec8:	4b03      	ldr	r3, [pc, #12]	; (8002ed8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002eca:	681b      	ldr	r3, [r3, #0]
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed4:	4770      	bx	lr
 8002ed6:	bf00      	nop
 8002ed8:	20000010 	.word	0x20000010

08002edc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002ee0:	f7ff fff0 	bl	8002ec4 <HAL_RCC_GetHCLKFreq>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	4b05      	ldr	r3, [pc, #20]	; (8002efc <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	0a9b      	lsrs	r3, r3, #10
 8002eec:	f003 0307 	and.w	r3, r3, #7
 8002ef0:	4903      	ldr	r1, [pc, #12]	; (8002f00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ef2:	5ccb      	ldrb	r3, [r1, r3]
 8002ef4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	bd80      	pop	{r7, pc}
 8002efc:	40023800 	.word	0x40023800
 8002f00:	08006cbc 	.word	0x08006cbc

08002f04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002f08:	f7ff ffdc 	bl	8002ec4 <HAL_RCC_GetHCLKFreq>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	4b05      	ldr	r3, [pc, #20]	; (8002f24 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	0b5b      	lsrs	r3, r3, #13
 8002f14:	f003 0307 	and.w	r3, r3, #7
 8002f18:	4903      	ldr	r1, [pc, #12]	; (8002f28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f1a:	5ccb      	ldrb	r3, [r1, r3]
 8002f1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	bd80      	pop	{r7, pc}
 8002f24:	40023800 	.word	0x40023800
 8002f28:	08006cbc 	.word	0x08006cbc

08002f2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f30:	b0ae      	sub	sp, #184	; 0xb8
 8002f32:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002f34:	2300      	movs	r3, #0
 8002f36:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002f40:	2300      	movs	r3, #0
 8002f42:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002f46:	2300      	movs	r3, #0
 8002f48:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f52:	4bcb      	ldr	r3, [pc, #812]	; (8003280 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	f003 030c 	and.w	r3, r3, #12
 8002f5a:	2b0c      	cmp	r3, #12
 8002f5c:	f200 8206 	bhi.w	800336c <HAL_RCC_GetSysClockFreq+0x440>
 8002f60:	a201      	add	r2, pc, #4	; (adr r2, 8002f68 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002f62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f66:	bf00      	nop
 8002f68:	08002f9d 	.word	0x08002f9d
 8002f6c:	0800336d 	.word	0x0800336d
 8002f70:	0800336d 	.word	0x0800336d
 8002f74:	0800336d 	.word	0x0800336d
 8002f78:	08002fa5 	.word	0x08002fa5
 8002f7c:	0800336d 	.word	0x0800336d
 8002f80:	0800336d 	.word	0x0800336d
 8002f84:	0800336d 	.word	0x0800336d
 8002f88:	08002fad 	.word	0x08002fad
 8002f8c:	0800336d 	.word	0x0800336d
 8002f90:	0800336d 	.word	0x0800336d
 8002f94:	0800336d 	.word	0x0800336d
 8002f98:	0800319d 	.word	0x0800319d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f9c:	4bb9      	ldr	r3, [pc, #740]	; (8003284 <HAL_RCC_GetSysClockFreq+0x358>)
 8002f9e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002fa2:	e1e7      	b.n	8003374 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002fa4:	4bb8      	ldr	r3, [pc, #736]	; (8003288 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002fa6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002faa:	e1e3      	b.n	8003374 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002fac:	4bb4      	ldr	r3, [pc, #720]	; (8003280 <HAL_RCC_GetSysClockFreq+0x354>)
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002fb4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002fb8:	4bb1      	ldr	r3, [pc, #708]	; (8003280 <HAL_RCC_GetSysClockFreq+0x354>)
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d071      	beq.n	80030a8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fc4:	4bae      	ldr	r3, [pc, #696]	; (8003280 <HAL_RCC_GetSysClockFreq+0x354>)
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	099b      	lsrs	r3, r3, #6
 8002fca:	2200      	movs	r2, #0
 8002fcc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002fd0:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002fd4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002fd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fdc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002fe6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002fea:	4622      	mov	r2, r4
 8002fec:	462b      	mov	r3, r5
 8002fee:	f04f 0000 	mov.w	r0, #0
 8002ff2:	f04f 0100 	mov.w	r1, #0
 8002ff6:	0159      	lsls	r1, r3, #5
 8002ff8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ffc:	0150      	lsls	r0, r2, #5
 8002ffe:	4602      	mov	r2, r0
 8003000:	460b      	mov	r3, r1
 8003002:	4621      	mov	r1, r4
 8003004:	1a51      	subs	r1, r2, r1
 8003006:	6439      	str	r1, [r7, #64]	; 0x40
 8003008:	4629      	mov	r1, r5
 800300a:	eb63 0301 	sbc.w	r3, r3, r1
 800300e:	647b      	str	r3, [r7, #68]	; 0x44
 8003010:	f04f 0200 	mov.w	r2, #0
 8003014:	f04f 0300 	mov.w	r3, #0
 8003018:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 800301c:	4649      	mov	r1, r9
 800301e:	018b      	lsls	r3, r1, #6
 8003020:	4641      	mov	r1, r8
 8003022:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003026:	4641      	mov	r1, r8
 8003028:	018a      	lsls	r2, r1, #6
 800302a:	4641      	mov	r1, r8
 800302c:	1a51      	subs	r1, r2, r1
 800302e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003030:	4649      	mov	r1, r9
 8003032:	eb63 0301 	sbc.w	r3, r3, r1
 8003036:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003038:	f04f 0200 	mov.w	r2, #0
 800303c:	f04f 0300 	mov.w	r3, #0
 8003040:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8003044:	4649      	mov	r1, r9
 8003046:	00cb      	lsls	r3, r1, #3
 8003048:	4641      	mov	r1, r8
 800304a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800304e:	4641      	mov	r1, r8
 8003050:	00ca      	lsls	r2, r1, #3
 8003052:	4610      	mov	r0, r2
 8003054:	4619      	mov	r1, r3
 8003056:	4603      	mov	r3, r0
 8003058:	4622      	mov	r2, r4
 800305a:	189b      	adds	r3, r3, r2
 800305c:	633b      	str	r3, [r7, #48]	; 0x30
 800305e:	462b      	mov	r3, r5
 8003060:	460a      	mov	r2, r1
 8003062:	eb42 0303 	adc.w	r3, r2, r3
 8003066:	637b      	str	r3, [r7, #52]	; 0x34
 8003068:	f04f 0200 	mov.w	r2, #0
 800306c:	f04f 0300 	mov.w	r3, #0
 8003070:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003074:	4629      	mov	r1, r5
 8003076:	024b      	lsls	r3, r1, #9
 8003078:	4621      	mov	r1, r4
 800307a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800307e:	4621      	mov	r1, r4
 8003080:	024a      	lsls	r2, r1, #9
 8003082:	4610      	mov	r0, r2
 8003084:	4619      	mov	r1, r3
 8003086:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800308a:	2200      	movs	r2, #0
 800308c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003090:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003094:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003098:	f7fd f90a 	bl	80002b0 <__aeabi_uldivmod>
 800309c:	4602      	mov	r2, r0
 800309e:	460b      	mov	r3, r1
 80030a0:	4613      	mov	r3, r2
 80030a2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80030a6:	e067      	b.n	8003178 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030a8:	4b75      	ldr	r3, [pc, #468]	; (8003280 <HAL_RCC_GetSysClockFreq+0x354>)
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	099b      	lsrs	r3, r3, #6
 80030ae:	2200      	movs	r2, #0
 80030b0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80030b4:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80030b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80030bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030c0:	67bb      	str	r3, [r7, #120]	; 0x78
 80030c2:	2300      	movs	r3, #0
 80030c4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80030c6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80030ca:	4622      	mov	r2, r4
 80030cc:	462b      	mov	r3, r5
 80030ce:	f04f 0000 	mov.w	r0, #0
 80030d2:	f04f 0100 	mov.w	r1, #0
 80030d6:	0159      	lsls	r1, r3, #5
 80030d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030dc:	0150      	lsls	r0, r2, #5
 80030de:	4602      	mov	r2, r0
 80030e0:	460b      	mov	r3, r1
 80030e2:	4621      	mov	r1, r4
 80030e4:	1a51      	subs	r1, r2, r1
 80030e6:	62b9      	str	r1, [r7, #40]	; 0x28
 80030e8:	4629      	mov	r1, r5
 80030ea:	eb63 0301 	sbc.w	r3, r3, r1
 80030ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030f0:	f04f 0200 	mov.w	r2, #0
 80030f4:	f04f 0300 	mov.w	r3, #0
 80030f8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80030fc:	4649      	mov	r1, r9
 80030fe:	018b      	lsls	r3, r1, #6
 8003100:	4641      	mov	r1, r8
 8003102:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003106:	4641      	mov	r1, r8
 8003108:	018a      	lsls	r2, r1, #6
 800310a:	4641      	mov	r1, r8
 800310c:	ebb2 0a01 	subs.w	sl, r2, r1
 8003110:	4649      	mov	r1, r9
 8003112:	eb63 0b01 	sbc.w	fp, r3, r1
 8003116:	f04f 0200 	mov.w	r2, #0
 800311a:	f04f 0300 	mov.w	r3, #0
 800311e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003122:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003126:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800312a:	4692      	mov	sl, r2
 800312c:	469b      	mov	fp, r3
 800312e:	4623      	mov	r3, r4
 8003130:	eb1a 0303 	adds.w	r3, sl, r3
 8003134:	623b      	str	r3, [r7, #32]
 8003136:	462b      	mov	r3, r5
 8003138:	eb4b 0303 	adc.w	r3, fp, r3
 800313c:	627b      	str	r3, [r7, #36]	; 0x24
 800313e:	f04f 0200 	mov.w	r2, #0
 8003142:	f04f 0300 	mov.w	r3, #0
 8003146:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800314a:	4629      	mov	r1, r5
 800314c:	028b      	lsls	r3, r1, #10
 800314e:	4621      	mov	r1, r4
 8003150:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003154:	4621      	mov	r1, r4
 8003156:	028a      	lsls	r2, r1, #10
 8003158:	4610      	mov	r0, r2
 800315a:	4619      	mov	r1, r3
 800315c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003160:	2200      	movs	r2, #0
 8003162:	673b      	str	r3, [r7, #112]	; 0x70
 8003164:	677a      	str	r2, [r7, #116]	; 0x74
 8003166:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800316a:	f7fd f8a1 	bl	80002b0 <__aeabi_uldivmod>
 800316e:	4602      	mov	r2, r0
 8003170:	460b      	mov	r3, r1
 8003172:	4613      	mov	r3, r2
 8003174:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003178:	4b41      	ldr	r3, [pc, #260]	; (8003280 <HAL_RCC_GetSysClockFreq+0x354>)
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	0c1b      	lsrs	r3, r3, #16
 800317e:	f003 0303 	and.w	r3, r3, #3
 8003182:	3301      	adds	r3, #1
 8003184:	005b      	lsls	r3, r3, #1
 8003186:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800318a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800318e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003192:	fbb2 f3f3 	udiv	r3, r2, r3
 8003196:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800319a:	e0eb      	b.n	8003374 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800319c:	4b38      	ldr	r3, [pc, #224]	; (8003280 <HAL_RCC_GetSysClockFreq+0x354>)
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80031a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80031a8:	4b35      	ldr	r3, [pc, #212]	; (8003280 <HAL_RCC_GetSysClockFreq+0x354>)
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d06b      	beq.n	800328c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031b4:	4b32      	ldr	r3, [pc, #200]	; (8003280 <HAL_RCC_GetSysClockFreq+0x354>)
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	099b      	lsrs	r3, r3, #6
 80031ba:	2200      	movs	r2, #0
 80031bc:	66bb      	str	r3, [r7, #104]	; 0x68
 80031be:	66fa      	str	r2, [r7, #108]	; 0x6c
 80031c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80031c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031c6:	663b      	str	r3, [r7, #96]	; 0x60
 80031c8:	2300      	movs	r3, #0
 80031ca:	667b      	str	r3, [r7, #100]	; 0x64
 80031cc:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80031d0:	4622      	mov	r2, r4
 80031d2:	462b      	mov	r3, r5
 80031d4:	f04f 0000 	mov.w	r0, #0
 80031d8:	f04f 0100 	mov.w	r1, #0
 80031dc:	0159      	lsls	r1, r3, #5
 80031de:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031e2:	0150      	lsls	r0, r2, #5
 80031e4:	4602      	mov	r2, r0
 80031e6:	460b      	mov	r3, r1
 80031e8:	4621      	mov	r1, r4
 80031ea:	1a51      	subs	r1, r2, r1
 80031ec:	61b9      	str	r1, [r7, #24]
 80031ee:	4629      	mov	r1, r5
 80031f0:	eb63 0301 	sbc.w	r3, r3, r1
 80031f4:	61fb      	str	r3, [r7, #28]
 80031f6:	f04f 0200 	mov.w	r2, #0
 80031fa:	f04f 0300 	mov.w	r3, #0
 80031fe:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003202:	4659      	mov	r1, fp
 8003204:	018b      	lsls	r3, r1, #6
 8003206:	4651      	mov	r1, sl
 8003208:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800320c:	4651      	mov	r1, sl
 800320e:	018a      	lsls	r2, r1, #6
 8003210:	4651      	mov	r1, sl
 8003212:	ebb2 0801 	subs.w	r8, r2, r1
 8003216:	4659      	mov	r1, fp
 8003218:	eb63 0901 	sbc.w	r9, r3, r1
 800321c:	f04f 0200 	mov.w	r2, #0
 8003220:	f04f 0300 	mov.w	r3, #0
 8003224:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003228:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800322c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003230:	4690      	mov	r8, r2
 8003232:	4699      	mov	r9, r3
 8003234:	4623      	mov	r3, r4
 8003236:	eb18 0303 	adds.w	r3, r8, r3
 800323a:	613b      	str	r3, [r7, #16]
 800323c:	462b      	mov	r3, r5
 800323e:	eb49 0303 	adc.w	r3, r9, r3
 8003242:	617b      	str	r3, [r7, #20]
 8003244:	f04f 0200 	mov.w	r2, #0
 8003248:	f04f 0300 	mov.w	r3, #0
 800324c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003250:	4629      	mov	r1, r5
 8003252:	024b      	lsls	r3, r1, #9
 8003254:	4621      	mov	r1, r4
 8003256:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800325a:	4621      	mov	r1, r4
 800325c:	024a      	lsls	r2, r1, #9
 800325e:	4610      	mov	r0, r2
 8003260:	4619      	mov	r1, r3
 8003262:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003266:	2200      	movs	r2, #0
 8003268:	65bb      	str	r3, [r7, #88]	; 0x58
 800326a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800326c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003270:	f7fd f81e 	bl	80002b0 <__aeabi_uldivmod>
 8003274:	4602      	mov	r2, r0
 8003276:	460b      	mov	r3, r1
 8003278:	4613      	mov	r3, r2
 800327a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800327e:	e065      	b.n	800334c <HAL_RCC_GetSysClockFreq+0x420>
 8003280:	40023800 	.word	0x40023800
 8003284:	00f42400 	.word	0x00f42400
 8003288:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800328c:	4b3d      	ldr	r3, [pc, #244]	; (8003384 <HAL_RCC_GetSysClockFreq+0x458>)
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	099b      	lsrs	r3, r3, #6
 8003292:	2200      	movs	r2, #0
 8003294:	4618      	mov	r0, r3
 8003296:	4611      	mov	r1, r2
 8003298:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800329c:	653b      	str	r3, [r7, #80]	; 0x50
 800329e:	2300      	movs	r3, #0
 80032a0:	657b      	str	r3, [r7, #84]	; 0x54
 80032a2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80032a6:	4642      	mov	r2, r8
 80032a8:	464b      	mov	r3, r9
 80032aa:	f04f 0000 	mov.w	r0, #0
 80032ae:	f04f 0100 	mov.w	r1, #0
 80032b2:	0159      	lsls	r1, r3, #5
 80032b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80032b8:	0150      	lsls	r0, r2, #5
 80032ba:	4602      	mov	r2, r0
 80032bc:	460b      	mov	r3, r1
 80032be:	4641      	mov	r1, r8
 80032c0:	1a51      	subs	r1, r2, r1
 80032c2:	60b9      	str	r1, [r7, #8]
 80032c4:	4649      	mov	r1, r9
 80032c6:	eb63 0301 	sbc.w	r3, r3, r1
 80032ca:	60fb      	str	r3, [r7, #12]
 80032cc:	f04f 0200 	mov.w	r2, #0
 80032d0:	f04f 0300 	mov.w	r3, #0
 80032d4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80032d8:	4659      	mov	r1, fp
 80032da:	018b      	lsls	r3, r1, #6
 80032dc:	4651      	mov	r1, sl
 80032de:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80032e2:	4651      	mov	r1, sl
 80032e4:	018a      	lsls	r2, r1, #6
 80032e6:	4651      	mov	r1, sl
 80032e8:	1a54      	subs	r4, r2, r1
 80032ea:	4659      	mov	r1, fp
 80032ec:	eb63 0501 	sbc.w	r5, r3, r1
 80032f0:	f04f 0200 	mov.w	r2, #0
 80032f4:	f04f 0300 	mov.w	r3, #0
 80032f8:	00eb      	lsls	r3, r5, #3
 80032fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80032fe:	00e2      	lsls	r2, r4, #3
 8003300:	4614      	mov	r4, r2
 8003302:	461d      	mov	r5, r3
 8003304:	4643      	mov	r3, r8
 8003306:	18e3      	adds	r3, r4, r3
 8003308:	603b      	str	r3, [r7, #0]
 800330a:	464b      	mov	r3, r9
 800330c:	eb45 0303 	adc.w	r3, r5, r3
 8003310:	607b      	str	r3, [r7, #4]
 8003312:	f04f 0200 	mov.w	r2, #0
 8003316:	f04f 0300 	mov.w	r3, #0
 800331a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800331e:	4629      	mov	r1, r5
 8003320:	028b      	lsls	r3, r1, #10
 8003322:	4621      	mov	r1, r4
 8003324:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003328:	4621      	mov	r1, r4
 800332a:	028a      	lsls	r2, r1, #10
 800332c:	4610      	mov	r0, r2
 800332e:	4619      	mov	r1, r3
 8003330:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003334:	2200      	movs	r2, #0
 8003336:	64bb      	str	r3, [r7, #72]	; 0x48
 8003338:	64fa      	str	r2, [r7, #76]	; 0x4c
 800333a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800333e:	f7fc ffb7 	bl	80002b0 <__aeabi_uldivmod>
 8003342:	4602      	mov	r2, r0
 8003344:	460b      	mov	r3, r1
 8003346:	4613      	mov	r3, r2
 8003348:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800334c:	4b0d      	ldr	r3, [pc, #52]	; (8003384 <HAL_RCC_GetSysClockFreq+0x458>)
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	0f1b      	lsrs	r3, r3, #28
 8003352:	f003 0307 	and.w	r3, r3, #7
 8003356:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800335a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800335e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003362:	fbb2 f3f3 	udiv	r3, r2, r3
 8003366:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800336a:	e003      	b.n	8003374 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800336c:	4b06      	ldr	r3, [pc, #24]	; (8003388 <HAL_RCC_GetSysClockFreq+0x45c>)
 800336e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003372:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003374:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003378:	4618      	mov	r0, r3
 800337a:	37b8      	adds	r7, #184	; 0xb8
 800337c:	46bd      	mov	sp, r7
 800337e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003382:	bf00      	nop
 8003384:	40023800 	.word	0x40023800
 8003388:	00f42400 	.word	0x00f42400

0800338c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b086      	sub	sp, #24
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d101      	bne.n	800339e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e28d      	b.n	80038ba <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 0301 	and.w	r3, r3, #1
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	f000 8083 	beq.w	80034b2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80033ac:	4b94      	ldr	r3, [pc, #592]	; (8003600 <HAL_RCC_OscConfig+0x274>)
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	f003 030c 	and.w	r3, r3, #12
 80033b4:	2b04      	cmp	r3, #4
 80033b6:	d019      	beq.n	80033ec <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80033b8:	4b91      	ldr	r3, [pc, #580]	; (8003600 <HAL_RCC_OscConfig+0x274>)
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80033c0:	2b08      	cmp	r3, #8
 80033c2:	d106      	bne.n	80033d2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80033c4:	4b8e      	ldr	r3, [pc, #568]	; (8003600 <HAL_RCC_OscConfig+0x274>)
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033d0:	d00c      	beq.n	80033ec <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033d2:	4b8b      	ldr	r3, [pc, #556]	; (8003600 <HAL_RCC_OscConfig+0x274>)
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80033da:	2b0c      	cmp	r3, #12
 80033dc:	d112      	bne.n	8003404 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033de:	4b88      	ldr	r3, [pc, #544]	; (8003600 <HAL_RCC_OscConfig+0x274>)
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033ea:	d10b      	bne.n	8003404 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033ec:	4b84      	ldr	r3, [pc, #528]	; (8003600 <HAL_RCC_OscConfig+0x274>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d05b      	beq.n	80034b0 <HAL_RCC_OscConfig+0x124>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d157      	bne.n	80034b0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	e25a      	b.n	80038ba <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800340c:	d106      	bne.n	800341c <HAL_RCC_OscConfig+0x90>
 800340e:	4b7c      	ldr	r3, [pc, #496]	; (8003600 <HAL_RCC_OscConfig+0x274>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a7b      	ldr	r2, [pc, #492]	; (8003600 <HAL_RCC_OscConfig+0x274>)
 8003414:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003418:	6013      	str	r3, [r2, #0]
 800341a:	e01d      	b.n	8003458 <HAL_RCC_OscConfig+0xcc>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003424:	d10c      	bne.n	8003440 <HAL_RCC_OscConfig+0xb4>
 8003426:	4b76      	ldr	r3, [pc, #472]	; (8003600 <HAL_RCC_OscConfig+0x274>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a75      	ldr	r2, [pc, #468]	; (8003600 <HAL_RCC_OscConfig+0x274>)
 800342c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003430:	6013      	str	r3, [r2, #0]
 8003432:	4b73      	ldr	r3, [pc, #460]	; (8003600 <HAL_RCC_OscConfig+0x274>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a72      	ldr	r2, [pc, #456]	; (8003600 <HAL_RCC_OscConfig+0x274>)
 8003438:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800343c:	6013      	str	r3, [r2, #0]
 800343e:	e00b      	b.n	8003458 <HAL_RCC_OscConfig+0xcc>
 8003440:	4b6f      	ldr	r3, [pc, #444]	; (8003600 <HAL_RCC_OscConfig+0x274>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a6e      	ldr	r2, [pc, #440]	; (8003600 <HAL_RCC_OscConfig+0x274>)
 8003446:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800344a:	6013      	str	r3, [r2, #0]
 800344c:	4b6c      	ldr	r3, [pc, #432]	; (8003600 <HAL_RCC_OscConfig+0x274>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a6b      	ldr	r2, [pc, #428]	; (8003600 <HAL_RCC_OscConfig+0x274>)
 8003452:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003456:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d013      	beq.n	8003488 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003460:	f7fe f856 	bl	8001510 <HAL_GetTick>
 8003464:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003466:	e008      	b.n	800347a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003468:	f7fe f852 	bl	8001510 <HAL_GetTick>
 800346c:	4602      	mov	r2, r0
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	2b64      	cmp	r3, #100	; 0x64
 8003474:	d901      	bls.n	800347a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003476:	2303      	movs	r3, #3
 8003478:	e21f      	b.n	80038ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800347a:	4b61      	ldr	r3, [pc, #388]	; (8003600 <HAL_RCC_OscConfig+0x274>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003482:	2b00      	cmp	r3, #0
 8003484:	d0f0      	beq.n	8003468 <HAL_RCC_OscConfig+0xdc>
 8003486:	e014      	b.n	80034b2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003488:	f7fe f842 	bl	8001510 <HAL_GetTick>
 800348c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800348e:	e008      	b.n	80034a2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003490:	f7fe f83e 	bl	8001510 <HAL_GetTick>
 8003494:	4602      	mov	r2, r0
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	1ad3      	subs	r3, r2, r3
 800349a:	2b64      	cmp	r3, #100	; 0x64
 800349c:	d901      	bls.n	80034a2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800349e:	2303      	movs	r3, #3
 80034a0:	e20b      	b.n	80038ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034a2:	4b57      	ldr	r3, [pc, #348]	; (8003600 <HAL_RCC_OscConfig+0x274>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d1f0      	bne.n	8003490 <HAL_RCC_OscConfig+0x104>
 80034ae:	e000      	b.n	80034b2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 0302 	and.w	r3, r3, #2
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d06f      	beq.n	800359e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80034be:	4b50      	ldr	r3, [pc, #320]	; (8003600 <HAL_RCC_OscConfig+0x274>)
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	f003 030c 	and.w	r3, r3, #12
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d017      	beq.n	80034fa <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80034ca:	4b4d      	ldr	r3, [pc, #308]	; (8003600 <HAL_RCC_OscConfig+0x274>)
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80034d2:	2b08      	cmp	r3, #8
 80034d4:	d105      	bne.n	80034e2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80034d6:	4b4a      	ldr	r3, [pc, #296]	; (8003600 <HAL_RCC_OscConfig+0x274>)
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d00b      	beq.n	80034fa <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034e2:	4b47      	ldr	r3, [pc, #284]	; (8003600 <HAL_RCC_OscConfig+0x274>)
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80034ea:	2b0c      	cmp	r3, #12
 80034ec:	d11c      	bne.n	8003528 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034ee:	4b44      	ldr	r3, [pc, #272]	; (8003600 <HAL_RCC_OscConfig+0x274>)
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d116      	bne.n	8003528 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034fa:	4b41      	ldr	r3, [pc, #260]	; (8003600 <HAL_RCC_OscConfig+0x274>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 0302 	and.w	r3, r3, #2
 8003502:	2b00      	cmp	r3, #0
 8003504:	d005      	beq.n	8003512 <HAL_RCC_OscConfig+0x186>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	68db      	ldr	r3, [r3, #12]
 800350a:	2b01      	cmp	r3, #1
 800350c:	d001      	beq.n	8003512 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	e1d3      	b.n	80038ba <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003512:	4b3b      	ldr	r3, [pc, #236]	; (8003600 <HAL_RCC_OscConfig+0x274>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	691b      	ldr	r3, [r3, #16]
 800351e:	00db      	lsls	r3, r3, #3
 8003520:	4937      	ldr	r1, [pc, #220]	; (8003600 <HAL_RCC_OscConfig+0x274>)
 8003522:	4313      	orrs	r3, r2
 8003524:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003526:	e03a      	b.n	800359e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d020      	beq.n	8003572 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003530:	4b34      	ldr	r3, [pc, #208]	; (8003604 <HAL_RCC_OscConfig+0x278>)
 8003532:	2201      	movs	r2, #1
 8003534:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003536:	f7fd ffeb 	bl	8001510 <HAL_GetTick>
 800353a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800353c:	e008      	b.n	8003550 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800353e:	f7fd ffe7 	bl	8001510 <HAL_GetTick>
 8003542:	4602      	mov	r2, r0
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	1ad3      	subs	r3, r2, r3
 8003548:	2b02      	cmp	r3, #2
 800354a:	d901      	bls.n	8003550 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800354c:	2303      	movs	r3, #3
 800354e:	e1b4      	b.n	80038ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003550:	4b2b      	ldr	r3, [pc, #172]	; (8003600 <HAL_RCC_OscConfig+0x274>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 0302 	and.w	r3, r3, #2
 8003558:	2b00      	cmp	r3, #0
 800355a:	d0f0      	beq.n	800353e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800355c:	4b28      	ldr	r3, [pc, #160]	; (8003600 <HAL_RCC_OscConfig+0x274>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	691b      	ldr	r3, [r3, #16]
 8003568:	00db      	lsls	r3, r3, #3
 800356a:	4925      	ldr	r1, [pc, #148]	; (8003600 <HAL_RCC_OscConfig+0x274>)
 800356c:	4313      	orrs	r3, r2
 800356e:	600b      	str	r3, [r1, #0]
 8003570:	e015      	b.n	800359e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003572:	4b24      	ldr	r3, [pc, #144]	; (8003604 <HAL_RCC_OscConfig+0x278>)
 8003574:	2200      	movs	r2, #0
 8003576:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003578:	f7fd ffca 	bl	8001510 <HAL_GetTick>
 800357c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800357e:	e008      	b.n	8003592 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003580:	f7fd ffc6 	bl	8001510 <HAL_GetTick>
 8003584:	4602      	mov	r2, r0
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	2b02      	cmp	r3, #2
 800358c:	d901      	bls.n	8003592 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800358e:	2303      	movs	r3, #3
 8003590:	e193      	b.n	80038ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003592:	4b1b      	ldr	r3, [pc, #108]	; (8003600 <HAL_RCC_OscConfig+0x274>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 0302 	and.w	r3, r3, #2
 800359a:	2b00      	cmp	r3, #0
 800359c:	d1f0      	bne.n	8003580 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 0308 	and.w	r3, r3, #8
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d036      	beq.n	8003618 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	695b      	ldr	r3, [r3, #20]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d016      	beq.n	80035e0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035b2:	4b15      	ldr	r3, [pc, #84]	; (8003608 <HAL_RCC_OscConfig+0x27c>)
 80035b4:	2201      	movs	r2, #1
 80035b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035b8:	f7fd ffaa 	bl	8001510 <HAL_GetTick>
 80035bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035be:	e008      	b.n	80035d2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035c0:	f7fd ffa6 	bl	8001510 <HAL_GetTick>
 80035c4:	4602      	mov	r2, r0
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	1ad3      	subs	r3, r2, r3
 80035ca:	2b02      	cmp	r3, #2
 80035cc:	d901      	bls.n	80035d2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80035ce:	2303      	movs	r3, #3
 80035d0:	e173      	b.n	80038ba <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035d2:	4b0b      	ldr	r3, [pc, #44]	; (8003600 <HAL_RCC_OscConfig+0x274>)
 80035d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035d6:	f003 0302 	and.w	r3, r3, #2
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d0f0      	beq.n	80035c0 <HAL_RCC_OscConfig+0x234>
 80035de:	e01b      	b.n	8003618 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035e0:	4b09      	ldr	r3, [pc, #36]	; (8003608 <HAL_RCC_OscConfig+0x27c>)
 80035e2:	2200      	movs	r2, #0
 80035e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035e6:	f7fd ff93 	bl	8001510 <HAL_GetTick>
 80035ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035ec:	e00e      	b.n	800360c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035ee:	f7fd ff8f 	bl	8001510 <HAL_GetTick>
 80035f2:	4602      	mov	r2, r0
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	1ad3      	subs	r3, r2, r3
 80035f8:	2b02      	cmp	r3, #2
 80035fa:	d907      	bls.n	800360c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80035fc:	2303      	movs	r3, #3
 80035fe:	e15c      	b.n	80038ba <HAL_RCC_OscConfig+0x52e>
 8003600:	40023800 	.word	0x40023800
 8003604:	42470000 	.word	0x42470000
 8003608:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800360c:	4b8a      	ldr	r3, [pc, #552]	; (8003838 <HAL_RCC_OscConfig+0x4ac>)
 800360e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003610:	f003 0302 	and.w	r3, r3, #2
 8003614:	2b00      	cmp	r3, #0
 8003616:	d1ea      	bne.n	80035ee <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 0304 	and.w	r3, r3, #4
 8003620:	2b00      	cmp	r3, #0
 8003622:	f000 8097 	beq.w	8003754 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003626:	2300      	movs	r3, #0
 8003628:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800362a:	4b83      	ldr	r3, [pc, #524]	; (8003838 <HAL_RCC_OscConfig+0x4ac>)
 800362c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003632:	2b00      	cmp	r3, #0
 8003634:	d10f      	bne.n	8003656 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003636:	2300      	movs	r3, #0
 8003638:	60bb      	str	r3, [r7, #8]
 800363a:	4b7f      	ldr	r3, [pc, #508]	; (8003838 <HAL_RCC_OscConfig+0x4ac>)
 800363c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800363e:	4a7e      	ldr	r2, [pc, #504]	; (8003838 <HAL_RCC_OscConfig+0x4ac>)
 8003640:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003644:	6413      	str	r3, [r2, #64]	; 0x40
 8003646:	4b7c      	ldr	r3, [pc, #496]	; (8003838 <HAL_RCC_OscConfig+0x4ac>)
 8003648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800364a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800364e:	60bb      	str	r3, [r7, #8]
 8003650:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003652:	2301      	movs	r3, #1
 8003654:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003656:	4b79      	ldr	r3, [pc, #484]	; (800383c <HAL_RCC_OscConfig+0x4b0>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800365e:	2b00      	cmp	r3, #0
 8003660:	d118      	bne.n	8003694 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003662:	4b76      	ldr	r3, [pc, #472]	; (800383c <HAL_RCC_OscConfig+0x4b0>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a75      	ldr	r2, [pc, #468]	; (800383c <HAL_RCC_OscConfig+0x4b0>)
 8003668:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800366c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800366e:	f7fd ff4f 	bl	8001510 <HAL_GetTick>
 8003672:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003674:	e008      	b.n	8003688 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003676:	f7fd ff4b 	bl	8001510 <HAL_GetTick>
 800367a:	4602      	mov	r2, r0
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	1ad3      	subs	r3, r2, r3
 8003680:	2b02      	cmp	r3, #2
 8003682:	d901      	bls.n	8003688 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003684:	2303      	movs	r3, #3
 8003686:	e118      	b.n	80038ba <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003688:	4b6c      	ldr	r3, [pc, #432]	; (800383c <HAL_RCC_OscConfig+0x4b0>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003690:	2b00      	cmp	r3, #0
 8003692:	d0f0      	beq.n	8003676 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	2b01      	cmp	r3, #1
 800369a:	d106      	bne.n	80036aa <HAL_RCC_OscConfig+0x31e>
 800369c:	4b66      	ldr	r3, [pc, #408]	; (8003838 <HAL_RCC_OscConfig+0x4ac>)
 800369e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036a0:	4a65      	ldr	r2, [pc, #404]	; (8003838 <HAL_RCC_OscConfig+0x4ac>)
 80036a2:	f043 0301 	orr.w	r3, r3, #1
 80036a6:	6713      	str	r3, [r2, #112]	; 0x70
 80036a8:	e01c      	b.n	80036e4 <HAL_RCC_OscConfig+0x358>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	2b05      	cmp	r3, #5
 80036b0:	d10c      	bne.n	80036cc <HAL_RCC_OscConfig+0x340>
 80036b2:	4b61      	ldr	r3, [pc, #388]	; (8003838 <HAL_RCC_OscConfig+0x4ac>)
 80036b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036b6:	4a60      	ldr	r2, [pc, #384]	; (8003838 <HAL_RCC_OscConfig+0x4ac>)
 80036b8:	f043 0304 	orr.w	r3, r3, #4
 80036bc:	6713      	str	r3, [r2, #112]	; 0x70
 80036be:	4b5e      	ldr	r3, [pc, #376]	; (8003838 <HAL_RCC_OscConfig+0x4ac>)
 80036c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036c2:	4a5d      	ldr	r2, [pc, #372]	; (8003838 <HAL_RCC_OscConfig+0x4ac>)
 80036c4:	f043 0301 	orr.w	r3, r3, #1
 80036c8:	6713      	str	r3, [r2, #112]	; 0x70
 80036ca:	e00b      	b.n	80036e4 <HAL_RCC_OscConfig+0x358>
 80036cc:	4b5a      	ldr	r3, [pc, #360]	; (8003838 <HAL_RCC_OscConfig+0x4ac>)
 80036ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036d0:	4a59      	ldr	r2, [pc, #356]	; (8003838 <HAL_RCC_OscConfig+0x4ac>)
 80036d2:	f023 0301 	bic.w	r3, r3, #1
 80036d6:	6713      	str	r3, [r2, #112]	; 0x70
 80036d8:	4b57      	ldr	r3, [pc, #348]	; (8003838 <HAL_RCC_OscConfig+0x4ac>)
 80036da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036dc:	4a56      	ldr	r2, [pc, #344]	; (8003838 <HAL_RCC_OscConfig+0x4ac>)
 80036de:	f023 0304 	bic.w	r3, r3, #4
 80036e2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d015      	beq.n	8003718 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036ec:	f7fd ff10 	bl	8001510 <HAL_GetTick>
 80036f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036f2:	e00a      	b.n	800370a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036f4:	f7fd ff0c 	bl	8001510 <HAL_GetTick>
 80036f8:	4602      	mov	r2, r0
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	1ad3      	subs	r3, r2, r3
 80036fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003702:	4293      	cmp	r3, r2
 8003704:	d901      	bls.n	800370a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003706:	2303      	movs	r3, #3
 8003708:	e0d7      	b.n	80038ba <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800370a:	4b4b      	ldr	r3, [pc, #300]	; (8003838 <HAL_RCC_OscConfig+0x4ac>)
 800370c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800370e:	f003 0302 	and.w	r3, r3, #2
 8003712:	2b00      	cmp	r3, #0
 8003714:	d0ee      	beq.n	80036f4 <HAL_RCC_OscConfig+0x368>
 8003716:	e014      	b.n	8003742 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003718:	f7fd fefa 	bl	8001510 <HAL_GetTick>
 800371c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800371e:	e00a      	b.n	8003736 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003720:	f7fd fef6 	bl	8001510 <HAL_GetTick>
 8003724:	4602      	mov	r2, r0
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	1ad3      	subs	r3, r2, r3
 800372a:	f241 3288 	movw	r2, #5000	; 0x1388
 800372e:	4293      	cmp	r3, r2
 8003730:	d901      	bls.n	8003736 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003732:	2303      	movs	r3, #3
 8003734:	e0c1      	b.n	80038ba <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003736:	4b40      	ldr	r3, [pc, #256]	; (8003838 <HAL_RCC_OscConfig+0x4ac>)
 8003738:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800373a:	f003 0302 	and.w	r3, r3, #2
 800373e:	2b00      	cmp	r3, #0
 8003740:	d1ee      	bne.n	8003720 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003742:	7dfb      	ldrb	r3, [r7, #23]
 8003744:	2b01      	cmp	r3, #1
 8003746:	d105      	bne.n	8003754 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003748:	4b3b      	ldr	r3, [pc, #236]	; (8003838 <HAL_RCC_OscConfig+0x4ac>)
 800374a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374c:	4a3a      	ldr	r2, [pc, #232]	; (8003838 <HAL_RCC_OscConfig+0x4ac>)
 800374e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003752:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	699b      	ldr	r3, [r3, #24]
 8003758:	2b00      	cmp	r3, #0
 800375a:	f000 80ad 	beq.w	80038b8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800375e:	4b36      	ldr	r3, [pc, #216]	; (8003838 <HAL_RCC_OscConfig+0x4ac>)
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	f003 030c 	and.w	r3, r3, #12
 8003766:	2b08      	cmp	r3, #8
 8003768:	d060      	beq.n	800382c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	699b      	ldr	r3, [r3, #24]
 800376e:	2b02      	cmp	r3, #2
 8003770:	d145      	bne.n	80037fe <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003772:	4b33      	ldr	r3, [pc, #204]	; (8003840 <HAL_RCC_OscConfig+0x4b4>)
 8003774:	2200      	movs	r2, #0
 8003776:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003778:	f7fd feca 	bl	8001510 <HAL_GetTick>
 800377c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800377e:	e008      	b.n	8003792 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003780:	f7fd fec6 	bl	8001510 <HAL_GetTick>
 8003784:	4602      	mov	r2, r0
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	1ad3      	subs	r3, r2, r3
 800378a:	2b02      	cmp	r3, #2
 800378c:	d901      	bls.n	8003792 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800378e:	2303      	movs	r3, #3
 8003790:	e093      	b.n	80038ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003792:	4b29      	ldr	r3, [pc, #164]	; (8003838 <HAL_RCC_OscConfig+0x4ac>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800379a:	2b00      	cmp	r3, #0
 800379c:	d1f0      	bne.n	8003780 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	69da      	ldr	r2, [r3, #28]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6a1b      	ldr	r3, [r3, #32]
 80037a6:	431a      	orrs	r2, r3
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ac:	019b      	lsls	r3, r3, #6
 80037ae:	431a      	orrs	r2, r3
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037b4:	085b      	lsrs	r3, r3, #1
 80037b6:	3b01      	subs	r3, #1
 80037b8:	041b      	lsls	r3, r3, #16
 80037ba:	431a      	orrs	r2, r3
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037c0:	061b      	lsls	r3, r3, #24
 80037c2:	431a      	orrs	r2, r3
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c8:	071b      	lsls	r3, r3, #28
 80037ca:	491b      	ldr	r1, [pc, #108]	; (8003838 <HAL_RCC_OscConfig+0x4ac>)
 80037cc:	4313      	orrs	r3, r2
 80037ce:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037d0:	4b1b      	ldr	r3, [pc, #108]	; (8003840 <HAL_RCC_OscConfig+0x4b4>)
 80037d2:	2201      	movs	r2, #1
 80037d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037d6:	f7fd fe9b 	bl	8001510 <HAL_GetTick>
 80037da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037dc:	e008      	b.n	80037f0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037de:	f7fd fe97 	bl	8001510 <HAL_GetTick>
 80037e2:	4602      	mov	r2, r0
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	1ad3      	subs	r3, r2, r3
 80037e8:	2b02      	cmp	r3, #2
 80037ea:	d901      	bls.n	80037f0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80037ec:	2303      	movs	r3, #3
 80037ee:	e064      	b.n	80038ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037f0:	4b11      	ldr	r3, [pc, #68]	; (8003838 <HAL_RCC_OscConfig+0x4ac>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d0f0      	beq.n	80037de <HAL_RCC_OscConfig+0x452>
 80037fc:	e05c      	b.n	80038b8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037fe:	4b10      	ldr	r3, [pc, #64]	; (8003840 <HAL_RCC_OscConfig+0x4b4>)
 8003800:	2200      	movs	r2, #0
 8003802:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003804:	f7fd fe84 	bl	8001510 <HAL_GetTick>
 8003808:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800380a:	e008      	b.n	800381e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800380c:	f7fd fe80 	bl	8001510 <HAL_GetTick>
 8003810:	4602      	mov	r2, r0
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	2b02      	cmp	r3, #2
 8003818:	d901      	bls.n	800381e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800381a:	2303      	movs	r3, #3
 800381c:	e04d      	b.n	80038ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800381e:	4b06      	ldr	r3, [pc, #24]	; (8003838 <HAL_RCC_OscConfig+0x4ac>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003826:	2b00      	cmp	r3, #0
 8003828:	d1f0      	bne.n	800380c <HAL_RCC_OscConfig+0x480>
 800382a:	e045      	b.n	80038b8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	699b      	ldr	r3, [r3, #24]
 8003830:	2b01      	cmp	r3, #1
 8003832:	d107      	bne.n	8003844 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	e040      	b.n	80038ba <HAL_RCC_OscConfig+0x52e>
 8003838:	40023800 	.word	0x40023800
 800383c:	40007000 	.word	0x40007000
 8003840:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003844:	4b1f      	ldr	r3, [pc, #124]	; (80038c4 <HAL_RCC_OscConfig+0x538>)
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	699b      	ldr	r3, [r3, #24]
 800384e:	2b01      	cmp	r3, #1
 8003850:	d030      	beq.n	80038b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800385c:	429a      	cmp	r2, r3
 800385e:	d129      	bne.n	80038b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800386a:	429a      	cmp	r2, r3
 800386c:	d122      	bne.n	80038b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800386e:	68fa      	ldr	r2, [r7, #12]
 8003870:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003874:	4013      	ands	r3, r2
 8003876:	687a      	ldr	r2, [r7, #4]
 8003878:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800387a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800387c:	4293      	cmp	r3, r2
 800387e:	d119      	bne.n	80038b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800388a:	085b      	lsrs	r3, r3, #1
 800388c:	3b01      	subs	r3, #1
 800388e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003890:	429a      	cmp	r2, r3
 8003892:	d10f      	bne.n	80038b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800389e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038a0:	429a      	cmp	r2, r3
 80038a2:	d107      	bne.n	80038b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ae:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d001      	beq.n	80038b8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	e000      	b.n	80038ba <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80038b8:	2300      	movs	r3, #0
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3718      	adds	r7, #24
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	bf00      	nop
 80038c4:	40023800 	.word	0x40023800

080038c8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b082      	sub	sp, #8
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d101      	bne.n	80038da <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	e041      	b.n	800395e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d106      	bne.n	80038f4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2200      	movs	r2, #0
 80038ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f7fd fc7c 	bl	80011ec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2202      	movs	r2, #2
 80038f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	3304      	adds	r3, #4
 8003904:	4619      	mov	r1, r3
 8003906:	4610      	mov	r0, r2
 8003908:	f000 fcdc 	bl	80042c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2201      	movs	r2, #1
 8003910:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2201      	movs	r2, #1
 8003918:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2201      	movs	r2, #1
 8003920:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2201      	movs	r2, #1
 8003928:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2201      	movs	r2, #1
 8003930:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2201      	movs	r2, #1
 8003938:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2201      	movs	r2, #1
 8003940:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2201      	movs	r2, #1
 8003948:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2201      	movs	r2, #1
 8003950:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2201      	movs	r2, #1
 8003958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800395c:	2300      	movs	r3, #0
}
 800395e:	4618      	mov	r0, r3
 8003960:	3708      	adds	r7, #8
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}
	...

08003968 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b086      	sub	sp, #24
 800396c:	af00      	add	r7, sp, #0
 800396e:	60f8      	str	r0, [r7, #12]
 8003970:	60b9      	str	r1, [r7, #8]
 8003972:	607a      	str	r2, [r7, #4]
 8003974:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8003976:	2300      	movs	r3, #0
 8003978:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d109      	bne.n	8003994 <HAL_TIM_PWM_Start_DMA+0x2c>
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003986:	b2db      	uxtb	r3, r3
 8003988:	2b02      	cmp	r3, #2
 800398a:	bf0c      	ite	eq
 800398c:	2301      	moveq	r3, #1
 800398e:	2300      	movne	r3, #0
 8003990:	b2db      	uxtb	r3, r3
 8003992:	e022      	b.n	80039da <HAL_TIM_PWM_Start_DMA+0x72>
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	2b04      	cmp	r3, #4
 8003998:	d109      	bne.n	80039ae <HAL_TIM_PWM_Start_DMA+0x46>
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80039a0:	b2db      	uxtb	r3, r3
 80039a2:	2b02      	cmp	r3, #2
 80039a4:	bf0c      	ite	eq
 80039a6:	2301      	moveq	r3, #1
 80039a8:	2300      	movne	r3, #0
 80039aa:	b2db      	uxtb	r3, r3
 80039ac:	e015      	b.n	80039da <HAL_TIM_PWM_Start_DMA+0x72>
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	2b08      	cmp	r3, #8
 80039b2:	d109      	bne.n	80039c8 <HAL_TIM_PWM_Start_DMA+0x60>
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80039ba:	b2db      	uxtb	r3, r3
 80039bc:	2b02      	cmp	r3, #2
 80039be:	bf0c      	ite	eq
 80039c0:	2301      	moveq	r3, #1
 80039c2:	2300      	movne	r3, #0
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	e008      	b.n	80039da <HAL_TIM_PWM_Start_DMA+0x72>
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039ce:	b2db      	uxtb	r3, r3
 80039d0:	2b02      	cmp	r3, #2
 80039d2:	bf0c      	ite	eq
 80039d4:	2301      	moveq	r3, #1
 80039d6:	2300      	movne	r3, #0
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d001      	beq.n	80039e2 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 80039de:	2302      	movs	r3, #2
 80039e0:	e171      	b.n	8003cc6 <HAL_TIM_PWM_Start_DMA+0x35e>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d109      	bne.n	80039fc <HAL_TIM_PWM_Start_DMA+0x94>
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80039ee:	b2db      	uxtb	r3, r3
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	bf0c      	ite	eq
 80039f4:	2301      	moveq	r3, #1
 80039f6:	2300      	movne	r3, #0
 80039f8:	b2db      	uxtb	r3, r3
 80039fa:	e022      	b.n	8003a42 <HAL_TIM_PWM_Start_DMA+0xda>
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	2b04      	cmp	r3, #4
 8003a00:	d109      	bne.n	8003a16 <HAL_TIM_PWM_Start_DMA+0xae>
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003a08:	b2db      	uxtb	r3, r3
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	bf0c      	ite	eq
 8003a0e:	2301      	moveq	r3, #1
 8003a10:	2300      	movne	r3, #0
 8003a12:	b2db      	uxtb	r3, r3
 8003a14:	e015      	b.n	8003a42 <HAL_TIM_PWM_Start_DMA+0xda>
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	2b08      	cmp	r3, #8
 8003a1a:	d109      	bne.n	8003a30 <HAL_TIM_PWM_Start_DMA+0xc8>
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a22:	b2db      	uxtb	r3, r3
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	bf0c      	ite	eq
 8003a28:	2301      	moveq	r3, #1
 8003a2a:	2300      	movne	r3, #0
 8003a2c:	b2db      	uxtb	r3, r3
 8003a2e:	e008      	b.n	8003a42 <HAL_TIM_PWM_Start_DMA+0xda>
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a36:	b2db      	uxtb	r3, r3
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	bf0c      	ite	eq
 8003a3c:	2301      	moveq	r3, #1
 8003a3e:	2300      	movne	r3, #0
 8003a40:	b2db      	uxtb	r3, r3
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d024      	beq.n	8003a90 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d104      	bne.n	8003a56 <HAL_TIM_PWM_Start_DMA+0xee>
 8003a4c:	887b      	ldrh	r3, [r7, #2]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d001      	beq.n	8003a56 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e137      	b.n	8003cc6 <HAL_TIM_PWM_Start_DMA+0x35e>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d104      	bne.n	8003a66 <HAL_TIM_PWM_Start_DMA+0xfe>
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2202      	movs	r2, #2
 8003a60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a64:	e016      	b.n	8003a94 <HAL_TIM_PWM_Start_DMA+0x12c>
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	2b04      	cmp	r3, #4
 8003a6a:	d104      	bne.n	8003a76 <HAL_TIM_PWM_Start_DMA+0x10e>
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2202      	movs	r2, #2
 8003a70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a74:	e00e      	b.n	8003a94 <HAL_TIM_PWM_Start_DMA+0x12c>
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	2b08      	cmp	r3, #8
 8003a7a:	d104      	bne.n	8003a86 <HAL_TIM_PWM_Start_DMA+0x11e>
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2202      	movs	r2, #2
 8003a80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a84:	e006      	b.n	8003a94 <HAL_TIM_PWM_Start_DMA+0x12c>
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2202      	movs	r2, #2
 8003a8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003a8e:	e001      	b.n	8003a94 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8003a90:	2301      	movs	r3, #1
 8003a92:	e118      	b.n	8003cc6 <HAL_TIM_PWM_Start_DMA+0x35e>
  }

  switch (Channel)
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	2b0c      	cmp	r3, #12
 8003a98:	f200 80ae 	bhi.w	8003bf8 <HAL_TIM_PWM_Start_DMA+0x290>
 8003a9c:	a201      	add	r2, pc, #4	; (adr r2, 8003aa4 <HAL_TIM_PWM_Start_DMA+0x13c>)
 8003a9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aa2:	bf00      	nop
 8003aa4:	08003ad9 	.word	0x08003ad9
 8003aa8:	08003bf9 	.word	0x08003bf9
 8003aac:	08003bf9 	.word	0x08003bf9
 8003ab0:	08003bf9 	.word	0x08003bf9
 8003ab4:	08003b21 	.word	0x08003b21
 8003ab8:	08003bf9 	.word	0x08003bf9
 8003abc:	08003bf9 	.word	0x08003bf9
 8003ac0:	08003bf9 	.word	0x08003bf9
 8003ac4:	08003b69 	.word	0x08003b69
 8003ac8:	08003bf9 	.word	0x08003bf9
 8003acc:	08003bf9 	.word	0x08003bf9
 8003ad0:	08003bf9 	.word	0x08003bf9
 8003ad4:	08003bb1 	.word	0x08003bb1
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003adc:	4a7c      	ldr	r2, [pc, #496]	; (8003cd0 <HAL_TIM_PWM_Start_DMA+0x368>)
 8003ade:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae4:	4a7b      	ldr	r2, [pc, #492]	; (8003cd4 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8003ae6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aec:	4a7a      	ldr	r2, [pc, #488]	; (8003cd8 <HAL_TIM_PWM_Start_DMA+0x370>)
 8003aee:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8003af4:	6879      	ldr	r1, [r7, #4]
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	3334      	adds	r3, #52	; 0x34
 8003afc:	461a      	mov	r2, r3
 8003afe:	887b      	ldrh	r3, [r7, #2]
 8003b00:	f7fd fef6 	bl	80018f0 <HAL_DMA_Start_IT>
 8003b04:	4603      	mov	r3, r0
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d001      	beq.n	8003b0e <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e0db      	b.n	8003cc6 <HAL_TIM_PWM_Start_DMA+0x35e>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	68da      	ldr	r2, [r3, #12]
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b1c:	60da      	str	r2, [r3, #12]
      break;
 8003b1e:	e06e      	b.n	8003bfe <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b24:	4a6a      	ldr	r2, [pc, #424]	; (8003cd0 <HAL_TIM_PWM_Start_DMA+0x368>)
 8003b26:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b2c:	4a69      	ldr	r2, [pc, #420]	; (8003cd4 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8003b2e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b34:	4a68      	ldr	r2, [pc, #416]	; (8003cd8 <HAL_TIM_PWM_Start_DMA+0x370>)
 8003b36:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8003b3c:	6879      	ldr	r1, [r7, #4]
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	3338      	adds	r3, #56	; 0x38
 8003b44:	461a      	mov	r2, r3
 8003b46:	887b      	ldrh	r3, [r7, #2]
 8003b48:	f7fd fed2 	bl	80018f0 <HAL_DMA_Start_IT>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d001      	beq.n	8003b56 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e0b7      	b.n	8003cc6 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	68da      	ldr	r2, [r3, #12]
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003b64:	60da      	str	r2, [r3, #12]
      break;
 8003b66:	e04a      	b.n	8003bfe <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b6c:	4a58      	ldr	r2, [pc, #352]	; (8003cd0 <HAL_TIM_PWM_Start_DMA+0x368>)
 8003b6e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b74:	4a57      	ldr	r2, [pc, #348]	; (8003cd4 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8003b76:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b7c:	4a56      	ldr	r2, [pc, #344]	; (8003cd8 <HAL_TIM_PWM_Start_DMA+0x370>)
 8003b7e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8003b84:	6879      	ldr	r1, [r7, #4]
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	333c      	adds	r3, #60	; 0x3c
 8003b8c:	461a      	mov	r2, r3
 8003b8e:	887b      	ldrh	r3, [r7, #2]
 8003b90:	f7fd feae 	bl	80018f0 <HAL_DMA_Start_IT>
 8003b94:	4603      	mov	r3, r0
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d001      	beq.n	8003b9e <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e093      	b.n	8003cc6 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	68da      	ldr	r2, [r3, #12]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003bac:	60da      	str	r2, [r3, #12]
      break;
 8003bae:	e026      	b.n	8003bfe <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bb4:	4a46      	ldr	r2, [pc, #280]	; (8003cd0 <HAL_TIM_PWM_Start_DMA+0x368>)
 8003bb6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bbc:	4a45      	ldr	r2, [pc, #276]	; (8003cd4 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8003bbe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bc4:	4a44      	ldr	r2, [pc, #272]	; (8003cd8 <HAL_TIM_PWM_Start_DMA+0x370>)
 8003bc6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003bcc:	6879      	ldr	r1, [r7, #4]
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	3340      	adds	r3, #64	; 0x40
 8003bd4:	461a      	mov	r2, r3
 8003bd6:	887b      	ldrh	r3, [r7, #2]
 8003bd8:	f7fd fe8a 	bl	80018f0 <HAL_DMA_Start_IT>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d001      	beq.n	8003be6 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	e06f      	b.n	8003cc6 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	68da      	ldr	r2, [r3, #12]
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003bf4:	60da      	str	r2, [r3, #12]
      break;
 8003bf6:	e002      	b.n	8003bfe <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	75fb      	strb	r3, [r7, #23]
      break;
 8003bfc:	bf00      	nop
  }

  if (status == HAL_OK)
 8003bfe:	7dfb      	ldrb	r3, [r7, #23]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d15f      	bne.n	8003cc4 <HAL_TIM_PWM_Start_DMA+0x35c>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	2201      	movs	r2, #1
 8003c0a:	68b9      	ldr	r1, [r7, #8]
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f000 fda9 	bl	8004764 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a31      	ldr	r2, [pc, #196]	; (8003cdc <HAL_TIM_PWM_Start_DMA+0x374>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d004      	beq.n	8003c26 <HAL_TIM_PWM_Start_DMA+0x2be>
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a2f      	ldr	r2, [pc, #188]	; (8003ce0 <HAL_TIM_PWM_Start_DMA+0x378>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d101      	bne.n	8003c2a <HAL_TIM_PWM_Start_DMA+0x2c2>
 8003c26:	2301      	movs	r3, #1
 8003c28:	e000      	b.n	8003c2c <HAL_TIM_PWM_Start_DMA+0x2c4>
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d007      	beq.n	8003c40 <HAL_TIM_PWM_Start_DMA+0x2d8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c3e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a25      	ldr	r2, [pc, #148]	; (8003cdc <HAL_TIM_PWM_Start_DMA+0x374>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d022      	beq.n	8003c90 <HAL_TIM_PWM_Start_DMA+0x328>
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c52:	d01d      	beq.n	8003c90 <HAL_TIM_PWM_Start_DMA+0x328>
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a22      	ldr	r2, [pc, #136]	; (8003ce4 <HAL_TIM_PWM_Start_DMA+0x37c>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d018      	beq.n	8003c90 <HAL_TIM_PWM_Start_DMA+0x328>
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a21      	ldr	r2, [pc, #132]	; (8003ce8 <HAL_TIM_PWM_Start_DMA+0x380>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d013      	beq.n	8003c90 <HAL_TIM_PWM_Start_DMA+0x328>
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a1f      	ldr	r2, [pc, #124]	; (8003cec <HAL_TIM_PWM_Start_DMA+0x384>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d00e      	beq.n	8003c90 <HAL_TIM_PWM_Start_DMA+0x328>
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a1a      	ldr	r2, [pc, #104]	; (8003ce0 <HAL_TIM_PWM_Start_DMA+0x378>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d009      	beq.n	8003c90 <HAL_TIM_PWM_Start_DMA+0x328>
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a1b      	ldr	r2, [pc, #108]	; (8003cf0 <HAL_TIM_PWM_Start_DMA+0x388>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d004      	beq.n	8003c90 <HAL_TIM_PWM_Start_DMA+0x328>
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a1a      	ldr	r2, [pc, #104]	; (8003cf4 <HAL_TIM_PWM_Start_DMA+0x38c>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d111      	bne.n	8003cb4 <HAL_TIM_PWM_Start_DMA+0x34c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	f003 0307 	and.w	r3, r3, #7
 8003c9a:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	2b06      	cmp	r3, #6
 8003ca0:	d010      	beq.n	8003cc4 <HAL_TIM_PWM_Start_DMA+0x35c>
      {
        __HAL_TIM_ENABLE(htim);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f042 0201 	orr.w	r2, r2, #1
 8003cb0:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cb2:	e007      	b.n	8003cc4 <HAL_TIM_PWM_Start_DMA+0x35c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f042 0201 	orr.w	r2, r2, #1
 8003cc2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003cc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3718      	adds	r7, #24
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}
 8003cce:	bf00      	nop
 8003cd0:	080041b3 	.word	0x080041b3
 8003cd4:	0800425b 	.word	0x0800425b
 8003cd8:	08004121 	.word	0x08004121
 8003cdc:	40010000 	.word	0x40010000
 8003ce0:	40010400 	.word	0x40010400
 8003ce4:	40000400 	.word	0x40000400
 8003ce8:	40000800 	.word	0x40000800
 8003cec:	40000c00 	.word	0x40000c00
 8003cf0:	40014000 	.word	0x40014000
 8003cf4:	40001800 	.word	0x40001800

08003cf8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b086      	sub	sp, #24
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
 8003d00:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d101      	bne.n	8003d0c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	e097      	b.n	8003e3c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d12:	b2db      	uxtb	r3, r3
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d106      	bne.n	8003d26 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003d20:	6878      	ldr	r0, [r7, #4]
 8003d22:	f7fd fa1b 	bl	800115c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2202      	movs	r2, #2
 8003d2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	687a      	ldr	r2, [r7, #4]
 8003d36:	6812      	ldr	r2, [r2, #0]
 8003d38:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d3c:	f023 0307 	bic.w	r3, r3, #7
 8003d40:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	3304      	adds	r3, #4
 8003d4a:	4619      	mov	r1, r3
 8003d4c:	4610      	mov	r0, r2
 8003d4e:	f000 fab9 	bl	80042c4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	699b      	ldr	r3, [r3, #24]
 8003d60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	6a1b      	ldr	r3, [r3, #32]
 8003d68:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	697a      	ldr	r2, [r7, #20]
 8003d70:	4313      	orrs	r3, r2
 8003d72:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d7a:	f023 0303 	bic.w	r3, r3, #3
 8003d7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	689a      	ldr	r2, [r3, #8]
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	699b      	ldr	r3, [r3, #24]
 8003d88:	021b      	lsls	r3, r3, #8
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	693a      	ldr	r2, [r7, #16]
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003d98:	f023 030c 	bic.w	r3, r3, #12
 8003d9c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003da4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003da8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	68da      	ldr	r2, [r3, #12]
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	69db      	ldr	r3, [r3, #28]
 8003db2:	021b      	lsls	r3, r3, #8
 8003db4:	4313      	orrs	r3, r2
 8003db6:	693a      	ldr	r2, [r7, #16]
 8003db8:	4313      	orrs	r3, r2
 8003dba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	691b      	ldr	r3, [r3, #16]
 8003dc0:	011a      	lsls	r2, r3, #4
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	6a1b      	ldr	r3, [r3, #32]
 8003dc6:	031b      	lsls	r3, r3, #12
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	693a      	ldr	r2, [r7, #16]
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003dd6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8003dde:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	685a      	ldr	r2, [r3, #4]
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	695b      	ldr	r3, [r3, #20]
 8003de8:	011b      	lsls	r3, r3, #4
 8003dea:	4313      	orrs	r3, r2
 8003dec:	68fa      	ldr	r2, [r7, #12]
 8003dee:	4313      	orrs	r3, r2
 8003df0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	697a      	ldr	r2, [r7, #20]
 8003df8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	693a      	ldr	r2, [r7, #16]
 8003e00:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	68fa      	ldr	r2, [r7, #12]
 8003e08:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2201      	movs	r2, #1
 8003e16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2201      	movs	r2, #1
 8003e26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2201      	movs	r2, #1
 8003e36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e3a:	2300      	movs	r3, #0
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	3718      	adds	r7, #24
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}

08003e44 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b084      	sub	sp, #16
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e54:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003e5c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003e64:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003e6c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d110      	bne.n	8003e96 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003e74:	7bfb      	ldrb	r3, [r7, #15]
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	d102      	bne.n	8003e80 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003e7a:	7b7b      	ldrb	r3, [r7, #13]
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	d001      	beq.n	8003e84 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003e80:	2301      	movs	r3, #1
 8003e82:	e069      	b.n	8003f58 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2202      	movs	r2, #2
 8003e88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2202      	movs	r2, #2
 8003e90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e94:	e031      	b.n	8003efa <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	2b04      	cmp	r3, #4
 8003e9a:	d110      	bne.n	8003ebe <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003e9c:	7bbb      	ldrb	r3, [r7, #14]
 8003e9e:	2b01      	cmp	r3, #1
 8003ea0:	d102      	bne.n	8003ea8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003ea2:	7b3b      	ldrb	r3, [r7, #12]
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d001      	beq.n	8003eac <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e055      	b.n	8003f58 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2202      	movs	r2, #2
 8003eb0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2202      	movs	r2, #2
 8003eb8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ebc:	e01d      	b.n	8003efa <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003ebe:	7bfb      	ldrb	r3, [r7, #15]
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	d108      	bne.n	8003ed6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003ec4:	7bbb      	ldrb	r3, [r7, #14]
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d105      	bne.n	8003ed6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003eca:	7b7b      	ldrb	r3, [r7, #13]
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d102      	bne.n	8003ed6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003ed0:	7b3b      	ldrb	r3, [r7, #12]
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d001      	beq.n	8003eda <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e03e      	b.n	8003f58 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2202      	movs	r2, #2
 8003ede:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2202      	movs	r2, #2
 8003ee6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2202      	movs	r2, #2
 8003eee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2202      	movs	r2, #2
 8003ef6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d003      	beq.n	8003f08 <HAL_TIM_Encoder_Start+0xc4>
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	2b04      	cmp	r3, #4
 8003f04:	d008      	beq.n	8003f18 <HAL_TIM_Encoder_Start+0xd4>
 8003f06:	e00f      	b.n	8003f28 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	2201      	movs	r2, #1
 8003f0e:	2100      	movs	r1, #0
 8003f10:	4618      	mov	r0, r3
 8003f12:	f000 fc27 	bl	8004764 <TIM_CCxChannelCmd>
      break;
 8003f16:	e016      	b.n	8003f46 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	2201      	movs	r2, #1
 8003f1e:	2104      	movs	r1, #4
 8003f20:	4618      	mov	r0, r3
 8003f22:	f000 fc1f 	bl	8004764 <TIM_CCxChannelCmd>
      break;
 8003f26:	e00e      	b.n	8003f46 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	2201      	movs	r2, #1
 8003f2e:	2100      	movs	r1, #0
 8003f30:	4618      	mov	r0, r3
 8003f32:	f000 fc17 	bl	8004764 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	2104      	movs	r1, #4
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f000 fc10 	bl	8004764 <TIM_CCxChannelCmd>
      break;
 8003f44:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f042 0201 	orr.w	r2, r2, #1
 8003f54:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003f56:	2300      	movs	r3, #0
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	3710      	adds	r7, #16
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}

08003f60 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b086      	sub	sp, #24
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	60f8      	str	r0, [r7, #12]
 8003f68:	60b9      	str	r1, [r7, #8]
 8003f6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f76:	2b01      	cmp	r3, #1
 8003f78:	d101      	bne.n	8003f7e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003f7a:	2302      	movs	r3, #2
 8003f7c:	e0ae      	b.n	80040dc <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2201      	movs	r2, #1
 8003f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2b0c      	cmp	r3, #12
 8003f8a:	f200 809f 	bhi.w	80040cc <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003f8e:	a201      	add	r2, pc, #4	; (adr r2, 8003f94 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f94:	08003fc9 	.word	0x08003fc9
 8003f98:	080040cd 	.word	0x080040cd
 8003f9c:	080040cd 	.word	0x080040cd
 8003fa0:	080040cd 	.word	0x080040cd
 8003fa4:	08004009 	.word	0x08004009
 8003fa8:	080040cd 	.word	0x080040cd
 8003fac:	080040cd 	.word	0x080040cd
 8003fb0:	080040cd 	.word	0x080040cd
 8003fb4:	0800404b 	.word	0x0800404b
 8003fb8:	080040cd 	.word	0x080040cd
 8003fbc:	080040cd 	.word	0x080040cd
 8003fc0:	080040cd 	.word	0x080040cd
 8003fc4:	0800408b 	.word	0x0800408b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	68b9      	ldr	r1, [r7, #8]
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f000 fa18 	bl	8004404 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	699a      	ldr	r2, [r3, #24]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f042 0208 	orr.w	r2, r2, #8
 8003fe2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	699a      	ldr	r2, [r3, #24]
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f022 0204 	bic.w	r2, r2, #4
 8003ff2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	6999      	ldr	r1, [r3, #24]
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	691a      	ldr	r2, [r3, #16]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	430a      	orrs	r2, r1
 8004004:	619a      	str	r2, [r3, #24]
      break;
 8004006:	e064      	b.n	80040d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	68b9      	ldr	r1, [r7, #8]
 800400e:	4618      	mov	r0, r3
 8004010:	f000 fa68 	bl	80044e4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	699a      	ldr	r2, [r3, #24]
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004022:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	699a      	ldr	r2, [r3, #24]
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004032:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	6999      	ldr	r1, [r3, #24]
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	691b      	ldr	r3, [r3, #16]
 800403e:	021a      	lsls	r2, r3, #8
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	430a      	orrs	r2, r1
 8004046:	619a      	str	r2, [r3, #24]
      break;
 8004048:	e043      	b.n	80040d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	68b9      	ldr	r1, [r7, #8]
 8004050:	4618      	mov	r0, r3
 8004052:	f000 fabd 	bl	80045d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	69da      	ldr	r2, [r3, #28]
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f042 0208 	orr.w	r2, r2, #8
 8004064:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	69da      	ldr	r2, [r3, #28]
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f022 0204 	bic.w	r2, r2, #4
 8004074:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	69d9      	ldr	r1, [r3, #28]
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	691a      	ldr	r2, [r3, #16]
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	430a      	orrs	r2, r1
 8004086:	61da      	str	r2, [r3, #28]
      break;
 8004088:	e023      	b.n	80040d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	68b9      	ldr	r1, [r7, #8]
 8004090:	4618      	mov	r0, r3
 8004092:	f000 fb11 	bl	80046b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	69da      	ldr	r2, [r3, #28]
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80040a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	69da      	ldr	r2, [r3, #28]
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	69d9      	ldr	r1, [r3, #28]
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	691b      	ldr	r3, [r3, #16]
 80040c0:	021a      	lsls	r2, r3, #8
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	430a      	orrs	r2, r1
 80040c8:	61da      	str	r2, [r3, #28]
      break;
 80040ca:	e002      	b.n	80040d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	75fb      	strb	r3, [r7, #23]
      break;
 80040d0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2200      	movs	r2, #0
 80040d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80040da:	7dfb      	ldrb	r3, [r7, #23]
}
 80040dc:	4618      	mov	r0, r3
 80040de:	3718      	adds	r7, #24
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}

080040e4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b083      	sub	sp, #12
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80040ec:	bf00      	nop
 80040ee:	370c      	adds	r7, #12
 80040f0:	46bd      	mov	sp, r7
 80040f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f6:	4770      	bx	lr

080040f8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b083      	sub	sp, #12
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8004100:	bf00      	nop
 8004102:	370c      	adds	r7, #12
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr

0800410c <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800410c:	b480      	push	{r7}
 800410e:	b083      	sub	sp, #12
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8004114:	bf00      	nop
 8004116:	370c      	adds	r7, #12
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr

08004120 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b084      	sub	sp, #16
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800412c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004132:	687a      	ldr	r2, [r7, #4]
 8004134:	429a      	cmp	r2, r3
 8004136:	d107      	bne.n	8004148 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2201      	movs	r2, #1
 800413c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2201      	movs	r2, #1
 8004142:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004146:	e02a      	b.n	800419e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800414c:	687a      	ldr	r2, [r7, #4]
 800414e:	429a      	cmp	r2, r3
 8004150:	d107      	bne.n	8004162 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2202      	movs	r2, #2
 8004156:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2201      	movs	r2, #1
 800415c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004160:	e01d      	b.n	800419e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004166:	687a      	ldr	r2, [r7, #4]
 8004168:	429a      	cmp	r2, r3
 800416a:	d107      	bne.n	800417c <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2204      	movs	r2, #4
 8004170:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	2201      	movs	r2, #1
 8004176:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800417a:	e010      	b.n	800419e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004180:	687a      	ldr	r2, [r7, #4]
 8004182:	429a      	cmp	r2, r3
 8004184:	d107      	bne.n	8004196 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2208      	movs	r2, #8
 800418a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2201      	movs	r2, #1
 8004190:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004194:	e003      	b.n	800419e <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2201      	movs	r2, #1
 800419a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800419e:	68f8      	ldr	r0, [r7, #12]
 80041a0:	f7ff ffb4 	bl	800410c <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	2200      	movs	r2, #0
 80041a8:	771a      	strb	r2, [r3, #28]
}
 80041aa:	bf00      	nop
 80041ac:	3710      	adds	r7, #16
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}

080041b2 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80041b2:	b580      	push	{r7, lr}
 80041b4:	b084      	sub	sp, #16
 80041b6:	af00      	add	r7, sp, #0
 80041b8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041be:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c4:	687a      	ldr	r2, [r7, #4]
 80041c6:	429a      	cmp	r2, r3
 80041c8:	d10b      	bne.n	80041e2 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2201      	movs	r2, #1
 80041ce:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	69db      	ldr	r3, [r3, #28]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d136      	bne.n	8004246 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	2201      	movs	r2, #1
 80041dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041e0:	e031      	b.n	8004246 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041e6:	687a      	ldr	r2, [r7, #4]
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d10b      	bne.n	8004204 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	2202      	movs	r2, #2
 80041f0:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	69db      	ldr	r3, [r3, #28]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d125      	bne.n	8004246 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	2201      	movs	r2, #1
 80041fe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004202:	e020      	b.n	8004246 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004208:	687a      	ldr	r2, [r7, #4]
 800420a:	429a      	cmp	r2, r3
 800420c:	d10b      	bne.n	8004226 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2204      	movs	r2, #4
 8004212:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	69db      	ldr	r3, [r3, #28]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d114      	bne.n	8004246 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2201      	movs	r2, #1
 8004220:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004224:	e00f      	b.n	8004246 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800422a:	687a      	ldr	r2, [r7, #4]
 800422c:	429a      	cmp	r2, r3
 800422e:	d10a      	bne.n	8004246 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2208      	movs	r2, #8
 8004234:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	69db      	ldr	r3, [r3, #28]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d103      	bne.n	8004246 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	2201      	movs	r2, #1
 8004242:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004246:	68f8      	ldr	r0, [r7, #12]
 8004248:	f7ff ff4c 	bl	80040e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2200      	movs	r2, #0
 8004250:	771a      	strb	r2, [r3, #28]
}
 8004252:	bf00      	nop
 8004254:	3710      	adds	r7, #16
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}

0800425a <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800425a:	b580      	push	{r7, lr}
 800425c:	b084      	sub	sp, #16
 800425e:	af00      	add	r7, sp, #0
 8004260:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004266:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800426c:	687a      	ldr	r2, [r7, #4]
 800426e:	429a      	cmp	r2, r3
 8004270:	d103      	bne.n	800427a <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2201      	movs	r2, #1
 8004276:	771a      	strb	r2, [r3, #28]
 8004278:	e019      	b.n	80042ae <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800427e:	687a      	ldr	r2, [r7, #4]
 8004280:	429a      	cmp	r2, r3
 8004282:	d103      	bne.n	800428c <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2202      	movs	r2, #2
 8004288:	771a      	strb	r2, [r3, #28]
 800428a:	e010      	b.n	80042ae <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004290:	687a      	ldr	r2, [r7, #4]
 8004292:	429a      	cmp	r2, r3
 8004294:	d103      	bne.n	800429e <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	2204      	movs	r2, #4
 800429a:	771a      	strb	r2, [r3, #28]
 800429c:	e007      	b.n	80042ae <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042a2:	687a      	ldr	r2, [r7, #4]
 80042a4:	429a      	cmp	r2, r3
 80042a6:	d102      	bne.n	80042ae <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2208      	movs	r2, #8
 80042ac:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80042ae:	68f8      	ldr	r0, [r7, #12]
 80042b0:	f7ff ff22 	bl	80040f8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2200      	movs	r2, #0
 80042b8:	771a      	strb	r2, [r3, #28]
}
 80042ba:	bf00      	nop
 80042bc:	3710      	adds	r7, #16
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}
	...

080042c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b085      	sub	sp, #20
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
 80042cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	4a40      	ldr	r2, [pc, #256]	; (80043d8 <TIM_Base_SetConfig+0x114>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d013      	beq.n	8004304 <TIM_Base_SetConfig+0x40>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042e2:	d00f      	beq.n	8004304 <TIM_Base_SetConfig+0x40>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	4a3d      	ldr	r2, [pc, #244]	; (80043dc <TIM_Base_SetConfig+0x118>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d00b      	beq.n	8004304 <TIM_Base_SetConfig+0x40>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	4a3c      	ldr	r2, [pc, #240]	; (80043e0 <TIM_Base_SetConfig+0x11c>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d007      	beq.n	8004304 <TIM_Base_SetConfig+0x40>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	4a3b      	ldr	r2, [pc, #236]	; (80043e4 <TIM_Base_SetConfig+0x120>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d003      	beq.n	8004304 <TIM_Base_SetConfig+0x40>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	4a3a      	ldr	r2, [pc, #232]	; (80043e8 <TIM_Base_SetConfig+0x124>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d108      	bne.n	8004316 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800430a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	68fa      	ldr	r2, [r7, #12]
 8004312:	4313      	orrs	r3, r2
 8004314:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	4a2f      	ldr	r2, [pc, #188]	; (80043d8 <TIM_Base_SetConfig+0x114>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d02b      	beq.n	8004376 <TIM_Base_SetConfig+0xb2>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004324:	d027      	beq.n	8004376 <TIM_Base_SetConfig+0xb2>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	4a2c      	ldr	r2, [pc, #176]	; (80043dc <TIM_Base_SetConfig+0x118>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d023      	beq.n	8004376 <TIM_Base_SetConfig+0xb2>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	4a2b      	ldr	r2, [pc, #172]	; (80043e0 <TIM_Base_SetConfig+0x11c>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d01f      	beq.n	8004376 <TIM_Base_SetConfig+0xb2>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	4a2a      	ldr	r2, [pc, #168]	; (80043e4 <TIM_Base_SetConfig+0x120>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d01b      	beq.n	8004376 <TIM_Base_SetConfig+0xb2>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	4a29      	ldr	r2, [pc, #164]	; (80043e8 <TIM_Base_SetConfig+0x124>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d017      	beq.n	8004376 <TIM_Base_SetConfig+0xb2>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	4a28      	ldr	r2, [pc, #160]	; (80043ec <TIM_Base_SetConfig+0x128>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d013      	beq.n	8004376 <TIM_Base_SetConfig+0xb2>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	4a27      	ldr	r2, [pc, #156]	; (80043f0 <TIM_Base_SetConfig+0x12c>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d00f      	beq.n	8004376 <TIM_Base_SetConfig+0xb2>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	4a26      	ldr	r2, [pc, #152]	; (80043f4 <TIM_Base_SetConfig+0x130>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d00b      	beq.n	8004376 <TIM_Base_SetConfig+0xb2>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	4a25      	ldr	r2, [pc, #148]	; (80043f8 <TIM_Base_SetConfig+0x134>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d007      	beq.n	8004376 <TIM_Base_SetConfig+0xb2>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	4a24      	ldr	r2, [pc, #144]	; (80043fc <TIM_Base_SetConfig+0x138>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d003      	beq.n	8004376 <TIM_Base_SetConfig+0xb2>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	4a23      	ldr	r2, [pc, #140]	; (8004400 <TIM_Base_SetConfig+0x13c>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d108      	bne.n	8004388 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800437c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	68db      	ldr	r3, [r3, #12]
 8004382:	68fa      	ldr	r2, [r7, #12]
 8004384:	4313      	orrs	r3, r2
 8004386:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	695b      	ldr	r3, [r3, #20]
 8004392:	4313      	orrs	r3, r2
 8004394:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	68fa      	ldr	r2, [r7, #12]
 800439a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	689a      	ldr	r2, [r3, #8]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	681a      	ldr	r2, [r3, #0]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	4a0a      	ldr	r2, [pc, #40]	; (80043d8 <TIM_Base_SetConfig+0x114>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d003      	beq.n	80043bc <TIM_Base_SetConfig+0xf8>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	4a0c      	ldr	r2, [pc, #48]	; (80043e8 <TIM_Base_SetConfig+0x124>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d103      	bne.n	80043c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	691a      	ldr	r2, [r3, #16]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2201      	movs	r2, #1
 80043c8:	615a      	str	r2, [r3, #20]
}
 80043ca:	bf00      	nop
 80043cc:	3714      	adds	r7, #20
 80043ce:	46bd      	mov	sp, r7
 80043d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d4:	4770      	bx	lr
 80043d6:	bf00      	nop
 80043d8:	40010000 	.word	0x40010000
 80043dc:	40000400 	.word	0x40000400
 80043e0:	40000800 	.word	0x40000800
 80043e4:	40000c00 	.word	0x40000c00
 80043e8:	40010400 	.word	0x40010400
 80043ec:	40014000 	.word	0x40014000
 80043f0:	40014400 	.word	0x40014400
 80043f4:	40014800 	.word	0x40014800
 80043f8:	40001800 	.word	0x40001800
 80043fc:	40001c00 	.word	0x40001c00
 8004400:	40002000 	.word	0x40002000

08004404 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004404:	b480      	push	{r7}
 8004406:	b087      	sub	sp, #28
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
 800440c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6a1b      	ldr	r3, [r3, #32]
 8004412:	f023 0201 	bic.w	r2, r3, #1
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6a1b      	ldr	r3, [r3, #32]
 800441e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	699b      	ldr	r3, [r3, #24]
 800442a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004432:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	f023 0303 	bic.w	r3, r3, #3
 800443a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	68fa      	ldr	r2, [r7, #12]
 8004442:	4313      	orrs	r3, r2
 8004444:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	f023 0302 	bic.w	r3, r3, #2
 800444c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	697a      	ldr	r2, [r7, #20]
 8004454:	4313      	orrs	r3, r2
 8004456:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	4a20      	ldr	r2, [pc, #128]	; (80044dc <TIM_OC1_SetConfig+0xd8>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d003      	beq.n	8004468 <TIM_OC1_SetConfig+0x64>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	4a1f      	ldr	r2, [pc, #124]	; (80044e0 <TIM_OC1_SetConfig+0xdc>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d10c      	bne.n	8004482 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	f023 0308 	bic.w	r3, r3, #8
 800446e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	68db      	ldr	r3, [r3, #12]
 8004474:	697a      	ldr	r2, [r7, #20]
 8004476:	4313      	orrs	r3, r2
 8004478:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	f023 0304 	bic.w	r3, r3, #4
 8004480:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	4a15      	ldr	r2, [pc, #84]	; (80044dc <TIM_OC1_SetConfig+0xd8>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d003      	beq.n	8004492 <TIM_OC1_SetConfig+0x8e>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	4a14      	ldr	r2, [pc, #80]	; (80044e0 <TIM_OC1_SetConfig+0xdc>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d111      	bne.n	80044b6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004498:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80044a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	695b      	ldr	r3, [r3, #20]
 80044a6:	693a      	ldr	r2, [r7, #16]
 80044a8:	4313      	orrs	r3, r2
 80044aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	699b      	ldr	r3, [r3, #24]
 80044b0:	693a      	ldr	r2, [r7, #16]
 80044b2:	4313      	orrs	r3, r2
 80044b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	693a      	ldr	r2, [r7, #16]
 80044ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	68fa      	ldr	r2, [r7, #12]
 80044c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	685a      	ldr	r2, [r3, #4]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	697a      	ldr	r2, [r7, #20]
 80044ce:	621a      	str	r2, [r3, #32]
}
 80044d0:	bf00      	nop
 80044d2:	371c      	adds	r7, #28
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr
 80044dc:	40010000 	.word	0x40010000
 80044e0:	40010400 	.word	0x40010400

080044e4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80044e4:	b480      	push	{r7}
 80044e6:	b087      	sub	sp, #28
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
 80044ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6a1b      	ldr	r3, [r3, #32]
 80044f2:	f023 0210 	bic.w	r2, r3, #16
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6a1b      	ldr	r3, [r3, #32]
 80044fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	699b      	ldr	r3, [r3, #24]
 800450a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004512:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800451a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	021b      	lsls	r3, r3, #8
 8004522:	68fa      	ldr	r2, [r7, #12]
 8004524:	4313      	orrs	r3, r2
 8004526:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	f023 0320 	bic.w	r3, r3, #32
 800452e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	011b      	lsls	r3, r3, #4
 8004536:	697a      	ldr	r2, [r7, #20]
 8004538:	4313      	orrs	r3, r2
 800453a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	4a22      	ldr	r2, [pc, #136]	; (80045c8 <TIM_OC2_SetConfig+0xe4>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d003      	beq.n	800454c <TIM_OC2_SetConfig+0x68>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	4a21      	ldr	r2, [pc, #132]	; (80045cc <TIM_OC2_SetConfig+0xe8>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d10d      	bne.n	8004568 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004552:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	011b      	lsls	r3, r3, #4
 800455a:	697a      	ldr	r2, [r7, #20]
 800455c:	4313      	orrs	r3, r2
 800455e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004566:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	4a17      	ldr	r2, [pc, #92]	; (80045c8 <TIM_OC2_SetConfig+0xe4>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d003      	beq.n	8004578 <TIM_OC2_SetConfig+0x94>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	4a16      	ldr	r2, [pc, #88]	; (80045cc <TIM_OC2_SetConfig+0xe8>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d113      	bne.n	80045a0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800457e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004586:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	695b      	ldr	r3, [r3, #20]
 800458c:	009b      	lsls	r3, r3, #2
 800458e:	693a      	ldr	r2, [r7, #16]
 8004590:	4313      	orrs	r3, r2
 8004592:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	699b      	ldr	r3, [r3, #24]
 8004598:	009b      	lsls	r3, r3, #2
 800459a:	693a      	ldr	r2, [r7, #16]
 800459c:	4313      	orrs	r3, r2
 800459e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	693a      	ldr	r2, [r7, #16]
 80045a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	68fa      	ldr	r2, [r7, #12]
 80045aa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	685a      	ldr	r2, [r3, #4]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	697a      	ldr	r2, [r7, #20]
 80045b8:	621a      	str	r2, [r3, #32]
}
 80045ba:	bf00      	nop
 80045bc:	371c      	adds	r7, #28
 80045be:	46bd      	mov	sp, r7
 80045c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c4:	4770      	bx	lr
 80045c6:	bf00      	nop
 80045c8:	40010000 	.word	0x40010000
 80045cc:	40010400 	.word	0x40010400

080045d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b087      	sub	sp, #28
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
 80045d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6a1b      	ldr	r3, [r3, #32]
 80045de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6a1b      	ldr	r3, [r3, #32]
 80045ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	69db      	ldr	r3, [r3, #28]
 80045f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	f023 0303 	bic.w	r3, r3, #3
 8004606:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	68fa      	ldr	r2, [r7, #12]
 800460e:	4313      	orrs	r3, r2
 8004610:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004618:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	689b      	ldr	r3, [r3, #8]
 800461e:	021b      	lsls	r3, r3, #8
 8004620:	697a      	ldr	r2, [r7, #20]
 8004622:	4313      	orrs	r3, r2
 8004624:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	4a21      	ldr	r2, [pc, #132]	; (80046b0 <TIM_OC3_SetConfig+0xe0>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d003      	beq.n	8004636 <TIM_OC3_SetConfig+0x66>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	4a20      	ldr	r2, [pc, #128]	; (80046b4 <TIM_OC3_SetConfig+0xe4>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d10d      	bne.n	8004652 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800463c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	68db      	ldr	r3, [r3, #12]
 8004642:	021b      	lsls	r3, r3, #8
 8004644:	697a      	ldr	r2, [r7, #20]
 8004646:	4313      	orrs	r3, r2
 8004648:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004650:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	4a16      	ldr	r2, [pc, #88]	; (80046b0 <TIM_OC3_SetConfig+0xe0>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d003      	beq.n	8004662 <TIM_OC3_SetConfig+0x92>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	4a15      	ldr	r2, [pc, #84]	; (80046b4 <TIM_OC3_SetConfig+0xe4>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d113      	bne.n	800468a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004668:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004670:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	695b      	ldr	r3, [r3, #20]
 8004676:	011b      	lsls	r3, r3, #4
 8004678:	693a      	ldr	r2, [r7, #16]
 800467a:	4313      	orrs	r3, r2
 800467c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	699b      	ldr	r3, [r3, #24]
 8004682:	011b      	lsls	r3, r3, #4
 8004684:	693a      	ldr	r2, [r7, #16]
 8004686:	4313      	orrs	r3, r2
 8004688:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	693a      	ldr	r2, [r7, #16]
 800468e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	68fa      	ldr	r2, [r7, #12]
 8004694:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	685a      	ldr	r2, [r3, #4]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	697a      	ldr	r2, [r7, #20]
 80046a2:	621a      	str	r2, [r3, #32]
}
 80046a4:	bf00      	nop
 80046a6:	371c      	adds	r7, #28
 80046a8:	46bd      	mov	sp, r7
 80046aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ae:	4770      	bx	lr
 80046b0:	40010000 	.word	0x40010000
 80046b4:	40010400 	.word	0x40010400

080046b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b087      	sub	sp, #28
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
 80046c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6a1b      	ldr	r3, [r3, #32]
 80046c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6a1b      	ldr	r3, [r3, #32]
 80046d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	69db      	ldr	r3, [r3, #28]
 80046de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	021b      	lsls	r3, r3, #8
 80046f6:	68fa      	ldr	r2, [r7, #12]
 80046f8:	4313      	orrs	r3, r2
 80046fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004702:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	031b      	lsls	r3, r3, #12
 800470a:	693a      	ldr	r2, [r7, #16]
 800470c:	4313      	orrs	r3, r2
 800470e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	4a12      	ldr	r2, [pc, #72]	; (800475c <TIM_OC4_SetConfig+0xa4>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d003      	beq.n	8004720 <TIM_OC4_SetConfig+0x68>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	4a11      	ldr	r2, [pc, #68]	; (8004760 <TIM_OC4_SetConfig+0xa8>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d109      	bne.n	8004734 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004726:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	695b      	ldr	r3, [r3, #20]
 800472c:	019b      	lsls	r3, r3, #6
 800472e:	697a      	ldr	r2, [r7, #20]
 8004730:	4313      	orrs	r3, r2
 8004732:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	697a      	ldr	r2, [r7, #20]
 8004738:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	68fa      	ldr	r2, [r7, #12]
 800473e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	685a      	ldr	r2, [r3, #4]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	693a      	ldr	r2, [r7, #16]
 800474c:	621a      	str	r2, [r3, #32]
}
 800474e:	bf00      	nop
 8004750:	371c      	adds	r7, #28
 8004752:	46bd      	mov	sp, r7
 8004754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004758:	4770      	bx	lr
 800475a:	bf00      	nop
 800475c:	40010000 	.word	0x40010000
 8004760:	40010400 	.word	0x40010400

08004764 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004764:	b480      	push	{r7}
 8004766:	b087      	sub	sp, #28
 8004768:	af00      	add	r7, sp, #0
 800476a:	60f8      	str	r0, [r7, #12]
 800476c:	60b9      	str	r1, [r7, #8]
 800476e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	f003 031f 	and.w	r3, r3, #31
 8004776:	2201      	movs	r2, #1
 8004778:	fa02 f303 	lsl.w	r3, r2, r3
 800477c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	6a1a      	ldr	r2, [r3, #32]
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	43db      	mvns	r3, r3
 8004786:	401a      	ands	r2, r3
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	6a1a      	ldr	r2, [r3, #32]
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	f003 031f 	and.w	r3, r3, #31
 8004796:	6879      	ldr	r1, [r7, #4]
 8004798:	fa01 f303 	lsl.w	r3, r1, r3
 800479c:	431a      	orrs	r2, r3
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	621a      	str	r2, [r3, #32]
}
 80047a2:	bf00      	nop
 80047a4:	371c      	adds	r7, #28
 80047a6:	46bd      	mov	sp, r7
 80047a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ac:	4770      	bx	lr
	...

080047b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b085      	sub	sp, #20
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
 80047b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	d101      	bne.n	80047c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80047c4:	2302      	movs	r3, #2
 80047c6:	e05a      	b.n	800487e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2201      	movs	r2, #1
 80047cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2202      	movs	r2, #2
 80047d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	68fa      	ldr	r2, [r7, #12]
 80047f6:	4313      	orrs	r3, r2
 80047f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	68fa      	ldr	r2, [r7, #12]
 8004800:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a21      	ldr	r2, [pc, #132]	; (800488c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d022      	beq.n	8004852 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004814:	d01d      	beq.n	8004852 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a1d      	ldr	r2, [pc, #116]	; (8004890 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d018      	beq.n	8004852 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a1b      	ldr	r2, [pc, #108]	; (8004894 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d013      	beq.n	8004852 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a1a      	ldr	r2, [pc, #104]	; (8004898 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d00e      	beq.n	8004852 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a18      	ldr	r2, [pc, #96]	; (800489c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d009      	beq.n	8004852 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a17      	ldr	r2, [pc, #92]	; (80048a0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d004      	beq.n	8004852 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a15      	ldr	r2, [pc, #84]	; (80048a4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d10c      	bne.n	800486c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004858:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	68ba      	ldr	r2, [r7, #8]
 8004860:	4313      	orrs	r3, r2
 8004862:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	68ba      	ldr	r2, [r7, #8]
 800486a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2201      	movs	r2, #1
 8004870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2200      	movs	r2, #0
 8004878:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800487c:	2300      	movs	r3, #0
}
 800487e:	4618      	mov	r0, r3
 8004880:	3714      	adds	r7, #20
 8004882:	46bd      	mov	sp, r7
 8004884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004888:	4770      	bx	lr
 800488a:	bf00      	nop
 800488c:	40010000 	.word	0x40010000
 8004890:	40000400 	.word	0x40000400
 8004894:	40000800 	.word	0x40000800
 8004898:	40000c00 	.word	0x40000c00
 800489c:	40010400 	.word	0x40010400
 80048a0:	40014000 	.word	0x40014000
 80048a4:	40001800 	.word	0x40001800

080048a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b082      	sub	sp, #8
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d101      	bne.n	80048ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	e03f      	b.n	800493a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048c0:	b2db      	uxtb	r3, r3
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d106      	bne.n	80048d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2200      	movs	r2, #0
 80048ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f7fc fd46 	bl	8001360 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2224      	movs	r2, #36	; 0x24
 80048d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	68da      	ldr	r2, [r3, #12]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80048ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80048ec:	6878      	ldr	r0, [r7, #4]
 80048ee:	f000 f829 	bl	8004944 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	691a      	ldr	r2, [r3, #16]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004900:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	695a      	ldr	r2, [r3, #20]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004910:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	68da      	ldr	r2, [r3, #12]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004920:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2200      	movs	r2, #0
 8004926:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2220      	movs	r2, #32
 800492c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2220      	movs	r2, #32
 8004934:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004938:	2300      	movs	r3, #0
}
 800493a:	4618      	mov	r0, r3
 800493c:	3708      	adds	r7, #8
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}
	...

08004944 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004944:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004948:	b0c0      	sub	sp, #256	; 0x100
 800494a:	af00      	add	r7, sp, #0
 800494c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	691b      	ldr	r3, [r3, #16]
 8004958:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800495c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004960:	68d9      	ldr	r1, [r3, #12]
 8004962:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004966:	681a      	ldr	r2, [r3, #0]
 8004968:	ea40 0301 	orr.w	r3, r0, r1
 800496c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800496e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004972:	689a      	ldr	r2, [r3, #8]
 8004974:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004978:	691b      	ldr	r3, [r3, #16]
 800497a:	431a      	orrs	r2, r3
 800497c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004980:	695b      	ldr	r3, [r3, #20]
 8004982:	431a      	orrs	r2, r3
 8004984:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004988:	69db      	ldr	r3, [r3, #28]
 800498a:	4313      	orrs	r3, r2
 800498c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004990:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	68db      	ldr	r3, [r3, #12]
 8004998:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800499c:	f021 010c 	bic.w	r1, r1, #12
 80049a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049a4:	681a      	ldr	r2, [r3, #0]
 80049a6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80049aa:	430b      	orrs	r3, r1
 80049ac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80049ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	695b      	ldr	r3, [r3, #20]
 80049b6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80049ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049be:	6999      	ldr	r1, [r3, #24]
 80049c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049c4:	681a      	ldr	r2, [r3, #0]
 80049c6:	ea40 0301 	orr.w	r3, r0, r1
 80049ca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80049cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049d0:	681a      	ldr	r2, [r3, #0]
 80049d2:	4b8f      	ldr	r3, [pc, #572]	; (8004c10 <UART_SetConfig+0x2cc>)
 80049d4:	429a      	cmp	r2, r3
 80049d6:	d005      	beq.n	80049e4 <UART_SetConfig+0xa0>
 80049d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049dc:	681a      	ldr	r2, [r3, #0]
 80049de:	4b8d      	ldr	r3, [pc, #564]	; (8004c14 <UART_SetConfig+0x2d0>)
 80049e0:	429a      	cmp	r2, r3
 80049e2:	d104      	bne.n	80049ee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80049e4:	f7fe fa8e 	bl	8002f04 <HAL_RCC_GetPCLK2Freq>
 80049e8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80049ec:	e003      	b.n	80049f6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80049ee:	f7fe fa75 	bl	8002edc <HAL_RCC_GetPCLK1Freq>
 80049f2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80049f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049fa:	69db      	ldr	r3, [r3, #28]
 80049fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a00:	f040 810c 	bne.w	8004c1c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004a04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a08:	2200      	movs	r2, #0
 8004a0a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004a0e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004a12:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004a16:	4622      	mov	r2, r4
 8004a18:	462b      	mov	r3, r5
 8004a1a:	1891      	adds	r1, r2, r2
 8004a1c:	65b9      	str	r1, [r7, #88]	; 0x58
 8004a1e:	415b      	adcs	r3, r3
 8004a20:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004a22:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004a26:	4621      	mov	r1, r4
 8004a28:	eb12 0801 	adds.w	r8, r2, r1
 8004a2c:	4629      	mov	r1, r5
 8004a2e:	eb43 0901 	adc.w	r9, r3, r1
 8004a32:	f04f 0200 	mov.w	r2, #0
 8004a36:	f04f 0300 	mov.w	r3, #0
 8004a3a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a3e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a42:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a46:	4690      	mov	r8, r2
 8004a48:	4699      	mov	r9, r3
 8004a4a:	4623      	mov	r3, r4
 8004a4c:	eb18 0303 	adds.w	r3, r8, r3
 8004a50:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004a54:	462b      	mov	r3, r5
 8004a56:	eb49 0303 	adc.w	r3, r9, r3
 8004a5a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004a5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	2200      	movs	r2, #0
 8004a66:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004a6a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004a6e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004a72:	460b      	mov	r3, r1
 8004a74:	18db      	adds	r3, r3, r3
 8004a76:	653b      	str	r3, [r7, #80]	; 0x50
 8004a78:	4613      	mov	r3, r2
 8004a7a:	eb42 0303 	adc.w	r3, r2, r3
 8004a7e:	657b      	str	r3, [r7, #84]	; 0x54
 8004a80:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004a84:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004a88:	f7fb fc12 	bl	80002b0 <__aeabi_uldivmod>
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	460b      	mov	r3, r1
 8004a90:	4b61      	ldr	r3, [pc, #388]	; (8004c18 <UART_SetConfig+0x2d4>)
 8004a92:	fba3 2302 	umull	r2, r3, r3, r2
 8004a96:	095b      	lsrs	r3, r3, #5
 8004a98:	011c      	lsls	r4, r3, #4
 8004a9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004aa4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004aa8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004aac:	4642      	mov	r2, r8
 8004aae:	464b      	mov	r3, r9
 8004ab0:	1891      	adds	r1, r2, r2
 8004ab2:	64b9      	str	r1, [r7, #72]	; 0x48
 8004ab4:	415b      	adcs	r3, r3
 8004ab6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ab8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004abc:	4641      	mov	r1, r8
 8004abe:	eb12 0a01 	adds.w	sl, r2, r1
 8004ac2:	4649      	mov	r1, r9
 8004ac4:	eb43 0b01 	adc.w	fp, r3, r1
 8004ac8:	f04f 0200 	mov.w	r2, #0
 8004acc:	f04f 0300 	mov.w	r3, #0
 8004ad0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004ad4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004ad8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004adc:	4692      	mov	sl, r2
 8004ade:	469b      	mov	fp, r3
 8004ae0:	4643      	mov	r3, r8
 8004ae2:	eb1a 0303 	adds.w	r3, sl, r3
 8004ae6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004aea:	464b      	mov	r3, r9
 8004aec:	eb4b 0303 	adc.w	r3, fp, r3
 8004af0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004af4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	2200      	movs	r2, #0
 8004afc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004b00:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004b04:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004b08:	460b      	mov	r3, r1
 8004b0a:	18db      	adds	r3, r3, r3
 8004b0c:	643b      	str	r3, [r7, #64]	; 0x40
 8004b0e:	4613      	mov	r3, r2
 8004b10:	eb42 0303 	adc.w	r3, r2, r3
 8004b14:	647b      	str	r3, [r7, #68]	; 0x44
 8004b16:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004b1a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004b1e:	f7fb fbc7 	bl	80002b0 <__aeabi_uldivmod>
 8004b22:	4602      	mov	r2, r0
 8004b24:	460b      	mov	r3, r1
 8004b26:	4611      	mov	r1, r2
 8004b28:	4b3b      	ldr	r3, [pc, #236]	; (8004c18 <UART_SetConfig+0x2d4>)
 8004b2a:	fba3 2301 	umull	r2, r3, r3, r1
 8004b2e:	095b      	lsrs	r3, r3, #5
 8004b30:	2264      	movs	r2, #100	; 0x64
 8004b32:	fb02 f303 	mul.w	r3, r2, r3
 8004b36:	1acb      	subs	r3, r1, r3
 8004b38:	00db      	lsls	r3, r3, #3
 8004b3a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004b3e:	4b36      	ldr	r3, [pc, #216]	; (8004c18 <UART_SetConfig+0x2d4>)
 8004b40:	fba3 2302 	umull	r2, r3, r3, r2
 8004b44:	095b      	lsrs	r3, r3, #5
 8004b46:	005b      	lsls	r3, r3, #1
 8004b48:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004b4c:	441c      	add	r4, r3
 8004b4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b52:	2200      	movs	r2, #0
 8004b54:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004b58:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004b5c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004b60:	4642      	mov	r2, r8
 8004b62:	464b      	mov	r3, r9
 8004b64:	1891      	adds	r1, r2, r2
 8004b66:	63b9      	str	r1, [r7, #56]	; 0x38
 8004b68:	415b      	adcs	r3, r3
 8004b6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b6c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004b70:	4641      	mov	r1, r8
 8004b72:	1851      	adds	r1, r2, r1
 8004b74:	6339      	str	r1, [r7, #48]	; 0x30
 8004b76:	4649      	mov	r1, r9
 8004b78:	414b      	adcs	r3, r1
 8004b7a:	637b      	str	r3, [r7, #52]	; 0x34
 8004b7c:	f04f 0200 	mov.w	r2, #0
 8004b80:	f04f 0300 	mov.w	r3, #0
 8004b84:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004b88:	4659      	mov	r1, fp
 8004b8a:	00cb      	lsls	r3, r1, #3
 8004b8c:	4651      	mov	r1, sl
 8004b8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b92:	4651      	mov	r1, sl
 8004b94:	00ca      	lsls	r2, r1, #3
 8004b96:	4610      	mov	r0, r2
 8004b98:	4619      	mov	r1, r3
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	4642      	mov	r2, r8
 8004b9e:	189b      	adds	r3, r3, r2
 8004ba0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004ba4:	464b      	mov	r3, r9
 8004ba6:	460a      	mov	r2, r1
 8004ba8:	eb42 0303 	adc.w	r3, r2, r3
 8004bac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004bb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004bbc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004bc0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004bc4:	460b      	mov	r3, r1
 8004bc6:	18db      	adds	r3, r3, r3
 8004bc8:	62bb      	str	r3, [r7, #40]	; 0x28
 8004bca:	4613      	mov	r3, r2
 8004bcc:	eb42 0303 	adc.w	r3, r2, r3
 8004bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004bd2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004bd6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004bda:	f7fb fb69 	bl	80002b0 <__aeabi_uldivmod>
 8004bde:	4602      	mov	r2, r0
 8004be0:	460b      	mov	r3, r1
 8004be2:	4b0d      	ldr	r3, [pc, #52]	; (8004c18 <UART_SetConfig+0x2d4>)
 8004be4:	fba3 1302 	umull	r1, r3, r3, r2
 8004be8:	095b      	lsrs	r3, r3, #5
 8004bea:	2164      	movs	r1, #100	; 0x64
 8004bec:	fb01 f303 	mul.w	r3, r1, r3
 8004bf0:	1ad3      	subs	r3, r2, r3
 8004bf2:	00db      	lsls	r3, r3, #3
 8004bf4:	3332      	adds	r3, #50	; 0x32
 8004bf6:	4a08      	ldr	r2, [pc, #32]	; (8004c18 <UART_SetConfig+0x2d4>)
 8004bf8:	fba2 2303 	umull	r2, r3, r2, r3
 8004bfc:	095b      	lsrs	r3, r3, #5
 8004bfe:	f003 0207 	and.w	r2, r3, #7
 8004c02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4422      	add	r2, r4
 8004c0a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004c0c:	e105      	b.n	8004e1a <UART_SetConfig+0x4d6>
 8004c0e:	bf00      	nop
 8004c10:	40011000 	.word	0x40011000
 8004c14:	40011400 	.word	0x40011400
 8004c18:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004c1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c20:	2200      	movs	r2, #0
 8004c22:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004c26:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004c2a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004c2e:	4642      	mov	r2, r8
 8004c30:	464b      	mov	r3, r9
 8004c32:	1891      	adds	r1, r2, r2
 8004c34:	6239      	str	r1, [r7, #32]
 8004c36:	415b      	adcs	r3, r3
 8004c38:	627b      	str	r3, [r7, #36]	; 0x24
 8004c3a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004c3e:	4641      	mov	r1, r8
 8004c40:	1854      	adds	r4, r2, r1
 8004c42:	4649      	mov	r1, r9
 8004c44:	eb43 0501 	adc.w	r5, r3, r1
 8004c48:	f04f 0200 	mov.w	r2, #0
 8004c4c:	f04f 0300 	mov.w	r3, #0
 8004c50:	00eb      	lsls	r3, r5, #3
 8004c52:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c56:	00e2      	lsls	r2, r4, #3
 8004c58:	4614      	mov	r4, r2
 8004c5a:	461d      	mov	r5, r3
 8004c5c:	4643      	mov	r3, r8
 8004c5e:	18e3      	adds	r3, r4, r3
 8004c60:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004c64:	464b      	mov	r3, r9
 8004c66:	eb45 0303 	adc.w	r3, r5, r3
 8004c6a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004c6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	2200      	movs	r2, #0
 8004c76:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004c7a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004c7e:	f04f 0200 	mov.w	r2, #0
 8004c82:	f04f 0300 	mov.w	r3, #0
 8004c86:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004c8a:	4629      	mov	r1, r5
 8004c8c:	008b      	lsls	r3, r1, #2
 8004c8e:	4621      	mov	r1, r4
 8004c90:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c94:	4621      	mov	r1, r4
 8004c96:	008a      	lsls	r2, r1, #2
 8004c98:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004c9c:	f7fb fb08 	bl	80002b0 <__aeabi_uldivmod>
 8004ca0:	4602      	mov	r2, r0
 8004ca2:	460b      	mov	r3, r1
 8004ca4:	4b60      	ldr	r3, [pc, #384]	; (8004e28 <UART_SetConfig+0x4e4>)
 8004ca6:	fba3 2302 	umull	r2, r3, r3, r2
 8004caa:	095b      	lsrs	r3, r3, #5
 8004cac:	011c      	lsls	r4, r3, #4
 8004cae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004cb8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004cbc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004cc0:	4642      	mov	r2, r8
 8004cc2:	464b      	mov	r3, r9
 8004cc4:	1891      	adds	r1, r2, r2
 8004cc6:	61b9      	str	r1, [r7, #24]
 8004cc8:	415b      	adcs	r3, r3
 8004cca:	61fb      	str	r3, [r7, #28]
 8004ccc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004cd0:	4641      	mov	r1, r8
 8004cd2:	1851      	adds	r1, r2, r1
 8004cd4:	6139      	str	r1, [r7, #16]
 8004cd6:	4649      	mov	r1, r9
 8004cd8:	414b      	adcs	r3, r1
 8004cda:	617b      	str	r3, [r7, #20]
 8004cdc:	f04f 0200 	mov.w	r2, #0
 8004ce0:	f04f 0300 	mov.w	r3, #0
 8004ce4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004ce8:	4659      	mov	r1, fp
 8004cea:	00cb      	lsls	r3, r1, #3
 8004cec:	4651      	mov	r1, sl
 8004cee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004cf2:	4651      	mov	r1, sl
 8004cf4:	00ca      	lsls	r2, r1, #3
 8004cf6:	4610      	mov	r0, r2
 8004cf8:	4619      	mov	r1, r3
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	4642      	mov	r2, r8
 8004cfe:	189b      	adds	r3, r3, r2
 8004d00:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004d04:	464b      	mov	r3, r9
 8004d06:	460a      	mov	r2, r1
 8004d08:	eb42 0303 	adc.w	r3, r2, r3
 8004d0c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004d10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	2200      	movs	r2, #0
 8004d18:	67bb      	str	r3, [r7, #120]	; 0x78
 8004d1a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004d1c:	f04f 0200 	mov.w	r2, #0
 8004d20:	f04f 0300 	mov.w	r3, #0
 8004d24:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004d28:	4649      	mov	r1, r9
 8004d2a:	008b      	lsls	r3, r1, #2
 8004d2c:	4641      	mov	r1, r8
 8004d2e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d32:	4641      	mov	r1, r8
 8004d34:	008a      	lsls	r2, r1, #2
 8004d36:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004d3a:	f7fb fab9 	bl	80002b0 <__aeabi_uldivmod>
 8004d3e:	4602      	mov	r2, r0
 8004d40:	460b      	mov	r3, r1
 8004d42:	4b39      	ldr	r3, [pc, #228]	; (8004e28 <UART_SetConfig+0x4e4>)
 8004d44:	fba3 1302 	umull	r1, r3, r3, r2
 8004d48:	095b      	lsrs	r3, r3, #5
 8004d4a:	2164      	movs	r1, #100	; 0x64
 8004d4c:	fb01 f303 	mul.w	r3, r1, r3
 8004d50:	1ad3      	subs	r3, r2, r3
 8004d52:	011b      	lsls	r3, r3, #4
 8004d54:	3332      	adds	r3, #50	; 0x32
 8004d56:	4a34      	ldr	r2, [pc, #208]	; (8004e28 <UART_SetConfig+0x4e4>)
 8004d58:	fba2 2303 	umull	r2, r3, r2, r3
 8004d5c:	095b      	lsrs	r3, r3, #5
 8004d5e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d62:	441c      	add	r4, r3
 8004d64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d68:	2200      	movs	r2, #0
 8004d6a:	673b      	str	r3, [r7, #112]	; 0x70
 8004d6c:	677a      	str	r2, [r7, #116]	; 0x74
 8004d6e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004d72:	4642      	mov	r2, r8
 8004d74:	464b      	mov	r3, r9
 8004d76:	1891      	adds	r1, r2, r2
 8004d78:	60b9      	str	r1, [r7, #8]
 8004d7a:	415b      	adcs	r3, r3
 8004d7c:	60fb      	str	r3, [r7, #12]
 8004d7e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d82:	4641      	mov	r1, r8
 8004d84:	1851      	adds	r1, r2, r1
 8004d86:	6039      	str	r1, [r7, #0]
 8004d88:	4649      	mov	r1, r9
 8004d8a:	414b      	adcs	r3, r1
 8004d8c:	607b      	str	r3, [r7, #4]
 8004d8e:	f04f 0200 	mov.w	r2, #0
 8004d92:	f04f 0300 	mov.w	r3, #0
 8004d96:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004d9a:	4659      	mov	r1, fp
 8004d9c:	00cb      	lsls	r3, r1, #3
 8004d9e:	4651      	mov	r1, sl
 8004da0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004da4:	4651      	mov	r1, sl
 8004da6:	00ca      	lsls	r2, r1, #3
 8004da8:	4610      	mov	r0, r2
 8004daa:	4619      	mov	r1, r3
 8004dac:	4603      	mov	r3, r0
 8004dae:	4642      	mov	r2, r8
 8004db0:	189b      	adds	r3, r3, r2
 8004db2:	66bb      	str	r3, [r7, #104]	; 0x68
 8004db4:	464b      	mov	r3, r9
 8004db6:	460a      	mov	r2, r1
 8004db8:	eb42 0303 	adc.w	r3, r2, r3
 8004dbc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004dbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	663b      	str	r3, [r7, #96]	; 0x60
 8004dc8:	667a      	str	r2, [r7, #100]	; 0x64
 8004dca:	f04f 0200 	mov.w	r2, #0
 8004dce:	f04f 0300 	mov.w	r3, #0
 8004dd2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004dd6:	4649      	mov	r1, r9
 8004dd8:	008b      	lsls	r3, r1, #2
 8004dda:	4641      	mov	r1, r8
 8004ddc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004de0:	4641      	mov	r1, r8
 8004de2:	008a      	lsls	r2, r1, #2
 8004de4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004de8:	f7fb fa62 	bl	80002b0 <__aeabi_uldivmod>
 8004dec:	4602      	mov	r2, r0
 8004dee:	460b      	mov	r3, r1
 8004df0:	4b0d      	ldr	r3, [pc, #52]	; (8004e28 <UART_SetConfig+0x4e4>)
 8004df2:	fba3 1302 	umull	r1, r3, r3, r2
 8004df6:	095b      	lsrs	r3, r3, #5
 8004df8:	2164      	movs	r1, #100	; 0x64
 8004dfa:	fb01 f303 	mul.w	r3, r1, r3
 8004dfe:	1ad3      	subs	r3, r2, r3
 8004e00:	011b      	lsls	r3, r3, #4
 8004e02:	3332      	adds	r3, #50	; 0x32
 8004e04:	4a08      	ldr	r2, [pc, #32]	; (8004e28 <UART_SetConfig+0x4e4>)
 8004e06:	fba2 2303 	umull	r2, r3, r2, r3
 8004e0a:	095b      	lsrs	r3, r3, #5
 8004e0c:	f003 020f 	and.w	r2, r3, #15
 8004e10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4422      	add	r2, r4
 8004e18:	609a      	str	r2, [r3, #8]
}
 8004e1a:	bf00      	nop
 8004e1c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004e20:	46bd      	mov	sp, r7
 8004e22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e26:	bf00      	nop
 8004e28:	51eb851f 	.word	0x51eb851f

08004e2c <__errno>:
 8004e2c:	4b01      	ldr	r3, [pc, #4]	; (8004e34 <__errno+0x8>)
 8004e2e:	6818      	ldr	r0, [r3, #0]
 8004e30:	4770      	bx	lr
 8004e32:	bf00      	nop
 8004e34:	2000001c 	.word	0x2000001c

08004e38 <__libc_init_array>:
 8004e38:	b570      	push	{r4, r5, r6, lr}
 8004e3a:	4d0d      	ldr	r5, [pc, #52]	; (8004e70 <__libc_init_array+0x38>)
 8004e3c:	4c0d      	ldr	r4, [pc, #52]	; (8004e74 <__libc_init_array+0x3c>)
 8004e3e:	1b64      	subs	r4, r4, r5
 8004e40:	10a4      	asrs	r4, r4, #2
 8004e42:	2600      	movs	r6, #0
 8004e44:	42a6      	cmp	r6, r4
 8004e46:	d109      	bne.n	8004e5c <__libc_init_array+0x24>
 8004e48:	4d0b      	ldr	r5, [pc, #44]	; (8004e78 <__libc_init_array+0x40>)
 8004e4a:	4c0c      	ldr	r4, [pc, #48]	; (8004e7c <__libc_init_array+0x44>)
 8004e4c:	f000 fc8e 	bl	800576c <_init>
 8004e50:	1b64      	subs	r4, r4, r5
 8004e52:	10a4      	asrs	r4, r4, #2
 8004e54:	2600      	movs	r6, #0
 8004e56:	42a6      	cmp	r6, r4
 8004e58:	d105      	bne.n	8004e66 <__libc_init_array+0x2e>
 8004e5a:	bd70      	pop	{r4, r5, r6, pc}
 8004e5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e60:	4798      	blx	r3
 8004e62:	3601      	adds	r6, #1
 8004e64:	e7ee      	b.n	8004e44 <__libc_init_array+0xc>
 8004e66:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e6a:	4798      	blx	r3
 8004e6c:	3601      	adds	r6, #1
 8004e6e:	e7f2      	b.n	8004e56 <__libc_init_array+0x1e>
 8004e70:	08006d08 	.word	0x08006d08
 8004e74:	08006d08 	.word	0x08006d08
 8004e78:	08006d08 	.word	0x08006d08
 8004e7c:	08006d0c 	.word	0x08006d0c

08004e80 <memset>:
 8004e80:	4402      	add	r2, r0
 8004e82:	4603      	mov	r3, r0
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d100      	bne.n	8004e8a <memset+0xa>
 8004e88:	4770      	bx	lr
 8004e8a:	f803 1b01 	strb.w	r1, [r3], #1
 8004e8e:	e7f9      	b.n	8004e84 <memset+0x4>

08004e90 <siprintf>:
 8004e90:	b40e      	push	{r1, r2, r3}
 8004e92:	b500      	push	{lr}
 8004e94:	b09c      	sub	sp, #112	; 0x70
 8004e96:	ab1d      	add	r3, sp, #116	; 0x74
 8004e98:	9002      	str	r0, [sp, #8]
 8004e9a:	9006      	str	r0, [sp, #24]
 8004e9c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004ea0:	4809      	ldr	r0, [pc, #36]	; (8004ec8 <siprintf+0x38>)
 8004ea2:	9107      	str	r1, [sp, #28]
 8004ea4:	9104      	str	r1, [sp, #16]
 8004ea6:	4909      	ldr	r1, [pc, #36]	; (8004ecc <siprintf+0x3c>)
 8004ea8:	f853 2b04 	ldr.w	r2, [r3], #4
 8004eac:	9105      	str	r1, [sp, #20]
 8004eae:	6800      	ldr	r0, [r0, #0]
 8004eb0:	9301      	str	r3, [sp, #4]
 8004eb2:	a902      	add	r1, sp, #8
 8004eb4:	f000 f868 	bl	8004f88 <_svfiprintf_r>
 8004eb8:	9b02      	ldr	r3, [sp, #8]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	701a      	strb	r2, [r3, #0]
 8004ebe:	b01c      	add	sp, #112	; 0x70
 8004ec0:	f85d eb04 	ldr.w	lr, [sp], #4
 8004ec4:	b003      	add	sp, #12
 8004ec6:	4770      	bx	lr
 8004ec8:	2000001c 	.word	0x2000001c
 8004ecc:	ffff0208 	.word	0xffff0208

08004ed0 <__ssputs_r>:
 8004ed0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ed4:	688e      	ldr	r6, [r1, #8]
 8004ed6:	429e      	cmp	r6, r3
 8004ed8:	4682      	mov	sl, r0
 8004eda:	460c      	mov	r4, r1
 8004edc:	4690      	mov	r8, r2
 8004ede:	461f      	mov	r7, r3
 8004ee0:	d838      	bhi.n	8004f54 <__ssputs_r+0x84>
 8004ee2:	898a      	ldrh	r2, [r1, #12]
 8004ee4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004ee8:	d032      	beq.n	8004f50 <__ssputs_r+0x80>
 8004eea:	6825      	ldr	r5, [r4, #0]
 8004eec:	6909      	ldr	r1, [r1, #16]
 8004eee:	eba5 0901 	sub.w	r9, r5, r1
 8004ef2:	6965      	ldr	r5, [r4, #20]
 8004ef4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004ef8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004efc:	3301      	adds	r3, #1
 8004efe:	444b      	add	r3, r9
 8004f00:	106d      	asrs	r5, r5, #1
 8004f02:	429d      	cmp	r5, r3
 8004f04:	bf38      	it	cc
 8004f06:	461d      	movcc	r5, r3
 8004f08:	0553      	lsls	r3, r2, #21
 8004f0a:	d531      	bpl.n	8004f70 <__ssputs_r+0xa0>
 8004f0c:	4629      	mov	r1, r5
 8004f0e:	f000 fb63 	bl	80055d8 <_malloc_r>
 8004f12:	4606      	mov	r6, r0
 8004f14:	b950      	cbnz	r0, 8004f2c <__ssputs_r+0x5c>
 8004f16:	230c      	movs	r3, #12
 8004f18:	f8ca 3000 	str.w	r3, [sl]
 8004f1c:	89a3      	ldrh	r3, [r4, #12]
 8004f1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f22:	81a3      	strh	r3, [r4, #12]
 8004f24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004f28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f2c:	6921      	ldr	r1, [r4, #16]
 8004f2e:	464a      	mov	r2, r9
 8004f30:	f000 fabe 	bl	80054b0 <memcpy>
 8004f34:	89a3      	ldrh	r3, [r4, #12]
 8004f36:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004f3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f3e:	81a3      	strh	r3, [r4, #12]
 8004f40:	6126      	str	r6, [r4, #16]
 8004f42:	6165      	str	r5, [r4, #20]
 8004f44:	444e      	add	r6, r9
 8004f46:	eba5 0509 	sub.w	r5, r5, r9
 8004f4a:	6026      	str	r6, [r4, #0]
 8004f4c:	60a5      	str	r5, [r4, #8]
 8004f4e:	463e      	mov	r6, r7
 8004f50:	42be      	cmp	r6, r7
 8004f52:	d900      	bls.n	8004f56 <__ssputs_r+0x86>
 8004f54:	463e      	mov	r6, r7
 8004f56:	6820      	ldr	r0, [r4, #0]
 8004f58:	4632      	mov	r2, r6
 8004f5a:	4641      	mov	r1, r8
 8004f5c:	f000 fab6 	bl	80054cc <memmove>
 8004f60:	68a3      	ldr	r3, [r4, #8]
 8004f62:	1b9b      	subs	r3, r3, r6
 8004f64:	60a3      	str	r3, [r4, #8]
 8004f66:	6823      	ldr	r3, [r4, #0]
 8004f68:	4433      	add	r3, r6
 8004f6a:	6023      	str	r3, [r4, #0]
 8004f6c:	2000      	movs	r0, #0
 8004f6e:	e7db      	b.n	8004f28 <__ssputs_r+0x58>
 8004f70:	462a      	mov	r2, r5
 8004f72:	f000 fba5 	bl	80056c0 <_realloc_r>
 8004f76:	4606      	mov	r6, r0
 8004f78:	2800      	cmp	r0, #0
 8004f7a:	d1e1      	bne.n	8004f40 <__ssputs_r+0x70>
 8004f7c:	6921      	ldr	r1, [r4, #16]
 8004f7e:	4650      	mov	r0, sl
 8004f80:	f000 fabe 	bl	8005500 <_free_r>
 8004f84:	e7c7      	b.n	8004f16 <__ssputs_r+0x46>
	...

08004f88 <_svfiprintf_r>:
 8004f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f8c:	4698      	mov	r8, r3
 8004f8e:	898b      	ldrh	r3, [r1, #12]
 8004f90:	061b      	lsls	r3, r3, #24
 8004f92:	b09d      	sub	sp, #116	; 0x74
 8004f94:	4607      	mov	r7, r0
 8004f96:	460d      	mov	r5, r1
 8004f98:	4614      	mov	r4, r2
 8004f9a:	d50e      	bpl.n	8004fba <_svfiprintf_r+0x32>
 8004f9c:	690b      	ldr	r3, [r1, #16]
 8004f9e:	b963      	cbnz	r3, 8004fba <_svfiprintf_r+0x32>
 8004fa0:	2140      	movs	r1, #64	; 0x40
 8004fa2:	f000 fb19 	bl	80055d8 <_malloc_r>
 8004fa6:	6028      	str	r0, [r5, #0]
 8004fa8:	6128      	str	r0, [r5, #16]
 8004faa:	b920      	cbnz	r0, 8004fb6 <_svfiprintf_r+0x2e>
 8004fac:	230c      	movs	r3, #12
 8004fae:	603b      	str	r3, [r7, #0]
 8004fb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004fb4:	e0d1      	b.n	800515a <_svfiprintf_r+0x1d2>
 8004fb6:	2340      	movs	r3, #64	; 0x40
 8004fb8:	616b      	str	r3, [r5, #20]
 8004fba:	2300      	movs	r3, #0
 8004fbc:	9309      	str	r3, [sp, #36]	; 0x24
 8004fbe:	2320      	movs	r3, #32
 8004fc0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004fc4:	f8cd 800c 	str.w	r8, [sp, #12]
 8004fc8:	2330      	movs	r3, #48	; 0x30
 8004fca:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005174 <_svfiprintf_r+0x1ec>
 8004fce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004fd2:	f04f 0901 	mov.w	r9, #1
 8004fd6:	4623      	mov	r3, r4
 8004fd8:	469a      	mov	sl, r3
 8004fda:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004fde:	b10a      	cbz	r2, 8004fe4 <_svfiprintf_r+0x5c>
 8004fe0:	2a25      	cmp	r2, #37	; 0x25
 8004fe2:	d1f9      	bne.n	8004fd8 <_svfiprintf_r+0x50>
 8004fe4:	ebba 0b04 	subs.w	fp, sl, r4
 8004fe8:	d00b      	beq.n	8005002 <_svfiprintf_r+0x7a>
 8004fea:	465b      	mov	r3, fp
 8004fec:	4622      	mov	r2, r4
 8004fee:	4629      	mov	r1, r5
 8004ff0:	4638      	mov	r0, r7
 8004ff2:	f7ff ff6d 	bl	8004ed0 <__ssputs_r>
 8004ff6:	3001      	adds	r0, #1
 8004ff8:	f000 80aa 	beq.w	8005150 <_svfiprintf_r+0x1c8>
 8004ffc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004ffe:	445a      	add	r2, fp
 8005000:	9209      	str	r2, [sp, #36]	; 0x24
 8005002:	f89a 3000 	ldrb.w	r3, [sl]
 8005006:	2b00      	cmp	r3, #0
 8005008:	f000 80a2 	beq.w	8005150 <_svfiprintf_r+0x1c8>
 800500c:	2300      	movs	r3, #0
 800500e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005012:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005016:	f10a 0a01 	add.w	sl, sl, #1
 800501a:	9304      	str	r3, [sp, #16]
 800501c:	9307      	str	r3, [sp, #28]
 800501e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005022:	931a      	str	r3, [sp, #104]	; 0x68
 8005024:	4654      	mov	r4, sl
 8005026:	2205      	movs	r2, #5
 8005028:	f814 1b01 	ldrb.w	r1, [r4], #1
 800502c:	4851      	ldr	r0, [pc, #324]	; (8005174 <_svfiprintf_r+0x1ec>)
 800502e:	f7fb f8ef 	bl	8000210 <memchr>
 8005032:	9a04      	ldr	r2, [sp, #16]
 8005034:	b9d8      	cbnz	r0, 800506e <_svfiprintf_r+0xe6>
 8005036:	06d0      	lsls	r0, r2, #27
 8005038:	bf44      	itt	mi
 800503a:	2320      	movmi	r3, #32
 800503c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005040:	0711      	lsls	r1, r2, #28
 8005042:	bf44      	itt	mi
 8005044:	232b      	movmi	r3, #43	; 0x2b
 8005046:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800504a:	f89a 3000 	ldrb.w	r3, [sl]
 800504e:	2b2a      	cmp	r3, #42	; 0x2a
 8005050:	d015      	beq.n	800507e <_svfiprintf_r+0xf6>
 8005052:	9a07      	ldr	r2, [sp, #28]
 8005054:	4654      	mov	r4, sl
 8005056:	2000      	movs	r0, #0
 8005058:	f04f 0c0a 	mov.w	ip, #10
 800505c:	4621      	mov	r1, r4
 800505e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005062:	3b30      	subs	r3, #48	; 0x30
 8005064:	2b09      	cmp	r3, #9
 8005066:	d94e      	bls.n	8005106 <_svfiprintf_r+0x17e>
 8005068:	b1b0      	cbz	r0, 8005098 <_svfiprintf_r+0x110>
 800506a:	9207      	str	r2, [sp, #28]
 800506c:	e014      	b.n	8005098 <_svfiprintf_r+0x110>
 800506e:	eba0 0308 	sub.w	r3, r0, r8
 8005072:	fa09 f303 	lsl.w	r3, r9, r3
 8005076:	4313      	orrs	r3, r2
 8005078:	9304      	str	r3, [sp, #16]
 800507a:	46a2      	mov	sl, r4
 800507c:	e7d2      	b.n	8005024 <_svfiprintf_r+0x9c>
 800507e:	9b03      	ldr	r3, [sp, #12]
 8005080:	1d19      	adds	r1, r3, #4
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	9103      	str	r1, [sp, #12]
 8005086:	2b00      	cmp	r3, #0
 8005088:	bfbb      	ittet	lt
 800508a:	425b      	neglt	r3, r3
 800508c:	f042 0202 	orrlt.w	r2, r2, #2
 8005090:	9307      	strge	r3, [sp, #28]
 8005092:	9307      	strlt	r3, [sp, #28]
 8005094:	bfb8      	it	lt
 8005096:	9204      	strlt	r2, [sp, #16]
 8005098:	7823      	ldrb	r3, [r4, #0]
 800509a:	2b2e      	cmp	r3, #46	; 0x2e
 800509c:	d10c      	bne.n	80050b8 <_svfiprintf_r+0x130>
 800509e:	7863      	ldrb	r3, [r4, #1]
 80050a0:	2b2a      	cmp	r3, #42	; 0x2a
 80050a2:	d135      	bne.n	8005110 <_svfiprintf_r+0x188>
 80050a4:	9b03      	ldr	r3, [sp, #12]
 80050a6:	1d1a      	adds	r2, r3, #4
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	9203      	str	r2, [sp, #12]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	bfb8      	it	lt
 80050b0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80050b4:	3402      	adds	r4, #2
 80050b6:	9305      	str	r3, [sp, #20]
 80050b8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005184 <_svfiprintf_r+0x1fc>
 80050bc:	7821      	ldrb	r1, [r4, #0]
 80050be:	2203      	movs	r2, #3
 80050c0:	4650      	mov	r0, sl
 80050c2:	f7fb f8a5 	bl	8000210 <memchr>
 80050c6:	b140      	cbz	r0, 80050da <_svfiprintf_r+0x152>
 80050c8:	2340      	movs	r3, #64	; 0x40
 80050ca:	eba0 000a 	sub.w	r0, r0, sl
 80050ce:	fa03 f000 	lsl.w	r0, r3, r0
 80050d2:	9b04      	ldr	r3, [sp, #16]
 80050d4:	4303      	orrs	r3, r0
 80050d6:	3401      	adds	r4, #1
 80050d8:	9304      	str	r3, [sp, #16]
 80050da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050de:	4826      	ldr	r0, [pc, #152]	; (8005178 <_svfiprintf_r+0x1f0>)
 80050e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80050e4:	2206      	movs	r2, #6
 80050e6:	f7fb f893 	bl	8000210 <memchr>
 80050ea:	2800      	cmp	r0, #0
 80050ec:	d038      	beq.n	8005160 <_svfiprintf_r+0x1d8>
 80050ee:	4b23      	ldr	r3, [pc, #140]	; (800517c <_svfiprintf_r+0x1f4>)
 80050f0:	bb1b      	cbnz	r3, 800513a <_svfiprintf_r+0x1b2>
 80050f2:	9b03      	ldr	r3, [sp, #12]
 80050f4:	3307      	adds	r3, #7
 80050f6:	f023 0307 	bic.w	r3, r3, #7
 80050fa:	3308      	adds	r3, #8
 80050fc:	9303      	str	r3, [sp, #12]
 80050fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005100:	4433      	add	r3, r6
 8005102:	9309      	str	r3, [sp, #36]	; 0x24
 8005104:	e767      	b.n	8004fd6 <_svfiprintf_r+0x4e>
 8005106:	fb0c 3202 	mla	r2, ip, r2, r3
 800510a:	460c      	mov	r4, r1
 800510c:	2001      	movs	r0, #1
 800510e:	e7a5      	b.n	800505c <_svfiprintf_r+0xd4>
 8005110:	2300      	movs	r3, #0
 8005112:	3401      	adds	r4, #1
 8005114:	9305      	str	r3, [sp, #20]
 8005116:	4619      	mov	r1, r3
 8005118:	f04f 0c0a 	mov.w	ip, #10
 800511c:	4620      	mov	r0, r4
 800511e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005122:	3a30      	subs	r2, #48	; 0x30
 8005124:	2a09      	cmp	r2, #9
 8005126:	d903      	bls.n	8005130 <_svfiprintf_r+0x1a8>
 8005128:	2b00      	cmp	r3, #0
 800512a:	d0c5      	beq.n	80050b8 <_svfiprintf_r+0x130>
 800512c:	9105      	str	r1, [sp, #20]
 800512e:	e7c3      	b.n	80050b8 <_svfiprintf_r+0x130>
 8005130:	fb0c 2101 	mla	r1, ip, r1, r2
 8005134:	4604      	mov	r4, r0
 8005136:	2301      	movs	r3, #1
 8005138:	e7f0      	b.n	800511c <_svfiprintf_r+0x194>
 800513a:	ab03      	add	r3, sp, #12
 800513c:	9300      	str	r3, [sp, #0]
 800513e:	462a      	mov	r2, r5
 8005140:	4b0f      	ldr	r3, [pc, #60]	; (8005180 <_svfiprintf_r+0x1f8>)
 8005142:	a904      	add	r1, sp, #16
 8005144:	4638      	mov	r0, r7
 8005146:	f3af 8000 	nop.w
 800514a:	1c42      	adds	r2, r0, #1
 800514c:	4606      	mov	r6, r0
 800514e:	d1d6      	bne.n	80050fe <_svfiprintf_r+0x176>
 8005150:	89ab      	ldrh	r3, [r5, #12]
 8005152:	065b      	lsls	r3, r3, #25
 8005154:	f53f af2c 	bmi.w	8004fb0 <_svfiprintf_r+0x28>
 8005158:	9809      	ldr	r0, [sp, #36]	; 0x24
 800515a:	b01d      	add	sp, #116	; 0x74
 800515c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005160:	ab03      	add	r3, sp, #12
 8005162:	9300      	str	r3, [sp, #0]
 8005164:	462a      	mov	r2, r5
 8005166:	4b06      	ldr	r3, [pc, #24]	; (8005180 <_svfiprintf_r+0x1f8>)
 8005168:	a904      	add	r1, sp, #16
 800516a:	4638      	mov	r0, r7
 800516c:	f000 f87a 	bl	8005264 <_printf_i>
 8005170:	e7eb      	b.n	800514a <_svfiprintf_r+0x1c2>
 8005172:	bf00      	nop
 8005174:	08006ccc 	.word	0x08006ccc
 8005178:	08006cd6 	.word	0x08006cd6
 800517c:	00000000 	.word	0x00000000
 8005180:	08004ed1 	.word	0x08004ed1
 8005184:	08006cd2 	.word	0x08006cd2

08005188 <_printf_common>:
 8005188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800518c:	4616      	mov	r6, r2
 800518e:	4699      	mov	r9, r3
 8005190:	688a      	ldr	r2, [r1, #8]
 8005192:	690b      	ldr	r3, [r1, #16]
 8005194:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005198:	4293      	cmp	r3, r2
 800519a:	bfb8      	it	lt
 800519c:	4613      	movlt	r3, r2
 800519e:	6033      	str	r3, [r6, #0]
 80051a0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80051a4:	4607      	mov	r7, r0
 80051a6:	460c      	mov	r4, r1
 80051a8:	b10a      	cbz	r2, 80051ae <_printf_common+0x26>
 80051aa:	3301      	adds	r3, #1
 80051ac:	6033      	str	r3, [r6, #0]
 80051ae:	6823      	ldr	r3, [r4, #0]
 80051b0:	0699      	lsls	r1, r3, #26
 80051b2:	bf42      	ittt	mi
 80051b4:	6833      	ldrmi	r3, [r6, #0]
 80051b6:	3302      	addmi	r3, #2
 80051b8:	6033      	strmi	r3, [r6, #0]
 80051ba:	6825      	ldr	r5, [r4, #0]
 80051bc:	f015 0506 	ands.w	r5, r5, #6
 80051c0:	d106      	bne.n	80051d0 <_printf_common+0x48>
 80051c2:	f104 0a19 	add.w	sl, r4, #25
 80051c6:	68e3      	ldr	r3, [r4, #12]
 80051c8:	6832      	ldr	r2, [r6, #0]
 80051ca:	1a9b      	subs	r3, r3, r2
 80051cc:	42ab      	cmp	r3, r5
 80051ce:	dc26      	bgt.n	800521e <_printf_common+0x96>
 80051d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80051d4:	1e13      	subs	r3, r2, #0
 80051d6:	6822      	ldr	r2, [r4, #0]
 80051d8:	bf18      	it	ne
 80051da:	2301      	movne	r3, #1
 80051dc:	0692      	lsls	r2, r2, #26
 80051de:	d42b      	bmi.n	8005238 <_printf_common+0xb0>
 80051e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80051e4:	4649      	mov	r1, r9
 80051e6:	4638      	mov	r0, r7
 80051e8:	47c0      	blx	r8
 80051ea:	3001      	adds	r0, #1
 80051ec:	d01e      	beq.n	800522c <_printf_common+0xa4>
 80051ee:	6823      	ldr	r3, [r4, #0]
 80051f0:	68e5      	ldr	r5, [r4, #12]
 80051f2:	6832      	ldr	r2, [r6, #0]
 80051f4:	f003 0306 	and.w	r3, r3, #6
 80051f8:	2b04      	cmp	r3, #4
 80051fa:	bf08      	it	eq
 80051fc:	1aad      	subeq	r5, r5, r2
 80051fe:	68a3      	ldr	r3, [r4, #8]
 8005200:	6922      	ldr	r2, [r4, #16]
 8005202:	bf0c      	ite	eq
 8005204:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005208:	2500      	movne	r5, #0
 800520a:	4293      	cmp	r3, r2
 800520c:	bfc4      	itt	gt
 800520e:	1a9b      	subgt	r3, r3, r2
 8005210:	18ed      	addgt	r5, r5, r3
 8005212:	2600      	movs	r6, #0
 8005214:	341a      	adds	r4, #26
 8005216:	42b5      	cmp	r5, r6
 8005218:	d11a      	bne.n	8005250 <_printf_common+0xc8>
 800521a:	2000      	movs	r0, #0
 800521c:	e008      	b.n	8005230 <_printf_common+0xa8>
 800521e:	2301      	movs	r3, #1
 8005220:	4652      	mov	r2, sl
 8005222:	4649      	mov	r1, r9
 8005224:	4638      	mov	r0, r7
 8005226:	47c0      	blx	r8
 8005228:	3001      	adds	r0, #1
 800522a:	d103      	bne.n	8005234 <_printf_common+0xac>
 800522c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005230:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005234:	3501      	adds	r5, #1
 8005236:	e7c6      	b.n	80051c6 <_printf_common+0x3e>
 8005238:	18e1      	adds	r1, r4, r3
 800523a:	1c5a      	adds	r2, r3, #1
 800523c:	2030      	movs	r0, #48	; 0x30
 800523e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005242:	4422      	add	r2, r4
 8005244:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005248:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800524c:	3302      	adds	r3, #2
 800524e:	e7c7      	b.n	80051e0 <_printf_common+0x58>
 8005250:	2301      	movs	r3, #1
 8005252:	4622      	mov	r2, r4
 8005254:	4649      	mov	r1, r9
 8005256:	4638      	mov	r0, r7
 8005258:	47c0      	blx	r8
 800525a:	3001      	adds	r0, #1
 800525c:	d0e6      	beq.n	800522c <_printf_common+0xa4>
 800525e:	3601      	adds	r6, #1
 8005260:	e7d9      	b.n	8005216 <_printf_common+0x8e>
	...

08005264 <_printf_i>:
 8005264:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005268:	7e0f      	ldrb	r7, [r1, #24]
 800526a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800526c:	2f78      	cmp	r7, #120	; 0x78
 800526e:	4691      	mov	r9, r2
 8005270:	4680      	mov	r8, r0
 8005272:	460c      	mov	r4, r1
 8005274:	469a      	mov	sl, r3
 8005276:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800527a:	d807      	bhi.n	800528c <_printf_i+0x28>
 800527c:	2f62      	cmp	r7, #98	; 0x62
 800527e:	d80a      	bhi.n	8005296 <_printf_i+0x32>
 8005280:	2f00      	cmp	r7, #0
 8005282:	f000 80d8 	beq.w	8005436 <_printf_i+0x1d2>
 8005286:	2f58      	cmp	r7, #88	; 0x58
 8005288:	f000 80a3 	beq.w	80053d2 <_printf_i+0x16e>
 800528c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005290:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005294:	e03a      	b.n	800530c <_printf_i+0xa8>
 8005296:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800529a:	2b15      	cmp	r3, #21
 800529c:	d8f6      	bhi.n	800528c <_printf_i+0x28>
 800529e:	a101      	add	r1, pc, #4	; (adr r1, 80052a4 <_printf_i+0x40>)
 80052a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80052a4:	080052fd 	.word	0x080052fd
 80052a8:	08005311 	.word	0x08005311
 80052ac:	0800528d 	.word	0x0800528d
 80052b0:	0800528d 	.word	0x0800528d
 80052b4:	0800528d 	.word	0x0800528d
 80052b8:	0800528d 	.word	0x0800528d
 80052bc:	08005311 	.word	0x08005311
 80052c0:	0800528d 	.word	0x0800528d
 80052c4:	0800528d 	.word	0x0800528d
 80052c8:	0800528d 	.word	0x0800528d
 80052cc:	0800528d 	.word	0x0800528d
 80052d0:	0800541d 	.word	0x0800541d
 80052d4:	08005341 	.word	0x08005341
 80052d8:	080053ff 	.word	0x080053ff
 80052dc:	0800528d 	.word	0x0800528d
 80052e0:	0800528d 	.word	0x0800528d
 80052e4:	0800543f 	.word	0x0800543f
 80052e8:	0800528d 	.word	0x0800528d
 80052ec:	08005341 	.word	0x08005341
 80052f0:	0800528d 	.word	0x0800528d
 80052f4:	0800528d 	.word	0x0800528d
 80052f8:	08005407 	.word	0x08005407
 80052fc:	682b      	ldr	r3, [r5, #0]
 80052fe:	1d1a      	adds	r2, r3, #4
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	602a      	str	r2, [r5, #0]
 8005304:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005308:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800530c:	2301      	movs	r3, #1
 800530e:	e0a3      	b.n	8005458 <_printf_i+0x1f4>
 8005310:	6820      	ldr	r0, [r4, #0]
 8005312:	6829      	ldr	r1, [r5, #0]
 8005314:	0606      	lsls	r6, r0, #24
 8005316:	f101 0304 	add.w	r3, r1, #4
 800531a:	d50a      	bpl.n	8005332 <_printf_i+0xce>
 800531c:	680e      	ldr	r6, [r1, #0]
 800531e:	602b      	str	r3, [r5, #0]
 8005320:	2e00      	cmp	r6, #0
 8005322:	da03      	bge.n	800532c <_printf_i+0xc8>
 8005324:	232d      	movs	r3, #45	; 0x2d
 8005326:	4276      	negs	r6, r6
 8005328:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800532c:	485e      	ldr	r0, [pc, #376]	; (80054a8 <_printf_i+0x244>)
 800532e:	230a      	movs	r3, #10
 8005330:	e019      	b.n	8005366 <_printf_i+0x102>
 8005332:	680e      	ldr	r6, [r1, #0]
 8005334:	602b      	str	r3, [r5, #0]
 8005336:	f010 0f40 	tst.w	r0, #64	; 0x40
 800533a:	bf18      	it	ne
 800533c:	b236      	sxthne	r6, r6
 800533e:	e7ef      	b.n	8005320 <_printf_i+0xbc>
 8005340:	682b      	ldr	r3, [r5, #0]
 8005342:	6820      	ldr	r0, [r4, #0]
 8005344:	1d19      	adds	r1, r3, #4
 8005346:	6029      	str	r1, [r5, #0]
 8005348:	0601      	lsls	r1, r0, #24
 800534a:	d501      	bpl.n	8005350 <_printf_i+0xec>
 800534c:	681e      	ldr	r6, [r3, #0]
 800534e:	e002      	b.n	8005356 <_printf_i+0xf2>
 8005350:	0646      	lsls	r6, r0, #25
 8005352:	d5fb      	bpl.n	800534c <_printf_i+0xe8>
 8005354:	881e      	ldrh	r6, [r3, #0]
 8005356:	4854      	ldr	r0, [pc, #336]	; (80054a8 <_printf_i+0x244>)
 8005358:	2f6f      	cmp	r7, #111	; 0x6f
 800535a:	bf0c      	ite	eq
 800535c:	2308      	moveq	r3, #8
 800535e:	230a      	movne	r3, #10
 8005360:	2100      	movs	r1, #0
 8005362:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005366:	6865      	ldr	r5, [r4, #4]
 8005368:	60a5      	str	r5, [r4, #8]
 800536a:	2d00      	cmp	r5, #0
 800536c:	bfa2      	ittt	ge
 800536e:	6821      	ldrge	r1, [r4, #0]
 8005370:	f021 0104 	bicge.w	r1, r1, #4
 8005374:	6021      	strge	r1, [r4, #0]
 8005376:	b90e      	cbnz	r6, 800537c <_printf_i+0x118>
 8005378:	2d00      	cmp	r5, #0
 800537a:	d04d      	beq.n	8005418 <_printf_i+0x1b4>
 800537c:	4615      	mov	r5, r2
 800537e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005382:	fb03 6711 	mls	r7, r3, r1, r6
 8005386:	5dc7      	ldrb	r7, [r0, r7]
 8005388:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800538c:	4637      	mov	r7, r6
 800538e:	42bb      	cmp	r3, r7
 8005390:	460e      	mov	r6, r1
 8005392:	d9f4      	bls.n	800537e <_printf_i+0x11a>
 8005394:	2b08      	cmp	r3, #8
 8005396:	d10b      	bne.n	80053b0 <_printf_i+0x14c>
 8005398:	6823      	ldr	r3, [r4, #0]
 800539a:	07de      	lsls	r6, r3, #31
 800539c:	d508      	bpl.n	80053b0 <_printf_i+0x14c>
 800539e:	6923      	ldr	r3, [r4, #16]
 80053a0:	6861      	ldr	r1, [r4, #4]
 80053a2:	4299      	cmp	r1, r3
 80053a4:	bfde      	ittt	le
 80053a6:	2330      	movle	r3, #48	; 0x30
 80053a8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80053ac:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80053b0:	1b52      	subs	r2, r2, r5
 80053b2:	6122      	str	r2, [r4, #16]
 80053b4:	f8cd a000 	str.w	sl, [sp]
 80053b8:	464b      	mov	r3, r9
 80053ba:	aa03      	add	r2, sp, #12
 80053bc:	4621      	mov	r1, r4
 80053be:	4640      	mov	r0, r8
 80053c0:	f7ff fee2 	bl	8005188 <_printf_common>
 80053c4:	3001      	adds	r0, #1
 80053c6:	d14c      	bne.n	8005462 <_printf_i+0x1fe>
 80053c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80053cc:	b004      	add	sp, #16
 80053ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053d2:	4835      	ldr	r0, [pc, #212]	; (80054a8 <_printf_i+0x244>)
 80053d4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80053d8:	6829      	ldr	r1, [r5, #0]
 80053da:	6823      	ldr	r3, [r4, #0]
 80053dc:	f851 6b04 	ldr.w	r6, [r1], #4
 80053e0:	6029      	str	r1, [r5, #0]
 80053e2:	061d      	lsls	r5, r3, #24
 80053e4:	d514      	bpl.n	8005410 <_printf_i+0x1ac>
 80053e6:	07df      	lsls	r7, r3, #31
 80053e8:	bf44      	itt	mi
 80053ea:	f043 0320 	orrmi.w	r3, r3, #32
 80053ee:	6023      	strmi	r3, [r4, #0]
 80053f0:	b91e      	cbnz	r6, 80053fa <_printf_i+0x196>
 80053f2:	6823      	ldr	r3, [r4, #0]
 80053f4:	f023 0320 	bic.w	r3, r3, #32
 80053f8:	6023      	str	r3, [r4, #0]
 80053fa:	2310      	movs	r3, #16
 80053fc:	e7b0      	b.n	8005360 <_printf_i+0xfc>
 80053fe:	6823      	ldr	r3, [r4, #0]
 8005400:	f043 0320 	orr.w	r3, r3, #32
 8005404:	6023      	str	r3, [r4, #0]
 8005406:	2378      	movs	r3, #120	; 0x78
 8005408:	4828      	ldr	r0, [pc, #160]	; (80054ac <_printf_i+0x248>)
 800540a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800540e:	e7e3      	b.n	80053d8 <_printf_i+0x174>
 8005410:	0659      	lsls	r1, r3, #25
 8005412:	bf48      	it	mi
 8005414:	b2b6      	uxthmi	r6, r6
 8005416:	e7e6      	b.n	80053e6 <_printf_i+0x182>
 8005418:	4615      	mov	r5, r2
 800541a:	e7bb      	b.n	8005394 <_printf_i+0x130>
 800541c:	682b      	ldr	r3, [r5, #0]
 800541e:	6826      	ldr	r6, [r4, #0]
 8005420:	6961      	ldr	r1, [r4, #20]
 8005422:	1d18      	adds	r0, r3, #4
 8005424:	6028      	str	r0, [r5, #0]
 8005426:	0635      	lsls	r5, r6, #24
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	d501      	bpl.n	8005430 <_printf_i+0x1cc>
 800542c:	6019      	str	r1, [r3, #0]
 800542e:	e002      	b.n	8005436 <_printf_i+0x1d2>
 8005430:	0670      	lsls	r0, r6, #25
 8005432:	d5fb      	bpl.n	800542c <_printf_i+0x1c8>
 8005434:	8019      	strh	r1, [r3, #0]
 8005436:	2300      	movs	r3, #0
 8005438:	6123      	str	r3, [r4, #16]
 800543a:	4615      	mov	r5, r2
 800543c:	e7ba      	b.n	80053b4 <_printf_i+0x150>
 800543e:	682b      	ldr	r3, [r5, #0]
 8005440:	1d1a      	adds	r2, r3, #4
 8005442:	602a      	str	r2, [r5, #0]
 8005444:	681d      	ldr	r5, [r3, #0]
 8005446:	6862      	ldr	r2, [r4, #4]
 8005448:	2100      	movs	r1, #0
 800544a:	4628      	mov	r0, r5
 800544c:	f7fa fee0 	bl	8000210 <memchr>
 8005450:	b108      	cbz	r0, 8005456 <_printf_i+0x1f2>
 8005452:	1b40      	subs	r0, r0, r5
 8005454:	6060      	str	r0, [r4, #4]
 8005456:	6863      	ldr	r3, [r4, #4]
 8005458:	6123      	str	r3, [r4, #16]
 800545a:	2300      	movs	r3, #0
 800545c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005460:	e7a8      	b.n	80053b4 <_printf_i+0x150>
 8005462:	6923      	ldr	r3, [r4, #16]
 8005464:	462a      	mov	r2, r5
 8005466:	4649      	mov	r1, r9
 8005468:	4640      	mov	r0, r8
 800546a:	47d0      	blx	sl
 800546c:	3001      	adds	r0, #1
 800546e:	d0ab      	beq.n	80053c8 <_printf_i+0x164>
 8005470:	6823      	ldr	r3, [r4, #0]
 8005472:	079b      	lsls	r3, r3, #30
 8005474:	d413      	bmi.n	800549e <_printf_i+0x23a>
 8005476:	68e0      	ldr	r0, [r4, #12]
 8005478:	9b03      	ldr	r3, [sp, #12]
 800547a:	4298      	cmp	r0, r3
 800547c:	bfb8      	it	lt
 800547e:	4618      	movlt	r0, r3
 8005480:	e7a4      	b.n	80053cc <_printf_i+0x168>
 8005482:	2301      	movs	r3, #1
 8005484:	4632      	mov	r2, r6
 8005486:	4649      	mov	r1, r9
 8005488:	4640      	mov	r0, r8
 800548a:	47d0      	blx	sl
 800548c:	3001      	adds	r0, #1
 800548e:	d09b      	beq.n	80053c8 <_printf_i+0x164>
 8005490:	3501      	adds	r5, #1
 8005492:	68e3      	ldr	r3, [r4, #12]
 8005494:	9903      	ldr	r1, [sp, #12]
 8005496:	1a5b      	subs	r3, r3, r1
 8005498:	42ab      	cmp	r3, r5
 800549a:	dcf2      	bgt.n	8005482 <_printf_i+0x21e>
 800549c:	e7eb      	b.n	8005476 <_printf_i+0x212>
 800549e:	2500      	movs	r5, #0
 80054a0:	f104 0619 	add.w	r6, r4, #25
 80054a4:	e7f5      	b.n	8005492 <_printf_i+0x22e>
 80054a6:	bf00      	nop
 80054a8:	08006cdd 	.word	0x08006cdd
 80054ac:	08006cee 	.word	0x08006cee

080054b0 <memcpy>:
 80054b0:	440a      	add	r2, r1
 80054b2:	4291      	cmp	r1, r2
 80054b4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80054b8:	d100      	bne.n	80054bc <memcpy+0xc>
 80054ba:	4770      	bx	lr
 80054bc:	b510      	push	{r4, lr}
 80054be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80054c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80054c6:	4291      	cmp	r1, r2
 80054c8:	d1f9      	bne.n	80054be <memcpy+0xe>
 80054ca:	bd10      	pop	{r4, pc}

080054cc <memmove>:
 80054cc:	4288      	cmp	r0, r1
 80054ce:	b510      	push	{r4, lr}
 80054d0:	eb01 0402 	add.w	r4, r1, r2
 80054d4:	d902      	bls.n	80054dc <memmove+0x10>
 80054d6:	4284      	cmp	r4, r0
 80054d8:	4623      	mov	r3, r4
 80054da:	d807      	bhi.n	80054ec <memmove+0x20>
 80054dc:	1e43      	subs	r3, r0, #1
 80054de:	42a1      	cmp	r1, r4
 80054e0:	d008      	beq.n	80054f4 <memmove+0x28>
 80054e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80054e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80054ea:	e7f8      	b.n	80054de <memmove+0x12>
 80054ec:	4402      	add	r2, r0
 80054ee:	4601      	mov	r1, r0
 80054f0:	428a      	cmp	r2, r1
 80054f2:	d100      	bne.n	80054f6 <memmove+0x2a>
 80054f4:	bd10      	pop	{r4, pc}
 80054f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80054fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80054fe:	e7f7      	b.n	80054f0 <memmove+0x24>

08005500 <_free_r>:
 8005500:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005502:	2900      	cmp	r1, #0
 8005504:	d044      	beq.n	8005590 <_free_r+0x90>
 8005506:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800550a:	9001      	str	r0, [sp, #4]
 800550c:	2b00      	cmp	r3, #0
 800550e:	f1a1 0404 	sub.w	r4, r1, #4
 8005512:	bfb8      	it	lt
 8005514:	18e4      	addlt	r4, r4, r3
 8005516:	f000 f913 	bl	8005740 <__malloc_lock>
 800551a:	4a1e      	ldr	r2, [pc, #120]	; (8005594 <_free_r+0x94>)
 800551c:	9801      	ldr	r0, [sp, #4]
 800551e:	6813      	ldr	r3, [r2, #0]
 8005520:	b933      	cbnz	r3, 8005530 <_free_r+0x30>
 8005522:	6063      	str	r3, [r4, #4]
 8005524:	6014      	str	r4, [r2, #0]
 8005526:	b003      	add	sp, #12
 8005528:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800552c:	f000 b90e 	b.w	800574c <__malloc_unlock>
 8005530:	42a3      	cmp	r3, r4
 8005532:	d908      	bls.n	8005546 <_free_r+0x46>
 8005534:	6825      	ldr	r5, [r4, #0]
 8005536:	1961      	adds	r1, r4, r5
 8005538:	428b      	cmp	r3, r1
 800553a:	bf01      	itttt	eq
 800553c:	6819      	ldreq	r1, [r3, #0]
 800553e:	685b      	ldreq	r3, [r3, #4]
 8005540:	1949      	addeq	r1, r1, r5
 8005542:	6021      	streq	r1, [r4, #0]
 8005544:	e7ed      	b.n	8005522 <_free_r+0x22>
 8005546:	461a      	mov	r2, r3
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	b10b      	cbz	r3, 8005550 <_free_r+0x50>
 800554c:	42a3      	cmp	r3, r4
 800554e:	d9fa      	bls.n	8005546 <_free_r+0x46>
 8005550:	6811      	ldr	r1, [r2, #0]
 8005552:	1855      	adds	r5, r2, r1
 8005554:	42a5      	cmp	r5, r4
 8005556:	d10b      	bne.n	8005570 <_free_r+0x70>
 8005558:	6824      	ldr	r4, [r4, #0]
 800555a:	4421      	add	r1, r4
 800555c:	1854      	adds	r4, r2, r1
 800555e:	42a3      	cmp	r3, r4
 8005560:	6011      	str	r1, [r2, #0]
 8005562:	d1e0      	bne.n	8005526 <_free_r+0x26>
 8005564:	681c      	ldr	r4, [r3, #0]
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	6053      	str	r3, [r2, #4]
 800556a:	4421      	add	r1, r4
 800556c:	6011      	str	r1, [r2, #0]
 800556e:	e7da      	b.n	8005526 <_free_r+0x26>
 8005570:	d902      	bls.n	8005578 <_free_r+0x78>
 8005572:	230c      	movs	r3, #12
 8005574:	6003      	str	r3, [r0, #0]
 8005576:	e7d6      	b.n	8005526 <_free_r+0x26>
 8005578:	6825      	ldr	r5, [r4, #0]
 800557a:	1961      	adds	r1, r4, r5
 800557c:	428b      	cmp	r3, r1
 800557e:	bf04      	itt	eq
 8005580:	6819      	ldreq	r1, [r3, #0]
 8005582:	685b      	ldreq	r3, [r3, #4]
 8005584:	6063      	str	r3, [r4, #4]
 8005586:	bf04      	itt	eq
 8005588:	1949      	addeq	r1, r1, r5
 800558a:	6021      	streq	r1, [r4, #0]
 800558c:	6054      	str	r4, [r2, #4]
 800558e:	e7ca      	b.n	8005526 <_free_r+0x26>
 8005590:	b003      	add	sp, #12
 8005592:	bd30      	pop	{r4, r5, pc}
 8005594:	20000434 	.word	0x20000434

08005598 <sbrk_aligned>:
 8005598:	b570      	push	{r4, r5, r6, lr}
 800559a:	4e0e      	ldr	r6, [pc, #56]	; (80055d4 <sbrk_aligned+0x3c>)
 800559c:	460c      	mov	r4, r1
 800559e:	6831      	ldr	r1, [r6, #0]
 80055a0:	4605      	mov	r5, r0
 80055a2:	b911      	cbnz	r1, 80055aa <sbrk_aligned+0x12>
 80055a4:	f000 f8bc 	bl	8005720 <_sbrk_r>
 80055a8:	6030      	str	r0, [r6, #0]
 80055aa:	4621      	mov	r1, r4
 80055ac:	4628      	mov	r0, r5
 80055ae:	f000 f8b7 	bl	8005720 <_sbrk_r>
 80055b2:	1c43      	adds	r3, r0, #1
 80055b4:	d00a      	beq.n	80055cc <sbrk_aligned+0x34>
 80055b6:	1cc4      	adds	r4, r0, #3
 80055b8:	f024 0403 	bic.w	r4, r4, #3
 80055bc:	42a0      	cmp	r0, r4
 80055be:	d007      	beq.n	80055d0 <sbrk_aligned+0x38>
 80055c0:	1a21      	subs	r1, r4, r0
 80055c2:	4628      	mov	r0, r5
 80055c4:	f000 f8ac 	bl	8005720 <_sbrk_r>
 80055c8:	3001      	adds	r0, #1
 80055ca:	d101      	bne.n	80055d0 <sbrk_aligned+0x38>
 80055cc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80055d0:	4620      	mov	r0, r4
 80055d2:	bd70      	pop	{r4, r5, r6, pc}
 80055d4:	20000438 	.word	0x20000438

080055d8 <_malloc_r>:
 80055d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055dc:	1ccd      	adds	r5, r1, #3
 80055de:	f025 0503 	bic.w	r5, r5, #3
 80055e2:	3508      	adds	r5, #8
 80055e4:	2d0c      	cmp	r5, #12
 80055e6:	bf38      	it	cc
 80055e8:	250c      	movcc	r5, #12
 80055ea:	2d00      	cmp	r5, #0
 80055ec:	4607      	mov	r7, r0
 80055ee:	db01      	blt.n	80055f4 <_malloc_r+0x1c>
 80055f0:	42a9      	cmp	r1, r5
 80055f2:	d905      	bls.n	8005600 <_malloc_r+0x28>
 80055f4:	230c      	movs	r3, #12
 80055f6:	603b      	str	r3, [r7, #0]
 80055f8:	2600      	movs	r6, #0
 80055fa:	4630      	mov	r0, r6
 80055fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005600:	4e2e      	ldr	r6, [pc, #184]	; (80056bc <_malloc_r+0xe4>)
 8005602:	f000 f89d 	bl	8005740 <__malloc_lock>
 8005606:	6833      	ldr	r3, [r6, #0]
 8005608:	461c      	mov	r4, r3
 800560a:	bb34      	cbnz	r4, 800565a <_malloc_r+0x82>
 800560c:	4629      	mov	r1, r5
 800560e:	4638      	mov	r0, r7
 8005610:	f7ff ffc2 	bl	8005598 <sbrk_aligned>
 8005614:	1c43      	adds	r3, r0, #1
 8005616:	4604      	mov	r4, r0
 8005618:	d14d      	bne.n	80056b6 <_malloc_r+0xde>
 800561a:	6834      	ldr	r4, [r6, #0]
 800561c:	4626      	mov	r6, r4
 800561e:	2e00      	cmp	r6, #0
 8005620:	d140      	bne.n	80056a4 <_malloc_r+0xcc>
 8005622:	6823      	ldr	r3, [r4, #0]
 8005624:	4631      	mov	r1, r6
 8005626:	4638      	mov	r0, r7
 8005628:	eb04 0803 	add.w	r8, r4, r3
 800562c:	f000 f878 	bl	8005720 <_sbrk_r>
 8005630:	4580      	cmp	r8, r0
 8005632:	d13a      	bne.n	80056aa <_malloc_r+0xd2>
 8005634:	6821      	ldr	r1, [r4, #0]
 8005636:	3503      	adds	r5, #3
 8005638:	1a6d      	subs	r5, r5, r1
 800563a:	f025 0503 	bic.w	r5, r5, #3
 800563e:	3508      	adds	r5, #8
 8005640:	2d0c      	cmp	r5, #12
 8005642:	bf38      	it	cc
 8005644:	250c      	movcc	r5, #12
 8005646:	4629      	mov	r1, r5
 8005648:	4638      	mov	r0, r7
 800564a:	f7ff ffa5 	bl	8005598 <sbrk_aligned>
 800564e:	3001      	adds	r0, #1
 8005650:	d02b      	beq.n	80056aa <_malloc_r+0xd2>
 8005652:	6823      	ldr	r3, [r4, #0]
 8005654:	442b      	add	r3, r5
 8005656:	6023      	str	r3, [r4, #0]
 8005658:	e00e      	b.n	8005678 <_malloc_r+0xa0>
 800565a:	6822      	ldr	r2, [r4, #0]
 800565c:	1b52      	subs	r2, r2, r5
 800565e:	d41e      	bmi.n	800569e <_malloc_r+0xc6>
 8005660:	2a0b      	cmp	r2, #11
 8005662:	d916      	bls.n	8005692 <_malloc_r+0xba>
 8005664:	1961      	adds	r1, r4, r5
 8005666:	42a3      	cmp	r3, r4
 8005668:	6025      	str	r5, [r4, #0]
 800566a:	bf18      	it	ne
 800566c:	6059      	strne	r1, [r3, #4]
 800566e:	6863      	ldr	r3, [r4, #4]
 8005670:	bf08      	it	eq
 8005672:	6031      	streq	r1, [r6, #0]
 8005674:	5162      	str	r2, [r4, r5]
 8005676:	604b      	str	r3, [r1, #4]
 8005678:	4638      	mov	r0, r7
 800567a:	f104 060b 	add.w	r6, r4, #11
 800567e:	f000 f865 	bl	800574c <__malloc_unlock>
 8005682:	f026 0607 	bic.w	r6, r6, #7
 8005686:	1d23      	adds	r3, r4, #4
 8005688:	1af2      	subs	r2, r6, r3
 800568a:	d0b6      	beq.n	80055fa <_malloc_r+0x22>
 800568c:	1b9b      	subs	r3, r3, r6
 800568e:	50a3      	str	r3, [r4, r2]
 8005690:	e7b3      	b.n	80055fa <_malloc_r+0x22>
 8005692:	6862      	ldr	r2, [r4, #4]
 8005694:	42a3      	cmp	r3, r4
 8005696:	bf0c      	ite	eq
 8005698:	6032      	streq	r2, [r6, #0]
 800569a:	605a      	strne	r2, [r3, #4]
 800569c:	e7ec      	b.n	8005678 <_malloc_r+0xa0>
 800569e:	4623      	mov	r3, r4
 80056a0:	6864      	ldr	r4, [r4, #4]
 80056a2:	e7b2      	b.n	800560a <_malloc_r+0x32>
 80056a4:	4634      	mov	r4, r6
 80056a6:	6876      	ldr	r6, [r6, #4]
 80056a8:	e7b9      	b.n	800561e <_malloc_r+0x46>
 80056aa:	230c      	movs	r3, #12
 80056ac:	603b      	str	r3, [r7, #0]
 80056ae:	4638      	mov	r0, r7
 80056b0:	f000 f84c 	bl	800574c <__malloc_unlock>
 80056b4:	e7a1      	b.n	80055fa <_malloc_r+0x22>
 80056b6:	6025      	str	r5, [r4, #0]
 80056b8:	e7de      	b.n	8005678 <_malloc_r+0xa0>
 80056ba:	bf00      	nop
 80056bc:	20000434 	.word	0x20000434

080056c0 <_realloc_r>:
 80056c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056c4:	4680      	mov	r8, r0
 80056c6:	4614      	mov	r4, r2
 80056c8:	460e      	mov	r6, r1
 80056ca:	b921      	cbnz	r1, 80056d6 <_realloc_r+0x16>
 80056cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80056d0:	4611      	mov	r1, r2
 80056d2:	f7ff bf81 	b.w	80055d8 <_malloc_r>
 80056d6:	b92a      	cbnz	r2, 80056e4 <_realloc_r+0x24>
 80056d8:	f7ff ff12 	bl	8005500 <_free_r>
 80056dc:	4625      	mov	r5, r4
 80056de:	4628      	mov	r0, r5
 80056e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80056e4:	f000 f838 	bl	8005758 <_malloc_usable_size_r>
 80056e8:	4284      	cmp	r4, r0
 80056ea:	4607      	mov	r7, r0
 80056ec:	d802      	bhi.n	80056f4 <_realloc_r+0x34>
 80056ee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80056f2:	d812      	bhi.n	800571a <_realloc_r+0x5a>
 80056f4:	4621      	mov	r1, r4
 80056f6:	4640      	mov	r0, r8
 80056f8:	f7ff ff6e 	bl	80055d8 <_malloc_r>
 80056fc:	4605      	mov	r5, r0
 80056fe:	2800      	cmp	r0, #0
 8005700:	d0ed      	beq.n	80056de <_realloc_r+0x1e>
 8005702:	42bc      	cmp	r4, r7
 8005704:	4622      	mov	r2, r4
 8005706:	4631      	mov	r1, r6
 8005708:	bf28      	it	cs
 800570a:	463a      	movcs	r2, r7
 800570c:	f7ff fed0 	bl	80054b0 <memcpy>
 8005710:	4631      	mov	r1, r6
 8005712:	4640      	mov	r0, r8
 8005714:	f7ff fef4 	bl	8005500 <_free_r>
 8005718:	e7e1      	b.n	80056de <_realloc_r+0x1e>
 800571a:	4635      	mov	r5, r6
 800571c:	e7df      	b.n	80056de <_realloc_r+0x1e>
	...

08005720 <_sbrk_r>:
 8005720:	b538      	push	{r3, r4, r5, lr}
 8005722:	4d06      	ldr	r5, [pc, #24]	; (800573c <_sbrk_r+0x1c>)
 8005724:	2300      	movs	r3, #0
 8005726:	4604      	mov	r4, r0
 8005728:	4608      	mov	r0, r1
 800572a:	602b      	str	r3, [r5, #0]
 800572c:	f7fb fc20 	bl	8000f70 <_sbrk>
 8005730:	1c43      	adds	r3, r0, #1
 8005732:	d102      	bne.n	800573a <_sbrk_r+0x1a>
 8005734:	682b      	ldr	r3, [r5, #0]
 8005736:	b103      	cbz	r3, 800573a <_sbrk_r+0x1a>
 8005738:	6023      	str	r3, [r4, #0]
 800573a:	bd38      	pop	{r3, r4, r5, pc}
 800573c:	2000043c 	.word	0x2000043c

08005740 <__malloc_lock>:
 8005740:	4801      	ldr	r0, [pc, #4]	; (8005748 <__malloc_lock+0x8>)
 8005742:	f000 b811 	b.w	8005768 <__retarget_lock_acquire_recursive>
 8005746:	bf00      	nop
 8005748:	20000440 	.word	0x20000440

0800574c <__malloc_unlock>:
 800574c:	4801      	ldr	r0, [pc, #4]	; (8005754 <__malloc_unlock+0x8>)
 800574e:	f000 b80c 	b.w	800576a <__retarget_lock_release_recursive>
 8005752:	bf00      	nop
 8005754:	20000440 	.word	0x20000440

08005758 <_malloc_usable_size_r>:
 8005758:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800575c:	1f18      	subs	r0, r3, #4
 800575e:	2b00      	cmp	r3, #0
 8005760:	bfbc      	itt	lt
 8005762:	580b      	ldrlt	r3, [r1, r0]
 8005764:	18c0      	addlt	r0, r0, r3
 8005766:	4770      	bx	lr

08005768 <__retarget_lock_acquire_recursive>:
 8005768:	4770      	bx	lr

0800576a <__retarget_lock_release_recursive>:
 800576a:	4770      	bx	lr

0800576c <_init>:
 800576c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800576e:	bf00      	nop
 8005770:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005772:	bc08      	pop	{r3}
 8005774:	469e      	mov	lr, r3
 8005776:	4770      	bx	lr

08005778 <_fini>:
 8005778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800577a:	bf00      	nop
 800577c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800577e:	bc08      	pop	{r3}
 8005780:	469e      	mov	lr, r3
 8005782:	4770      	bx	lr
