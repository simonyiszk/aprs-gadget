
nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007208  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000015d4  080073d8  080073d8  000173d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080089ac  080089ac  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  080089ac  080089ac  000189ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080089b4  080089b4  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080089b4  080089b4  000189b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080089b8  080089b8  000189b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  080089bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000acc  20000084  08008a40  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b50  08008a40  00020b50  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015357  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003185  00000000  00000000  0003540b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001248  00000000  00000000  00038590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010e8  00000000  00000000  000397d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002408f  00000000  00000000  0003a8c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018686  00000000  00000000  0005e94f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d409e  00000000  00000000  00076fd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014b073  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f08  00000000  00000000  0014b0c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000084 	.word	0x20000084
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080073c0 	.word	0x080073c0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000088 	.word	0x20000088
 800020c:	080073c0 	.word	0x080073c0

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <reset_crc>:
#include <aprs.h>
#include <fsk.h>

static uint16_t CRC_value = 0xFFFF;

static void reset_crc(void){
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
	CRC_value = 0xFFFF;
 80005c8:	4b04      	ldr	r3, [pc, #16]	; (80005dc <reset_crc+0x18>)
 80005ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80005ce:	801a      	strh	r2, [r3, #0]
}
 80005d0:	bf00      	nop
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop
 80005dc:	20000000 	.word	0x20000000

080005e0 <update_crc>:

static void update_crc(uint8_t bit){
 80005e0:	b480      	push	{r7}
 80005e2:	b085      	sub	sp, #20
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	4603      	mov	r3, r0
 80005e8:	71fb      	strb	r3, [r7, #7]

    uint16_t acc = CRC_value ^ bit;
 80005ea:	79fb      	ldrb	r3, [r7, #7]
 80005ec:	b29a      	uxth	r2, r3
 80005ee:	4b0e      	ldr	r3, [pc, #56]	; (8000628 <update_crc+0x48>)
 80005f0:	881b      	ldrh	r3, [r3, #0]
 80005f2:	4053      	eors	r3, r2
 80005f4:	81fb      	strh	r3, [r7, #14]
    CRC_value >>= 1;
 80005f6:	4b0c      	ldr	r3, [pc, #48]	; (8000628 <update_crc+0x48>)
 80005f8:	881b      	ldrh	r3, [r3, #0]
 80005fa:	085b      	lsrs	r3, r3, #1
 80005fc:	b29a      	uxth	r2, r3
 80005fe:	4b0a      	ldr	r3, [pc, #40]	; (8000628 <update_crc+0x48>)
 8000600:	801a      	strh	r2, [r3, #0]

    if(acc & 0x01){
 8000602:	89fb      	ldrh	r3, [r7, #14]
 8000604:	f003 0301 	and.w	r3, r3, #1
 8000608:	2b00      	cmp	r3, #0
 800060a:	d006      	beq.n	800061a <update_crc+0x3a>
    	CRC_value ^= 0x8408;
 800060c:	4b06      	ldr	r3, [pc, #24]	; (8000628 <update_crc+0x48>)
 800060e:	881a      	ldrh	r2, [r3, #0]
 8000610:	4b06      	ldr	r3, [pc, #24]	; (800062c <update_crc+0x4c>)
 8000612:	4053      	eors	r3, r2
 8000614:	b29a      	uxth	r2, r3
 8000616:	4b04      	ldr	r3, [pc, #16]	; (8000628 <update_crc+0x48>)
 8000618:	801a      	strh	r2, [r3, #0]
    }
}
 800061a:	bf00      	nop
 800061c:	3714      	adds	r7, #20
 800061e:	46bd      	mov	sp, r7
 8000620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000624:	4770      	bx	lr
 8000626:	bf00      	nop
 8000628:	20000000 	.word	0x20000000
 800062c:	ffff8408 	.word	0xffff8408

08000630 <APRS_Init>:

void APRS_Init(void){
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
    FSK_Init();
 8000634:	f000 fa46 	bl	8000ac4 <FSK_Init>
}
 8000638:	bf00      	nop
 800063a:	bd80      	pop	{r7, pc}

0800063c <APRS_send_byte>:

static void APRS_send_byte(uint8_t byte, uint8_t bitStuff){
 800063c:	b580      	push	{r7, lr}
 800063e:	b084      	sub	sp, #16
 8000640:	af00      	add	r7, sp, #0
 8000642:	4603      	mov	r3, r0
 8000644:	460a      	mov	r2, r1
 8000646:	71fb      	strb	r3, [r7, #7]
 8000648:	4613      	mov	r3, r2
 800064a:	71bb      	strb	r3, [r7, #6]

    static uint8_t FSK_bit = 0;
    static uint8_t bit_count = 0;

    for(uint8_t i=0; i<8; i++){
 800064c:	2300      	movs	r3, #0
 800064e:	73fb      	strb	r3, [r7, #15]
 8000650:	e041      	b.n	80006d6 <APRS_send_byte+0x9a>
        uint8_t current_bit = byte & 0x01;
 8000652:	79fb      	ldrb	r3, [r7, #7]
 8000654:	f003 0301 	and.w	r3, r3, #1
 8000658:	73bb      	strb	r3, [r7, #14]
        update_crc(current_bit);
 800065a:	7bbb      	ldrb	r3, [r7, #14]
 800065c:	4618      	mov	r0, r3
 800065e:	f7ff ffbf 	bl	80005e0 <update_crc>

        if(current_bit){
 8000662:	7bbb      	ldrb	r3, [r7, #14]
 8000664:	2b00      	cmp	r3, #0
 8000666:	d021      	beq.n	80006ac <APRS_send_byte+0x70>
            FSK_AddBit(FSK_bit);
 8000668:	4b1f      	ldr	r3, [pc, #124]	; (80006e8 <APRS_send_byte+0xac>)
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	4618      	mov	r0, r3
 800066e:	f000 fa67 	bl	8000b40 <FSK_AddBit>
            bit_count++;
 8000672:	4b1e      	ldr	r3, [pc, #120]	; (80006ec <APRS_send_byte+0xb0>)
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	3301      	adds	r3, #1
 8000678:	b2da      	uxtb	r2, r3
 800067a:	4b1c      	ldr	r3, [pc, #112]	; (80006ec <APRS_send_byte+0xb0>)
 800067c:	701a      	strb	r2, [r3, #0]
            if((bitStuff) && (bit_count==5)){
 800067e:	79bb      	ldrb	r3, [r7, #6]
 8000680:	2b00      	cmp	r3, #0
 8000682:	d022      	beq.n	80006ca <APRS_send_byte+0x8e>
 8000684:	4b19      	ldr	r3, [pc, #100]	; (80006ec <APRS_send_byte+0xb0>)
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	2b05      	cmp	r3, #5
 800068a:	d11e      	bne.n	80006ca <APRS_send_byte+0x8e>
                FSK_bit ^= 1;
 800068c:	4b16      	ldr	r3, [pc, #88]	; (80006e8 <APRS_send_byte+0xac>)
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	f083 0301 	eor.w	r3, r3, #1
 8000694:	b2da      	uxtb	r2, r3
 8000696:	4b14      	ldr	r3, [pc, #80]	; (80006e8 <APRS_send_byte+0xac>)
 8000698:	701a      	strb	r2, [r3, #0]
                FSK_AddBit(FSK_bit);
 800069a:	4b13      	ldr	r3, [pc, #76]	; (80006e8 <APRS_send_byte+0xac>)
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	4618      	mov	r0, r3
 80006a0:	f000 fa4e 	bl	8000b40 <FSK_AddBit>
                bit_count = 0;
 80006a4:	4b11      	ldr	r3, [pc, #68]	; (80006ec <APRS_send_byte+0xb0>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	701a      	strb	r2, [r3, #0]
 80006aa:	e00e      	b.n	80006ca <APRS_send_byte+0x8e>
            }
        }else{
            FSK_bit ^= 1;
 80006ac:	4b0e      	ldr	r3, [pc, #56]	; (80006e8 <APRS_send_byte+0xac>)
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	f083 0301 	eor.w	r3, r3, #1
 80006b4:	b2da      	uxtb	r2, r3
 80006b6:	4b0c      	ldr	r3, [pc, #48]	; (80006e8 <APRS_send_byte+0xac>)
 80006b8:	701a      	strb	r2, [r3, #0]
            FSK_AddBit(FSK_bit);
 80006ba:	4b0b      	ldr	r3, [pc, #44]	; (80006e8 <APRS_send_byte+0xac>)
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	4618      	mov	r0, r3
 80006c0:	f000 fa3e 	bl	8000b40 <FSK_AddBit>
            bit_count = 0;
 80006c4:	4b09      	ldr	r3, [pc, #36]	; (80006ec <APRS_send_byte+0xb0>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	701a      	strb	r2, [r3, #0]
        }
        byte >>= 1;
 80006ca:	79fb      	ldrb	r3, [r7, #7]
 80006cc:	085b      	lsrs	r3, r3, #1
 80006ce:	71fb      	strb	r3, [r7, #7]
    for(uint8_t i=0; i<8; i++){
 80006d0:	7bfb      	ldrb	r3, [r7, #15]
 80006d2:	3301      	adds	r3, #1
 80006d4:	73fb      	strb	r3, [r7, #15]
 80006d6:	7bfb      	ldrb	r3, [r7, #15]
 80006d8:	2b07      	cmp	r3, #7
 80006da:	d9ba      	bls.n	8000652 <APRS_send_byte+0x16>
    }
}
 80006dc:	bf00      	nop
 80006de:	bf00      	nop
 80006e0:	3710      	adds	r7, #16
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	200000a0 	.word	0x200000a0
 80006ec:	200000a1 	.word	0x200000a1

080006f0 <APRS_send_string>:

static void APRS_send_string(char* string, uint8_t size){
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b084      	sub	sp, #16
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
 80006f8:	460b      	mov	r3, r1
 80006fa:	70fb      	strb	r3, [r7, #3]
    for(uint8_t i=0; i<size; i++){
 80006fc:	2300      	movs	r3, #0
 80006fe:	73fb      	strb	r3, [r7, #15]
 8000700:	e00a      	b.n	8000718 <APRS_send_string+0x28>
        APRS_send_byte(string[i], 1);
 8000702:	7bfb      	ldrb	r3, [r7, #15]
 8000704:	687a      	ldr	r2, [r7, #4]
 8000706:	4413      	add	r3, r2
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	2101      	movs	r1, #1
 800070c:	4618      	mov	r0, r3
 800070e:	f7ff ff95 	bl	800063c <APRS_send_byte>
    for(uint8_t i=0; i<size; i++){
 8000712:	7bfb      	ldrb	r3, [r7, #15]
 8000714:	3301      	adds	r3, #1
 8000716:	73fb      	strb	r3, [r7, #15]
 8000718:	7bfa      	ldrb	r2, [r7, #15]
 800071a:	78fb      	ldrb	r3, [r7, #3]
 800071c:	429a      	cmp	r2, r3
 800071e:	d3f0      	bcc.n	8000702 <APRS_send_string+0x12>
    }
}
 8000720:	bf00      	nop
 8000722:	bf00      	nop
 8000724:	3710      	adds	r7, #16
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}

0800072a <APRS_send_flag>:

static void APRS_send_flag(uint8_t count){
 800072a:	b580      	push	{r7, lr}
 800072c:	b084      	sub	sp, #16
 800072e:	af00      	add	r7, sp, #0
 8000730:	4603      	mov	r3, r0
 8000732:	71fb      	strb	r3, [r7, #7]
    for(uint8_t i=0; i<count; i++){
 8000734:	2300      	movs	r3, #0
 8000736:	73fb      	strb	r3, [r7, #15]
 8000738:	e006      	b.n	8000748 <APRS_send_flag+0x1e>
        APRS_send_byte(0x7E, 0);
 800073a:	2100      	movs	r1, #0
 800073c:	207e      	movs	r0, #126	; 0x7e
 800073e:	f7ff ff7d 	bl	800063c <APRS_send_byte>
    for(uint8_t i=0; i<count; i++){
 8000742:	7bfb      	ldrb	r3, [r7, #15]
 8000744:	3301      	adds	r3, #1
 8000746:	73fb      	strb	r3, [r7, #15]
 8000748:	7bfa      	ldrb	r2, [r7, #15]
 800074a:	79fb      	ldrb	r3, [r7, #7]
 800074c:	429a      	cmp	r2, r3
 800074e:	d3f4      	bcc.n	800073a <APRS_send_flag+0x10>
    }
}
 8000750:	bf00      	nop
 8000752:	bf00      	nop
 8000754:	3710      	adds	r7, #16
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
	...

0800075c <APRS_send_crc>:

static void APRS_send_crc(void){
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
    uint8_t CRC_low = CRC_value ^ 0xFF;
 8000762:	4b0d      	ldr	r3, [pc, #52]	; (8000798 <APRS_send_crc+0x3c>)
 8000764:	881b      	ldrh	r3, [r3, #0]
 8000766:	b2db      	uxtb	r3, r3
 8000768:	43db      	mvns	r3, r3
 800076a:	71fb      	strb	r3, [r7, #7]
    uint8_t CRC_high = (CRC_value >> 8) ^ 0xFF;
 800076c:	4b0a      	ldr	r3, [pc, #40]	; (8000798 <APRS_send_crc+0x3c>)
 800076e:	881b      	ldrh	r3, [r3, #0]
 8000770:	0a1b      	lsrs	r3, r3, #8
 8000772:	b29b      	uxth	r3, r3
 8000774:	b2db      	uxtb	r3, r3
 8000776:	43db      	mvns	r3, r3
 8000778:	71bb      	strb	r3, [r7, #6]
    APRS_send_byte(CRC_low, 1);
 800077a:	79fb      	ldrb	r3, [r7, #7]
 800077c:	2101      	movs	r1, #1
 800077e:	4618      	mov	r0, r3
 8000780:	f7ff ff5c 	bl	800063c <APRS_send_byte>
    APRS_send_byte(CRC_high, 1);
 8000784:	79bb      	ldrb	r3, [r7, #6]
 8000786:	2101      	movs	r1, #1
 8000788:	4618      	mov	r0, r3
 800078a:	f7ff ff57 	bl	800063c <APRS_send_byte>
}
 800078e:	bf00      	nop
 8000790:	3708      	adds	r7, #8
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	20000000 	.word	0x20000000

0800079c <APRS_send_address>:

static void APRS_send_address(char* addr){
 800079c:	b580      	push	{r7, lr}
 800079e:	b086      	sub	sp, #24
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
    uint8_t temp = strlen(addr);
 80007a4:	6878      	ldr	r0, [r7, #4]
 80007a6:	f7ff fd33 	bl	8000210 <strlen>
 80007aa:	4603      	mov	r3, r0
 80007ac:	73fb      	strb	r3, [r7, #15]
    for(int j=0; j<temp; j++)
 80007ae:	2300      	movs	r3, #0
 80007b0:	617b      	str	r3, [r7, #20]
 80007b2:	e00c      	b.n	80007ce <APRS_send_address+0x32>
        APRS_send_byte(addr[j] << 1, 1);
 80007b4:	697b      	ldr	r3, [r7, #20]
 80007b6:	687a      	ldr	r2, [r7, #4]
 80007b8:	4413      	add	r3, r2
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	005b      	lsls	r3, r3, #1
 80007be:	b2db      	uxtb	r3, r3
 80007c0:	2101      	movs	r1, #1
 80007c2:	4618      	mov	r0, r3
 80007c4:	f7ff ff3a 	bl	800063c <APRS_send_byte>
    for(int j=0; j<temp; j++)
 80007c8:	697b      	ldr	r3, [r7, #20]
 80007ca:	3301      	adds	r3, #1
 80007cc:	617b      	str	r3, [r7, #20]
 80007ce:	7bfb      	ldrb	r3, [r7, #15]
 80007d0:	697a      	ldr	r2, [r7, #20]
 80007d2:	429a      	cmp	r2, r3
 80007d4:	dbee      	blt.n	80007b4 <APRS_send_address+0x18>
    if(temp < 6){
 80007d6:	7bfb      	ldrb	r3, [r7, #15]
 80007d8:	2b05      	cmp	r3, #5
 80007da:	d80f      	bhi.n	80007fc <APRS_send_address+0x60>
        for(int j=0; j<(6 - temp); j++)
 80007dc:	2300      	movs	r3, #0
 80007de:	613b      	str	r3, [r7, #16]
 80007e0:	e006      	b.n	80007f0 <APRS_send_address+0x54>
            APRS_send_byte(' ' << 1, 1);
 80007e2:	2101      	movs	r1, #1
 80007e4:	2040      	movs	r0, #64	; 0x40
 80007e6:	f7ff ff29 	bl	800063c <APRS_send_byte>
        for(int j=0; j<(6 - temp); j++)
 80007ea:	693b      	ldr	r3, [r7, #16]
 80007ec:	3301      	adds	r3, #1
 80007ee:	613b      	str	r3, [r7, #16]
 80007f0:	7bfb      	ldrb	r3, [r7, #15]
 80007f2:	f1c3 0306 	rsb	r3, r3, #6
 80007f6:	693a      	ldr	r2, [r7, #16]
 80007f8:	429a      	cmp	r2, r3
 80007fa:	dbf2      	blt.n	80007e2 <APRS_send_address+0x46>
    }
}
 80007fc:	bf00      	nop
 80007fe:	3718      	adds	r7, #24
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}

08000804 <APRS_send_header>:

static void APRS_send_header(char* dest, char* src, uint8_t ssid, char* repeater, uint8_t hops){
 8000804:	b580      	push	{r7, lr}
 8000806:	b084      	sub	sp, #16
 8000808:	af00      	add	r7, sp, #0
 800080a:	60f8      	str	r0, [r7, #12]
 800080c:	60b9      	str	r1, [r7, #8]
 800080e:	603b      	str	r3, [r7, #0]
 8000810:	4613      	mov	r3, r2
 8000812:	71fb      	strb	r3, [r7, #7]

    APRS_send_address(dest);
 8000814:	68f8      	ldr	r0, [r7, #12]
 8000816:	f7ff ffc1 	bl	800079c <APRS_send_address>
    APRS_send_byte('0'<<1, 1);
 800081a:	2101      	movs	r1, #1
 800081c:	2060      	movs	r0, #96	; 0x60
 800081e:	f7ff ff0d 	bl	800063c <APRS_send_byte>

    APRS_send_address(src);
 8000822:	68b8      	ldr	r0, [r7, #8]
 8000824:	f7ff ffba 	bl	800079c <APRS_send_address>
    APRS_send_byte((ssid+'0')<<1, 1);
 8000828:	79fb      	ldrb	r3, [r7, #7]
 800082a:	3330      	adds	r3, #48	; 0x30
 800082c:	b2db      	uxtb	r3, r3
 800082e:	005b      	lsls	r3, r3, #1
 8000830:	b2db      	uxtb	r3, r3
 8000832:	2101      	movs	r1, #1
 8000834:	4618      	mov	r0, r3
 8000836:	f7ff ff01 	bl	800063c <APRS_send_byte>

    APRS_send_address(repeater);
 800083a:	6838      	ldr	r0, [r7, #0]
 800083c:	f7ff ffae 	bl	800079c <APRS_send_address>
    APRS_send_byte(((hops+'0')<<1)+1, 1);
 8000840:	7e3b      	ldrb	r3, [r7, #24]
 8000842:	3330      	adds	r3, #48	; 0x30
 8000844:	b2db      	uxtb	r3, r3
 8000846:	005b      	lsls	r3, r3, #1
 8000848:	b2db      	uxtb	r3, r3
 800084a:	3301      	adds	r3, #1
 800084c:	b2db      	uxtb	r3, r3
 800084e:	2101      	movs	r1, #1
 8000850:	4618      	mov	r0, r3
 8000852:	f7ff fef3 	bl	800063c <APRS_send_byte>

    APRS_send_byte(0x03, 1);
 8000856:	2101      	movs	r1, #1
 8000858:	2003      	movs	r0, #3
 800085a:	f7ff feef 	bl	800063c <APRS_send_byte>
    APRS_send_byte(0xF0, 1);
 800085e:	2101      	movs	r1, #1
 8000860:	20f0      	movs	r0, #240	; 0xf0
 8000862:	f7ff feeb 	bl	800063c <APRS_send_byte>
}
 8000866:	bf00      	nop
 8000868:	3710      	adds	r7, #16
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
	...

08000870 <APRS_SendPacket>:

void APRS_SendPacket(void){
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af02      	add	r7, sp, #8
    APRS_send_flag(80);
 8000876:	2050      	movs	r0, #80	; 0x50
 8000878:	f7ff ff57 	bl	800072a <APRS_send_flag>
    reset_crc();
 800087c:	f7ff fea2 	bl	80005c4 <reset_crc>
    APRS_send_header("BEACON","HA3PB",1,"WIDE2",2);
 8000880:	2302      	movs	r3, #2
 8000882:	9300      	str	r3, [sp, #0]
 8000884:	4b09      	ldr	r3, [pc, #36]	; (80008ac <APRS_SendPacket+0x3c>)
 8000886:	2201      	movs	r2, #1
 8000888:	4909      	ldr	r1, [pc, #36]	; (80008b0 <APRS_SendPacket+0x40>)
 800088a:	480a      	ldr	r0, [pc, #40]	; (80008b4 <APRS_SendPacket+0x44>)
 800088c:	f7ff ffba 	bl	8000804 <APRS_send_header>
    //APRS_send_string(">helo", 5);
    //APRS_send_string("/152100h4636.89N/01850.83ElTest", 31);
    APRS_send_string("!4636.89N/01850.83ElTest", 24);
 8000890:	2118      	movs	r1, #24
 8000892:	4809      	ldr	r0, [pc, #36]	; (80008b8 <APRS_SendPacket+0x48>)
 8000894:	f7ff ff2c 	bl	80006f0 <APRS_send_string>
    APRS_send_crc();
 8000898:	f7ff ff60 	bl	800075c <APRS_send_crc>
    APRS_send_flag(3);
 800089c:	2003      	movs	r0, #3
 800089e:	f7ff ff44 	bl	800072a <APRS_send_flag>
    FSK_Send();
 80008a2:	f000 f925 	bl	8000af0 <FSK_Send>
}
 80008a6:	bf00      	nop
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	080073d8 	.word	0x080073d8
 80008b0:	080073e0 	.word	0x080073e0
 80008b4:	080073e8 	.word	0x080073e8
 80008b8:	080073f0 	.word	0x080073f0

080008bc <FIFO_init>:
 *      Author: pali
 */

#include <fifo.h>

void FIFO_init(FIFO* fifo, uint8_t* array, uint32_t size_in_bytes){
 80008bc:	b480      	push	{r7}
 80008be:	b085      	sub	sp, #20
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	60f8      	str	r0, [r7, #12]
 80008c4:	60b9      	str	r1, [r7, #8]
 80008c6:	607a      	str	r2, [r7, #4]
	fifo->buffer = array;
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	68ba      	ldr	r2, [r7, #8]
 80008cc:	601a      	str	r2, [r3, #0]
	fifo->start = 0;
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	2200      	movs	r2, #0
 80008d2:	609a      	str	r2, [r3, #8]
	fifo->end = 0;
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	2200      	movs	r2, #0
 80008d8:	60da      	str	r2, [r3, #12]
	fifo->size = size_in_bytes << 3;
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	00da      	lsls	r2, r3, #3
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	605a      	str	r2, [r3, #4]
}
 80008e2:	bf00      	nop
 80008e4:	3714      	adds	r7, #20
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr

080008ee <FIFO_push>:

void FIFO_push(FIFO* fifo, uint8_t bit){
 80008ee:	b480      	push	{r7}
 80008f0:	b083      	sub	sp, #12
 80008f2:	af00      	add	r7, sp, #0
 80008f4:	6078      	str	r0, [r7, #4]
 80008f6:	460b      	mov	r3, r1
 80008f8:	70fb      	strb	r3, [r7, #3]
	if(bit){
 80008fa:	78fb      	ldrb	r3, [r7, #3]
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d01a      	beq.n	8000936 <FIFO_push+0x48>
		fifo->buffer[(fifo->end)>>3] |= (1 << ((fifo->end) % 8));
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	681a      	ldr	r2, [r3, #0]
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	68db      	ldr	r3, [r3, #12]
 8000908:	08db      	lsrs	r3, r3, #3
 800090a:	4413      	add	r3, r2
 800090c:	781b      	ldrb	r3, [r3, #0]
 800090e:	b25a      	sxtb	r2, r3
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	68db      	ldr	r3, [r3, #12]
 8000914:	f003 0307 	and.w	r3, r3, #7
 8000918:	2101      	movs	r1, #1
 800091a:	fa01 f303 	lsl.w	r3, r1, r3
 800091e:	b25b      	sxtb	r3, r3
 8000920:	4313      	orrs	r3, r2
 8000922:	b259      	sxtb	r1, r3
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681a      	ldr	r2, [r3, #0]
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	68db      	ldr	r3, [r3, #12]
 800092c:	08db      	lsrs	r3, r3, #3
 800092e:	4413      	add	r3, r2
 8000930:	b2ca      	uxtb	r2, r1
 8000932:	701a      	strb	r2, [r3, #0]
 8000934:	e01b      	b.n	800096e <FIFO_push+0x80>
	}else{
		fifo->buffer[(fifo->end)>>3] &= ~(1 << ((fifo->end) % 8));
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	681a      	ldr	r2, [r3, #0]
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	68db      	ldr	r3, [r3, #12]
 800093e:	08db      	lsrs	r3, r3, #3
 8000940:	4413      	add	r3, r2
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	b25a      	sxtb	r2, r3
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	68db      	ldr	r3, [r3, #12]
 800094a:	f003 0307 	and.w	r3, r3, #7
 800094e:	2101      	movs	r1, #1
 8000950:	fa01 f303 	lsl.w	r3, r1, r3
 8000954:	b25b      	sxtb	r3, r3
 8000956:	43db      	mvns	r3, r3
 8000958:	b25b      	sxtb	r3, r3
 800095a:	4013      	ands	r3, r2
 800095c:	b259      	sxtb	r1, r3
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	681a      	ldr	r2, [r3, #0]
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	68db      	ldr	r3, [r3, #12]
 8000966:	08db      	lsrs	r3, r3, #3
 8000968:	4413      	add	r3, r2
 800096a:	b2ca      	uxtb	r2, r1
 800096c:	701a      	strb	r2, [r3, #0]
	}
	fifo->end = (fifo->end + 1) % fifo->size;
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	68db      	ldr	r3, [r3, #12]
 8000972:	3301      	adds	r3, #1
 8000974:	687a      	ldr	r2, [r7, #4]
 8000976:	6852      	ldr	r2, [r2, #4]
 8000978:	fbb3 f1f2 	udiv	r1, r3, r2
 800097c:	fb01 f202 	mul.w	r2, r1, r2
 8000980:	1a9a      	subs	r2, r3, r2
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	60da      	str	r2, [r3, #12]
}
 8000986:	bf00      	nop
 8000988:	370c      	adds	r7, #12
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr

08000992 <FIFO_pop>:

uint8_t FIFO_pop(FIFO* fifo){
 8000992:	b480      	push	{r7}
 8000994:	b085      	sub	sp, #20
 8000996:	af00      	add	r7, sp, #0
 8000998:	6078      	str	r0, [r7, #4]
	uint8_t bit = fifo->buffer[(fifo->start)>>3] & (1 << ((fifo->start) % 8));
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	681a      	ldr	r2, [r3, #0]
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	689b      	ldr	r3, [r3, #8]
 80009a2:	08db      	lsrs	r3, r3, #3
 80009a4:	4413      	add	r3, r2
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	b25a      	sxtb	r2, r3
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	689b      	ldr	r3, [r3, #8]
 80009ae:	f003 0307 	and.w	r3, r3, #7
 80009b2:	2101      	movs	r1, #1
 80009b4:	fa01 f303 	lsl.w	r3, r1, r3
 80009b8:	b25b      	sxtb	r3, r3
 80009ba:	4013      	ands	r3, r2
 80009bc:	b25b      	sxtb	r3, r3
 80009be:	73fb      	strb	r3, [r7, #15]
	fifo->start = (fifo->start + 1) % fifo->size;
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	689b      	ldr	r3, [r3, #8]
 80009c4:	3301      	adds	r3, #1
 80009c6:	687a      	ldr	r2, [r7, #4]
 80009c8:	6852      	ldr	r2, [r2, #4]
 80009ca:	fbb3 f1f2 	udiv	r1, r3, r2
 80009ce:	fb01 f202 	mul.w	r2, r1, r2
 80009d2:	1a9a      	subs	r2, r3, r2
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	609a      	str	r2, [r3, #8]
	return bit;
 80009d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80009da:	4618      	mov	r0, r3
 80009dc:	3714      	adds	r7, #20
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr

080009e6 <FIFO_reset>:

void FIFO_reset(FIFO *fifo){
 80009e6:	b480      	push	{r7}
 80009e8:	b083      	sub	sp, #12
 80009ea:	af00      	add	r7, sp, #0
 80009ec:	6078      	str	r0, [r7, #4]
	fifo->start = 0;
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	2200      	movs	r2, #0
 80009f2:	609a      	str	r2, [r3, #8]
	fifo->end = 0;
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	2200      	movs	r2, #0
 80009f8:	60da      	str	r2, [r3, #12]
}
 80009fa:	bf00      	nop
 80009fc:	370c      	adds	r7, #12
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr

08000a06 <FIFO_isempty>:

uint8_t FIFO_isempty(FIFO *fifo){
 8000a06:	b480      	push	{r7}
 8000a08:	b083      	sub	sp, #12
 8000a0a:	af00      	add	r7, sp, #0
 8000a0c:	6078      	str	r0, [r7, #4]
	return (fifo->start==fifo->end ? 1 : 0);
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	689a      	ldr	r2, [r3, #8]
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	68db      	ldr	r3, [r3, #12]
 8000a16:	429a      	cmp	r2, r3
 8000a18:	bf0c      	ite	eq
 8000a1a:	2301      	moveq	r3, #1
 8000a1c:	2300      	movne	r3, #0
 8000a1e:	b2db      	uxtb	r3, r3
}
 8000a20:	4618      	mov	r0, r3
 8000a22:	370c      	adds	r7, #12
 8000a24:	46bd      	mov	sp, r7
 8000a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2a:	4770      	bx	lr

08000a2c <FSK_AlterFrequency>:

static FIFO bitfifo;
static uint8_t fifo_buffer[512];
static uint8_t FSK_BUSY_FLAG = 0;

static void FSK_AlterFrequency(void){
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
	if(FIFO_pop(&bitfifo)==0){
 8000a30:	4808      	ldr	r0, [pc, #32]	; (8000a54 <FSK_AlterFrequency+0x28>)
 8000a32:	f7ff ffae 	bl	8000992 <FIFO_pop>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d104      	bne.n	8000a46 <FSK_AlterFrequency+0x1a>
		htim4.Instance->PSC = 5;
 8000a3c:	4b06      	ldr	r3, [pc, #24]	; (8000a58 <FSK_AlterFrequency+0x2c>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	2205      	movs	r2, #5
 8000a42:	629a      	str	r2, [r3, #40]	; 0x28
	}else{
		htim4.Instance->PSC = 10;
	}
}
 8000a44:	e003      	b.n	8000a4e <FSK_AlterFrequency+0x22>
		htim4.Instance->PSC = 10;
 8000a46:	4b04      	ldr	r3, [pc, #16]	; (8000a58 <FSK_AlterFrequency+0x2c>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	220a      	movs	r2, #10
 8000a4c:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000a4e:	bf00      	nop
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	200000a4 	.word	0x200000a4
 8000a58:	20000964 	.word	0x20000964

08000a5c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]

	if(htim->Instance==TIM6){
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4a10      	ldr	r2, [pc, #64]	; (8000aac <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000a6a:	4293      	cmp	r3, r2
 8000a6c:	d119      	bne.n	8000aa2 <HAL_TIM_PeriodElapsedCallback+0x46>

		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000a6e:	2120      	movs	r1, #32
 8000a70:	480f      	ldr	r0, [pc, #60]	; (8000ab0 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000a72:	f002 f86a 	bl	8002b4a <HAL_GPIO_TogglePin>

		if(FIFO_isempty(&bitfifo)){
 8000a76:	480f      	ldr	r0, [pc, #60]	; (8000ab4 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000a78:	f7ff ffc5 	bl	8000a06 <FIFO_isempty>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d00d      	beq.n	8000a9e <HAL_TIM_PeriodElapsedCallback+0x42>
			HAL_TIM_Base_Stop_IT(&htim6);
 8000a82:	480d      	ldr	r0, [pc, #52]	; (8000ab8 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000a84:	f003 fc9e 	bl	80043c4 <HAL_TIM_Base_Stop_IT>
			HAL_TIM_PWM_Stop_DMA(&htim4, TIM_CHANNEL_1);
 8000a88:	2100      	movs	r1, #0
 8000a8a:	480c      	ldr	r0, [pc, #48]	; (8000abc <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000a8c:	f003 fee0 	bl	8004850 <HAL_TIM_PWM_Stop_DMA>
			FIFO_reset(&bitfifo);
 8000a90:	4808      	ldr	r0, [pc, #32]	; (8000ab4 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000a92:	f7ff ffa8 	bl	80009e6 <FIFO_reset>
			FSK_BUSY_FLAG = 0;
 8000a96:	4b0a      	ldr	r3, [pc, #40]	; (8000ac0 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	701a      	strb	r2, [r3, #0]
		}else{
			FSK_AlterFrequency();
		}
	}
}
 8000a9c:	e001      	b.n	8000aa2 <HAL_TIM_PeriodElapsedCallback+0x46>
			FSK_AlterFrequency();
 8000a9e:	f7ff ffc5 	bl	8000a2c <FSK_AlterFrequency>
}
 8000aa2:	bf00      	nop
 8000aa4:	3708      	adds	r7, #8
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	40001000 	.word	0x40001000
 8000ab0:	40020000 	.word	0x40020000
 8000ab4:	200000a4 	.word	0x200000a4
 8000ab8:	200009ac 	.word	0x200009ac
 8000abc:	20000964 	.word	0x20000964
 8000ac0:	200002b4 	.word	0x200002b4

08000ac4 <FSK_Init>:

void FSK_Init(void){
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
	FIFO_init(&bitfifo, fifo_buffer, 512);
 8000ac8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000acc:	4905      	ldr	r1, [pc, #20]	; (8000ae4 <FSK_Init+0x20>)
 8000ace:	4806      	ldr	r0, [pc, #24]	; (8000ae8 <FSK_Init+0x24>)
 8000ad0:	f7ff fef4 	bl	80008bc <FIFO_init>
	__HAL_TIM_CLEAR_FLAG(&htim6, TIM_SR_UIF);
 8000ad4:	4b05      	ldr	r3, [pc, #20]	; (8000aec <FSK_Init+0x28>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	f06f 0201 	mvn.w	r2, #1
 8000adc:	611a      	str	r2, [r3, #16]
}
 8000ade:	bf00      	nop
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	200000b4 	.word	0x200000b4
 8000ae8:	200000a4 	.word	0x200000a4
 8000aec:	200009ac 	.word	0x200009ac

08000af0 <FSK_Send>:

void FSK_Send(void){
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
	if(FSK_BUSY_FLAG || FIFO_isempty(&bitfifo)){
 8000af4:	4b0d      	ldr	r3, [pc, #52]	; (8000b2c <FSK_Send+0x3c>)
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d114      	bne.n	8000b26 <FSK_Send+0x36>
 8000afc:	480c      	ldr	r0, [pc, #48]	; (8000b30 <FSK_Send+0x40>)
 8000afe:	f7ff ff82 	bl	8000a06 <FIFO_isempty>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d10e      	bne.n	8000b26 <FSK_Send+0x36>
		return;
	}

	FSK_BUSY_FLAG = 1;
 8000b08:	4b08      	ldr	r3, [pc, #32]	; (8000b2c <FSK_Send+0x3c>)
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	701a      	strb	r2, [r3, #0]
	FSK_AlterFrequency();
 8000b0e:	f7ff ff8d 	bl	8000a2c <FSK_AlterFrequency>

	HAL_TIM_PWM_Start_DMA(&htim4, TIM_CHANNEL_1, (uint32_t*) sine, DDS_SAMPLES);
 8000b12:	2324      	movs	r3, #36	; 0x24
 8000b14:	4a07      	ldr	r2, [pc, #28]	; (8000b34 <FSK_Send+0x44>)
 8000b16:	2100      	movs	r1, #0
 8000b18:	4807      	ldr	r0, [pc, #28]	; (8000b38 <FSK_Send+0x48>)
 8000b1a:	f003 fcd1 	bl	80044c0 <HAL_TIM_PWM_Start_DMA>
	HAL_TIM_Base_Start_IT(&htim6);
 8000b1e:	4807      	ldr	r0, [pc, #28]	; (8000b3c <FSK_Send+0x4c>)
 8000b20:	f003 fbe0 	bl	80042e4 <HAL_TIM_Base_Start_IT>
 8000b24:	e000      	b.n	8000b28 <FSK_Send+0x38>
		return;
 8000b26:	bf00      	nop
}
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	200002b4 	.word	0x200002b4
 8000b30:	200000a4 	.word	0x200000a4
 8000b34:	08008910 	.word	0x08008910
 8000b38:	20000964 	.word	0x20000964
 8000b3c:	200009ac 	.word	0x200009ac

08000b40 <FSK_AddBit>:

void FSK_AddBit(uint8_t bit){
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	4603      	mov	r3, r0
 8000b48:	71fb      	strb	r3, [r7, #7]
	FIFO_push(&bitfifo, bit);
 8000b4a:	79fb      	ldrb	r3, [r7, #7]
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	4803      	ldr	r0, [pc, #12]	; (8000b5c <FSK_AddBit+0x1c>)
 8000b50:	f7ff fecd 	bl	80008ee <FIFO_push>
}
 8000b54:	bf00      	nop
 8000b56:	3708      	adds	r7, #8
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	200000a4 	.word	0x200000a4

08000b60 <GPS_ReceiveNMEA>:
volatile uint8_t packet_available = 0;

extern UART_HandleTypeDef huart1;
extern DMA_HandleTypeDef hdma_usart1_rx;

void GPS_ReceiveNMEA(void){
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
	HAL_UARTEx_ReceiveToIdle_DMA(&huart1, gps_message, 1024);
 8000b64:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b68:	4906      	ldr	r1, [pc, #24]	; (8000b84 <GPS_ReceiveNMEA+0x24>)
 8000b6a:	4807      	ldr	r0, [pc, #28]	; (8000b88 <GPS_ReceiveNMEA+0x28>)
 8000b6c:	f004 fea1 	bl	80058b2 <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8000b70:	4b06      	ldr	r3, [pc, #24]	; (8000b8c <GPS_ReceiveNMEA+0x2c>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	681a      	ldr	r2, [r3, #0]
 8000b76:	4b05      	ldr	r3, [pc, #20]	; (8000b8c <GPS_ReceiveNMEA+0x2c>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	f022 0208 	bic.w	r2, r2, #8
 8000b7e:	601a      	str	r2, [r3, #0]

}
 8000b80:	bf00      	nop
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	200002b8 	.word	0x200002b8
 8000b88:	20000a54 	.word	0x20000a54
 8000b8c:	20000adc 	.word	0x20000adc

08000b90 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b083      	sub	sp, #12
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
 8000b98:	460b      	mov	r3, r1
 8000b9a:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART1){
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4a05      	ldr	r2, [pc, #20]	; (8000bb8 <HAL_UARTEx_RxEventCallback+0x28>)
 8000ba2:	4293      	cmp	r3, r2
 8000ba4:	d102      	bne.n	8000bac <HAL_UARTEx_RxEventCallback+0x1c>
		packet_available = 1;
 8000ba6:	4b05      	ldr	r3, [pc, #20]	; (8000bbc <HAL_UARTEx_RxEventCallback+0x2c>)
 8000ba8:	2201      	movs	r2, #1
 8000baa:	701a      	strb	r2, [r3, #0]
		//TODO: implement reading and processing NMEA batch
	}
}
 8000bac:	bf00      	nop
 8000bae:	370c      	adds	r7, #12
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr
 8000bb8:	40011000 	.word	0x40011000
 8000bbc:	200006b8 	.word	0x200006b8

08000bc0 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8000bc6:	f000 fa21 	bl	800100c <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8000bca:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000bce:	2201      	movs	r2, #1
 8000bd0:	2178      	movs	r1, #120	; 0x78
 8000bd2:	485b      	ldr	r0, [pc, #364]	; (8000d40 <SSD1306_Init+0x180>)
 8000bd4:	f002 fa16 	bl	8003004 <HAL_I2C_IsDeviceReady>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8000bde:	2300      	movs	r3, #0
 8000be0:	e0a9      	b.n	8000d36 <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 8000be2:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8000be6:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000be8:	e002      	b.n	8000bf0 <SSD1306_Init+0x30>
		p--;
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	3b01      	subs	r3, #1
 8000bee:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d1f9      	bne.n	8000bea <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8000bf6:	22ae      	movs	r2, #174	; 0xae
 8000bf8:	2100      	movs	r1, #0
 8000bfa:	2078      	movs	r0, #120	; 0x78
 8000bfc:	f000 fa82 	bl	8001104 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8000c00:	2220      	movs	r2, #32
 8000c02:	2100      	movs	r1, #0
 8000c04:	2078      	movs	r0, #120	; 0x78
 8000c06:	f000 fa7d 	bl	8001104 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000c0a:	2210      	movs	r2, #16
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	2078      	movs	r0, #120	; 0x78
 8000c10:	f000 fa78 	bl	8001104 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000c14:	22b0      	movs	r2, #176	; 0xb0
 8000c16:	2100      	movs	r1, #0
 8000c18:	2078      	movs	r0, #120	; 0x78
 8000c1a:	f000 fa73 	bl	8001104 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8000c1e:	22c8      	movs	r2, #200	; 0xc8
 8000c20:	2100      	movs	r1, #0
 8000c22:	2078      	movs	r0, #120	; 0x78
 8000c24:	f000 fa6e 	bl	8001104 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000c28:	2200      	movs	r2, #0
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	2078      	movs	r0, #120	; 0x78
 8000c2e:	f000 fa69 	bl	8001104 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8000c32:	2210      	movs	r2, #16
 8000c34:	2100      	movs	r1, #0
 8000c36:	2078      	movs	r0, #120	; 0x78
 8000c38:	f000 fa64 	bl	8001104 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000c3c:	2240      	movs	r2, #64	; 0x40
 8000c3e:	2100      	movs	r1, #0
 8000c40:	2078      	movs	r0, #120	; 0x78
 8000c42:	f000 fa5f 	bl	8001104 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8000c46:	2281      	movs	r2, #129	; 0x81
 8000c48:	2100      	movs	r1, #0
 8000c4a:	2078      	movs	r0, #120	; 0x78
 8000c4c:	f000 fa5a 	bl	8001104 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8000c50:	22ff      	movs	r2, #255	; 0xff
 8000c52:	2100      	movs	r1, #0
 8000c54:	2078      	movs	r0, #120	; 0x78
 8000c56:	f000 fa55 	bl	8001104 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8000c5a:	22a1      	movs	r2, #161	; 0xa1
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	2078      	movs	r0, #120	; 0x78
 8000c60:	f000 fa50 	bl	8001104 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000c64:	22a6      	movs	r2, #166	; 0xa6
 8000c66:	2100      	movs	r1, #0
 8000c68:	2078      	movs	r0, #120	; 0x78
 8000c6a:	f000 fa4b 	bl	8001104 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8000c6e:	22a8      	movs	r2, #168	; 0xa8
 8000c70:	2100      	movs	r1, #0
 8000c72:	2078      	movs	r0, #120	; 0x78
 8000c74:	f000 fa46 	bl	8001104 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x1F); //
 8000c78:	221f      	movs	r2, #31
 8000c7a:	2100      	movs	r1, #0
 8000c7c:	2078      	movs	r0, #120	; 0x78
 8000c7e:	f000 fa41 	bl	8001104 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000c82:	22a4      	movs	r2, #164	; 0xa4
 8000c84:	2100      	movs	r1, #0
 8000c86:	2078      	movs	r0, #120	; 0x78
 8000c88:	f000 fa3c 	bl	8001104 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8000c8c:	22d3      	movs	r2, #211	; 0xd3
 8000c8e:	2100      	movs	r1, #0
 8000c90:	2078      	movs	r0, #120	; 0x78
 8000c92:	f000 fa37 	bl	8001104 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8000c96:	2200      	movs	r2, #0
 8000c98:	2100      	movs	r1, #0
 8000c9a:	2078      	movs	r0, #120	; 0x78
 8000c9c:	f000 fa32 	bl	8001104 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8000ca0:	22d5      	movs	r2, #213	; 0xd5
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	2078      	movs	r0, #120	; 0x78
 8000ca6:	f000 fa2d 	bl	8001104 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8000caa:	22f0      	movs	r2, #240	; 0xf0
 8000cac:	2100      	movs	r1, #0
 8000cae:	2078      	movs	r0, #120	; 0x78
 8000cb0:	f000 fa28 	bl	8001104 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8000cb4:	22d9      	movs	r2, #217	; 0xd9
 8000cb6:	2100      	movs	r1, #0
 8000cb8:	2078      	movs	r0, #120	; 0x78
 8000cba:	f000 fa23 	bl	8001104 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8000cbe:	2222      	movs	r2, #34	; 0x22
 8000cc0:	2100      	movs	r1, #0
 8000cc2:	2078      	movs	r0, #120	; 0x78
 8000cc4:	f000 fa1e 	bl	8001104 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8000cc8:	22da      	movs	r2, #218	; 0xda
 8000cca:	2100      	movs	r1, #0
 8000ccc:	2078      	movs	r0, #120	; 0x78
 8000cce:	f000 fa19 	bl	8001104 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x02);
 8000cd2:	2202      	movs	r2, #2
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	2078      	movs	r0, #120	; 0x78
 8000cd8:	f000 fa14 	bl	8001104 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8000cdc:	22db      	movs	r2, #219	; 0xdb
 8000cde:	2100      	movs	r1, #0
 8000ce0:	2078      	movs	r0, #120	; 0x78
 8000ce2:	f000 fa0f 	bl	8001104 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8000ce6:	2220      	movs	r2, #32
 8000ce8:	2100      	movs	r1, #0
 8000cea:	2078      	movs	r0, #120	; 0x78
 8000cec:	f000 fa0a 	bl	8001104 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8000cf0:	228d      	movs	r2, #141	; 0x8d
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	2078      	movs	r0, #120	; 0x78
 8000cf6:	f000 fa05 	bl	8001104 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8000cfa:	2214      	movs	r2, #20
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	2078      	movs	r0, #120	; 0x78
 8000d00:	f000 fa00 	bl	8001104 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8000d04:	22af      	movs	r2, #175	; 0xaf
 8000d06:	2100      	movs	r1, #0
 8000d08:	2078      	movs	r0, #120	; 0x78
 8000d0a:	f000 f9fb 	bl	8001104 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8000d0e:	222e      	movs	r2, #46	; 0x2e
 8000d10:	2100      	movs	r1, #0
 8000d12:	2078      	movs	r0, #120	; 0x78
 8000d14:	f000 f9f6 	bl	8001104 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000d18:	2000      	movs	r0, #0
 8000d1a:	f000 f843 	bl	8000da4 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 8000d1e:	f000 f813 	bl	8000d48 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 8000d22:	4b08      	ldr	r3, [pc, #32]	; (8000d44 <SSD1306_Init+0x184>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000d28:	4b06      	ldr	r3, [pc, #24]	; (8000d44 <SSD1306_Init+0x184>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 8000d2e:	4b05      	ldr	r3, [pc, #20]	; (8000d44 <SSD1306_Init+0x184>)
 8000d30:	2201      	movs	r2, #1
 8000d32:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8000d34:	2301      	movs	r3, #1
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	3708      	adds	r7, #8
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	200008c4 	.word	0x200008c4
 8000d44:	200008bc 	.word	0x200008bc

08000d48 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8000d4e:	2300      	movs	r3, #0
 8000d50:	71fb      	strb	r3, [r7, #7]
 8000d52:	e01d      	b.n	8000d90 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8000d54:	79fb      	ldrb	r3, [r7, #7]
 8000d56:	3b50      	subs	r3, #80	; 0x50
 8000d58:	b2db      	uxtb	r3, r3
 8000d5a:	461a      	mov	r2, r3
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	2078      	movs	r0, #120	; 0x78
 8000d60:	f000 f9d0 	bl	8001104 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8000d64:	2200      	movs	r2, #0
 8000d66:	2100      	movs	r1, #0
 8000d68:	2078      	movs	r0, #120	; 0x78
 8000d6a:	f000 f9cb 	bl	8001104 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8000d6e:	2210      	movs	r2, #16
 8000d70:	2100      	movs	r1, #0
 8000d72:	2078      	movs	r0, #120	; 0x78
 8000d74:	f000 f9c6 	bl	8001104 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8000d78:	79fb      	ldrb	r3, [r7, #7]
 8000d7a:	01db      	lsls	r3, r3, #7
 8000d7c:	4a08      	ldr	r2, [pc, #32]	; (8000da0 <SSD1306_UpdateScreen+0x58>)
 8000d7e:	441a      	add	r2, r3
 8000d80:	2380      	movs	r3, #128	; 0x80
 8000d82:	2140      	movs	r1, #64	; 0x40
 8000d84:	2078      	movs	r0, #120	; 0x78
 8000d86:	f000 f957 	bl	8001038 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8000d8a:	79fb      	ldrb	r3, [r7, #7]
 8000d8c:	3301      	adds	r3, #1
 8000d8e:	71fb      	strb	r3, [r7, #7]
 8000d90:	79fb      	ldrb	r3, [r7, #7]
 8000d92:	2b07      	cmp	r3, #7
 8000d94:	d9de      	bls.n	8000d54 <SSD1306_UpdateScreen+0xc>
	}
}
 8000d96:	bf00      	nop
 8000d98:	bf00      	nop
 8000d9a:	3708      	adds	r7, #8
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	200006bc 	.word	0x200006bc

08000da4 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	4603      	mov	r3, r0
 8000dac:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000dae:	79fb      	ldrb	r3, [r7, #7]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d101      	bne.n	8000db8 <SSD1306_Fill+0x14>
 8000db4:	2300      	movs	r3, #0
 8000db6:	e000      	b.n	8000dba <SSD1306_Fill+0x16>
 8000db8:	23ff      	movs	r3, #255	; 0xff
 8000dba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	4803      	ldr	r0, [pc, #12]	; (8000dd0 <SSD1306_Fill+0x2c>)
 8000dc2:	f005 fe87 	bl	8006ad4 <memset>
}
 8000dc6:	bf00      	nop
 8000dc8:	3708      	adds	r7, #8
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	200006bc 	.word	0x200006bc

08000dd4 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8000dd4:	b480      	push	{r7}
 8000dd6:	b083      	sub	sp, #12
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	4603      	mov	r3, r0
 8000ddc:	80fb      	strh	r3, [r7, #6]
 8000dde:	460b      	mov	r3, r1
 8000de0:	80bb      	strh	r3, [r7, #4]
 8000de2:	4613      	mov	r3, r2
 8000de4:	70fb      	strb	r3, [r7, #3]
	if (
 8000de6:	88fb      	ldrh	r3, [r7, #6]
 8000de8:	2b7f      	cmp	r3, #127	; 0x7f
 8000dea:	d848      	bhi.n	8000e7e <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8000dec:	88bb      	ldrh	r3, [r7, #4]
 8000dee:	2b1f      	cmp	r3, #31
 8000df0:	d845      	bhi.n	8000e7e <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8000df2:	4b26      	ldr	r3, [pc, #152]	; (8000e8c <SSD1306_DrawPixel+0xb8>)
 8000df4:	791b      	ldrb	r3, [r3, #4]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d006      	beq.n	8000e08 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8000dfa:	78fb      	ldrb	r3, [r7, #3]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	bf0c      	ite	eq
 8000e00:	2301      	moveq	r3, #1
 8000e02:	2300      	movne	r3, #0
 8000e04:	b2db      	uxtb	r3, r3
 8000e06:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8000e08:	78fb      	ldrb	r3, [r7, #3]
 8000e0a:	2b01      	cmp	r3, #1
 8000e0c:	d11a      	bne.n	8000e44 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000e0e:	88fa      	ldrh	r2, [r7, #6]
 8000e10:	88bb      	ldrh	r3, [r7, #4]
 8000e12:	08db      	lsrs	r3, r3, #3
 8000e14:	b298      	uxth	r0, r3
 8000e16:	4603      	mov	r3, r0
 8000e18:	01db      	lsls	r3, r3, #7
 8000e1a:	4413      	add	r3, r2
 8000e1c:	4a1c      	ldr	r2, [pc, #112]	; (8000e90 <SSD1306_DrawPixel+0xbc>)
 8000e1e:	5cd3      	ldrb	r3, [r2, r3]
 8000e20:	b25a      	sxtb	r2, r3
 8000e22:	88bb      	ldrh	r3, [r7, #4]
 8000e24:	f003 0307 	and.w	r3, r3, #7
 8000e28:	2101      	movs	r1, #1
 8000e2a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e2e:	b25b      	sxtb	r3, r3
 8000e30:	4313      	orrs	r3, r2
 8000e32:	b259      	sxtb	r1, r3
 8000e34:	88fa      	ldrh	r2, [r7, #6]
 8000e36:	4603      	mov	r3, r0
 8000e38:	01db      	lsls	r3, r3, #7
 8000e3a:	4413      	add	r3, r2
 8000e3c:	b2c9      	uxtb	r1, r1
 8000e3e:	4a14      	ldr	r2, [pc, #80]	; (8000e90 <SSD1306_DrawPixel+0xbc>)
 8000e40:	54d1      	strb	r1, [r2, r3]
 8000e42:	e01d      	b.n	8000e80 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000e44:	88fa      	ldrh	r2, [r7, #6]
 8000e46:	88bb      	ldrh	r3, [r7, #4]
 8000e48:	08db      	lsrs	r3, r3, #3
 8000e4a:	b298      	uxth	r0, r3
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	01db      	lsls	r3, r3, #7
 8000e50:	4413      	add	r3, r2
 8000e52:	4a0f      	ldr	r2, [pc, #60]	; (8000e90 <SSD1306_DrawPixel+0xbc>)
 8000e54:	5cd3      	ldrb	r3, [r2, r3]
 8000e56:	b25a      	sxtb	r2, r3
 8000e58:	88bb      	ldrh	r3, [r7, #4]
 8000e5a:	f003 0307 	and.w	r3, r3, #7
 8000e5e:	2101      	movs	r1, #1
 8000e60:	fa01 f303 	lsl.w	r3, r1, r3
 8000e64:	b25b      	sxtb	r3, r3
 8000e66:	43db      	mvns	r3, r3
 8000e68:	b25b      	sxtb	r3, r3
 8000e6a:	4013      	ands	r3, r2
 8000e6c:	b259      	sxtb	r1, r3
 8000e6e:	88fa      	ldrh	r2, [r7, #6]
 8000e70:	4603      	mov	r3, r0
 8000e72:	01db      	lsls	r3, r3, #7
 8000e74:	4413      	add	r3, r2
 8000e76:	b2c9      	uxtb	r1, r1
 8000e78:	4a05      	ldr	r2, [pc, #20]	; (8000e90 <SSD1306_DrawPixel+0xbc>)
 8000e7a:	54d1      	strb	r1, [r2, r3]
 8000e7c:	e000      	b.n	8000e80 <SSD1306_DrawPixel+0xac>
		return;
 8000e7e:	bf00      	nop
	}
}
 8000e80:	370c      	adds	r7, #12
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	200008bc 	.word	0x200008bc
 8000e90:	200006bc 	.word	0x200006bc

08000e94 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8000e94:	b480      	push	{r7}
 8000e96:	b083      	sub	sp, #12
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	460a      	mov	r2, r1
 8000e9e:	80fb      	strh	r3, [r7, #6]
 8000ea0:	4613      	mov	r3, r2
 8000ea2:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8000ea4:	4a05      	ldr	r2, [pc, #20]	; (8000ebc <SSD1306_GotoXY+0x28>)
 8000ea6:	88fb      	ldrh	r3, [r7, #6]
 8000ea8:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8000eaa:	4a04      	ldr	r2, [pc, #16]	; (8000ebc <SSD1306_GotoXY+0x28>)
 8000eac:	88bb      	ldrh	r3, [r7, #4]
 8000eae:	8053      	strh	r3, [r2, #2]
}
 8000eb0:	bf00      	nop
 8000eb2:	370c      	adds	r7, #12
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr
 8000ebc:	200008bc 	.word	0x200008bc

08000ec0 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b086      	sub	sp, #24
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	6039      	str	r1, [r7, #0]
 8000eca:	71fb      	strb	r3, [r7, #7]
 8000ecc:	4613      	mov	r3, r2
 8000ece:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000ed0:	4b3a      	ldr	r3, [pc, #232]	; (8000fbc <SSD1306_Putc+0xfc>)
 8000ed2:	881b      	ldrh	r3, [r3, #0]
 8000ed4:	461a      	mov	r2, r3
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	4413      	add	r3, r2
	if (
 8000edc:	2b7f      	cmp	r3, #127	; 0x7f
 8000ede:	dc07      	bgt.n	8000ef0 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8000ee0:	4b36      	ldr	r3, [pc, #216]	; (8000fbc <SSD1306_Putc+0xfc>)
 8000ee2:	885b      	ldrh	r3, [r3, #2]
 8000ee4:	461a      	mov	r2, r3
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	785b      	ldrb	r3, [r3, #1]
 8000eea:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000eec:	2b1f      	cmp	r3, #31
 8000eee:	dd01      	ble.n	8000ef4 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	e05e      	b.n	8000fb2 <SSD1306_Putc+0xf2>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	617b      	str	r3, [r7, #20]
 8000ef8:	e04b      	b.n	8000f92 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	685a      	ldr	r2, [r3, #4]
 8000efe:	79fb      	ldrb	r3, [r7, #7]
 8000f00:	3b20      	subs	r3, #32
 8000f02:	6839      	ldr	r1, [r7, #0]
 8000f04:	7849      	ldrb	r1, [r1, #1]
 8000f06:	fb01 f303 	mul.w	r3, r1, r3
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	440b      	add	r3, r1
 8000f10:	005b      	lsls	r3, r3, #1
 8000f12:	4413      	add	r3, r2
 8000f14:	881b      	ldrh	r3, [r3, #0]
 8000f16:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8000f18:	2300      	movs	r3, #0
 8000f1a:	613b      	str	r3, [r7, #16]
 8000f1c:	e030      	b.n	8000f80 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8000f1e:	68fa      	ldr	r2, [r7, #12]
 8000f20:	693b      	ldr	r3, [r7, #16]
 8000f22:	fa02 f303 	lsl.w	r3, r2, r3
 8000f26:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d010      	beq.n	8000f50 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8000f2e:	4b23      	ldr	r3, [pc, #140]	; (8000fbc <SSD1306_Putc+0xfc>)
 8000f30:	881a      	ldrh	r2, [r3, #0]
 8000f32:	693b      	ldr	r3, [r7, #16]
 8000f34:	b29b      	uxth	r3, r3
 8000f36:	4413      	add	r3, r2
 8000f38:	b298      	uxth	r0, r3
 8000f3a:	4b20      	ldr	r3, [pc, #128]	; (8000fbc <SSD1306_Putc+0xfc>)
 8000f3c:	885a      	ldrh	r2, [r3, #2]
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	b29b      	uxth	r3, r3
 8000f42:	4413      	add	r3, r2
 8000f44:	b29b      	uxth	r3, r3
 8000f46:	79ba      	ldrb	r2, [r7, #6]
 8000f48:	4619      	mov	r1, r3
 8000f4a:	f7ff ff43 	bl	8000dd4 <SSD1306_DrawPixel>
 8000f4e:	e014      	b.n	8000f7a <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8000f50:	4b1a      	ldr	r3, [pc, #104]	; (8000fbc <SSD1306_Putc+0xfc>)
 8000f52:	881a      	ldrh	r2, [r3, #0]
 8000f54:	693b      	ldr	r3, [r7, #16]
 8000f56:	b29b      	uxth	r3, r3
 8000f58:	4413      	add	r3, r2
 8000f5a:	b298      	uxth	r0, r3
 8000f5c:	4b17      	ldr	r3, [pc, #92]	; (8000fbc <SSD1306_Putc+0xfc>)
 8000f5e:	885a      	ldrh	r2, [r3, #2]
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	b29b      	uxth	r3, r3
 8000f64:	4413      	add	r3, r2
 8000f66:	b299      	uxth	r1, r3
 8000f68:	79bb      	ldrb	r3, [r7, #6]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	bf0c      	ite	eq
 8000f6e:	2301      	moveq	r3, #1
 8000f70:	2300      	movne	r3, #0
 8000f72:	b2db      	uxtb	r3, r3
 8000f74:	461a      	mov	r2, r3
 8000f76:	f7ff ff2d 	bl	8000dd4 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8000f7a:	693b      	ldr	r3, [r7, #16]
 8000f7c:	3301      	adds	r3, #1
 8000f7e:	613b      	str	r3, [r7, #16]
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	461a      	mov	r2, r3
 8000f86:	693b      	ldr	r3, [r7, #16]
 8000f88:	4293      	cmp	r3, r2
 8000f8a:	d3c8      	bcc.n	8000f1e <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	3301      	adds	r3, #1
 8000f90:	617b      	str	r3, [r7, #20]
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	785b      	ldrb	r3, [r3, #1]
 8000f96:	461a      	mov	r2, r3
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d3ad      	bcc.n	8000efa <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8000f9e:	4b07      	ldr	r3, [pc, #28]	; (8000fbc <SSD1306_Putc+0xfc>)
 8000fa0:	881a      	ldrh	r2, [r3, #0]
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	b29b      	uxth	r3, r3
 8000fa8:	4413      	add	r3, r2
 8000faa:	b29a      	uxth	r2, r3
 8000fac:	4b03      	ldr	r3, [pc, #12]	; (8000fbc <SSD1306_Putc+0xfc>)
 8000fae:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 8000fb0:	79fb      	ldrb	r3, [r7, #7]
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3718      	adds	r7, #24
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	200008bc 	.word	0x200008bc

08000fc0 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	60f8      	str	r0, [r7, #12]
 8000fc8:	60b9      	str	r1, [r7, #8]
 8000fca:	4613      	mov	r3, r2
 8000fcc:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8000fce:	e012      	b.n	8000ff6 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	79fa      	ldrb	r2, [r7, #7]
 8000fd6:	68b9      	ldr	r1, [r7, #8]
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f7ff ff71 	bl	8000ec0 <SSD1306_Putc>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	461a      	mov	r2, r3
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	429a      	cmp	r2, r3
 8000fe8:	d002      	beq.n	8000ff0 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	e008      	b.n	8001002 <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	3301      	adds	r3, #1
 8000ff4:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d1e8      	bne.n	8000fd0 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	781b      	ldrb	r3, [r3, #0]
}
 8001002:	4618      	mov	r0, r3
 8001004:	3710      	adds	r7, #16
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
	...

0800100c <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001012:	4b08      	ldr	r3, [pc, #32]	; (8001034 <ssd1306_I2C_Init+0x28>)
 8001014:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001016:	e002      	b.n	800101e <ssd1306_I2C_Init+0x12>
		p--;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	3b01      	subs	r3, #1
 800101c:	607b      	str	r3, [r7, #4]
	while(p>0)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d1f9      	bne.n	8001018 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001024:	bf00      	nop
 8001026:	bf00      	nop
 8001028:	370c      	adds	r7, #12
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	0003d090 	.word	0x0003d090

08001038 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001038:	b590      	push	{r4, r7, lr}
 800103a:	b0c7      	sub	sp, #284	; 0x11c
 800103c:	af02      	add	r7, sp, #8
 800103e:	4604      	mov	r4, r0
 8001040:	4608      	mov	r0, r1
 8001042:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8001046:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 800104a:	600a      	str	r2, [r1, #0]
 800104c:	4619      	mov	r1, r3
 800104e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001052:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8001056:	4622      	mov	r2, r4
 8001058:	701a      	strb	r2, [r3, #0]
 800105a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800105e:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8001062:	4602      	mov	r2, r0
 8001064:	701a      	strb	r2, [r3, #0]
 8001066:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800106a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800106e:	460a      	mov	r2, r1
 8001070:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001072:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001076:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800107a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800107e:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8001082:	7812      	ldrb	r2, [r2, #0]
 8001084:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001086:	2300      	movs	r3, #0
 8001088:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800108c:	e015      	b.n	80010ba <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 800108e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001092:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001096:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800109a:	6812      	ldr	r2, [r2, #0]
 800109c:	441a      	add	r2, r3
 800109e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80010a2:	3301      	adds	r3, #1
 80010a4:	7811      	ldrb	r1, [r2, #0]
 80010a6:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80010aa:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 80010ae:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 80010b0:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80010b4:	3301      	adds	r3, #1
 80010b6:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80010ba:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80010be:	b29b      	uxth	r3, r3
 80010c0:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80010c4:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80010c8:	8812      	ldrh	r2, [r2, #0]
 80010ca:	429a      	cmp	r2, r3
 80010cc:	d8df      	bhi.n	800108e <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 80010ce:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80010d2:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	b299      	uxth	r1, r3
 80010da:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80010de:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80010e2:	881b      	ldrh	r3, [r3, #0]
 80010e4:	3301      	adds	r3, #1
 80010e6:	b29b      	uxth	r3, r3
 80010e8:	f107 020c 	add.w	r2, r7, #12
 80010ec:	200a      	movs	r0, #10
 80010ee:	9000      	str	r0, [sp, #0]
 80010f0:	4803      	ldr	r0, [pc, #12]	; (8001100 <ssd1306_I2C_WriteMulti+0xc8>)
 80010f2:	f001 fe89 	bl	8002e08 <HAL_I2C_Master_Transmit>
}
 80010f6:	bf00      	nop
 80010f8:	f507 778a 	add.w	r7, r7, #276	; 0x114
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd90      	pop	{r4, r7, pc}
 8001100:	200008c4 	.word	0x200008c4

08001104 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001104:	b580      	push	{r7, lr}
 8001106:	b086      	sub	sp, #24
 8001108:	af02      	add	r7, sp, #8
 800110a:	4603      	mov	r3, r0
 800110c:	71fb      	strb	r3, [r7, #7]
 800110e:	460b      	mov	r3, r1
 8001110:	71bb      	strb	r3, [r7, #6]
 8001112:	4613      	mov	r3, r2
 8001114:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001116:	79bb      	ldrb	r3, [r7, #6]
 8001118:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 800111a:	797b      	ldrb	r3, [r7, #5]
 800111c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 800111e:	79fb      	ldrb	r3, [r7, #7]
 8001120:	b299      	uxth	r1, r3
 8001122:	f107 020c 	add.w	r2, r7, #12
 8001126:	230a      	movs	r3, #10
 8001128:	9300      	str	r3, [sp, #0]
 800112a:	2302      	movs	r3, #2
 800112c:	4803      	ldr	r0, [pc, #12]	; (800113c <ssd1306_I2C_Write+0x38>)
 800112e:	f001 fe6b 	bl	8002e08 <HAL_I2C_Master_Transmit>
}
 8001132:	bf00      	nop
 8001134:	3710      	adds	r7, #16
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	200008c4 	.word	0x200008c4

08001140 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001146:	2300      	movs	r3, #0
 8001148:	607b      	str	r3, [r7, #4]
 800114a:	4b17      	ldr	r3, [pc, #92]	; (80011a8 <MX_DMA_Init+0x68>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114e:	4a16      	ldr	r2, [pc, #88]	; (80011a8 <MX_DMA_Init+0x68>)
 8001150:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001154:	6313      	str	r3, [r2, #48]	; 0x30
 8001156:	4b14      	ldr	r3, [pc, #80]	; (80011a8 <MX_DMA_Init+0x68>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800115e:	607b      	str	r3, [r7, #4]
 8001160:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001162:	2300      	movs	r3, #0
 8001164:	603b      	str	r3, [r7, #0]
 8001166:	4b10      	ldr	r3, [pc, #64]	; (80011a8 <MX_DMA_Init+0x68>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116a:	4a0f      	ldr	r2, [pc, #60]	; (80011a8 <MX_DMA_Init+0x68>)
 800116c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001170:	6313      	str	r3, [r2, #48]	; 0x30
 8001172:	4b0d      	ldr	r3, [pc, #52]	; (80011a8 <MX_DMA_Init+0x68>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001176:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800117a:	603b      	str	r3, [r7, #0]
 800117c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800117e:	2200      	movs	r2, #0
 8001180:	2100      	movs	r1, #0
 8001182:	200b      	movs	r0, #11
 8001184:	f000 fefb 	bl	8001f7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001188:	200b      	movs	r0, #11
 800118a:	f000 ff14 	bl	8001fb6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800118e:	2200      	movs	r2, #0
 8001190:	2100      	movs	r1, #0
 8001192:	203a      	movs	r0, #58	; 0x3a
 8001194:	f000 fef3 	bl	8001f7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001198:	203a      	movs	r0, #58	; 0x3a
 800119a:	f000 ff0c 	bl	8001fb6 <HAL_NVIC_EnableIRQ>

}
 800119e:	bf00      	nop
 80011a0:	3708      	adds	r7, #8
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	40023800 	.word	0x40023800

080011ac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b088      	sub	sp, #32
 80011b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b2:	f107 030c 	add.w	r3, r7, #12
 80011b6:	2200      	movs	r2, #0
 80011b8:	601a      	str	r2, [r3, #0]
 80011ba:	605a      	str	r2, [r3, #4]
 80011bc:	609a      	str	r2, [r3, #8]
 80011be:	60da      	str	r2, [r3, #12]
 80011c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011c2:	2300      	movs	r3, #0
 80011c4:	60bb      	str	r3, [r7, #8]
 80011c6:	4b18      	ldr	r3, [pc, #96]	; (8001228 <MX_GPIO_Init+0x7c>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ca:	4a17      	ldr	r2, [pc, #92]	; (8001228 <MX_GPIO_Init+0x7c>)
 80011cc:	f043 0301 	orr.w	r3, r3, #1
 80011d0:	6313      	str	r3, [r2, #48]	; 0x30
 80011d2:	4b15      	ldr	r3, [pc, #84]	; (8001228 <MX_GPIO_Init+0x7c>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d6:	f003 0301 	and.w	r3, r3, #1
 80011da:	60bb      	str	r3, [r7, #8]
 80011dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011de:	2300      	movs	r3, #0
 80011e0:	607b      	str	r3, [r7, #4]
 80011e2:	4b11      	ldr	r3, [pc, #68]	; (8001228 <MX_GPIO_Init+0x7c>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e6:	4a10      	ldr	r2, [pc, #64]	; (8001228 <MX_GPIO_Init+0x7c>)
 80011e8:	f043 0302 	orr.w	r3, r3, #2
 80011ec:	6313      	str	r3, [r2, #48]	; 0x30
 80011ee:	4b0e      	ldr	r3, [pc, #56]	; (8001228 <MX_GPIO_Init+0x7c>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f2:	f003 0302 	and.w	r3, r3, #2
 80011f6:	607b      	str	r3, [r7, #4]
 80011f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80011fa:	2200      	movs	r2, #0
 80011fc:	2120      	movs	r1, #32
 80011fe:	480b      	ldr	r0, [pc, #44]	; (800122c <MX_GPIO_Init+0x80>)
 8001200:	f001 fc8a 	bl	8002b18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001204:	2320      	movs	r3, #32
 8001206:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001208:	2301      	movs	r3, #1
 800120a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120c:	2300      	movs	r3, #0
 800120e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001210:	2300      	movs	r3, #0
 8001212:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001214:	f107 030c 	add.w	r3, r7, #12
 8001218:	4619      	mov	r1, r3
 800121a:	4804      	ldr	r0, [pc, #16]	; (800122c <MX_GPIO_Init+0x80>)
 800121c:	f001 fae8 	bl	80027f0 <HAL_GPIO_Init>

}
 8001220:	bf00      	nop
 8001222:	3720      	adds	r7, #32
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	40023800 	.word	0x40023800
 800122c:	40020000 	.word	0x40020000

08001230 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001234:	4b12      	ldr	r3, [pc, #72]	; (8001280 <MX_I2C1_Init+0x50>)
 8001236:	4a13      	ldr	r2, [pc, #76]	; (8001284 <MX_I2C1_Init+0x54>)
 8001238:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800123a:	4b11      	ldr	r3, [pc, #68]	; (8001280 <MX_I2C1_Init+0x50>)
 800123c:	4a12      	ldr	r2, [pc, #72]	; (8001288 <MX_I2C1_Init+0x58>)
 800123e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001240:	4b0f      	ldr	r3, [pc, #60]	; (8001280 <MX_I2C1_Init+0x50>)
 8001242:	2200      	movs	r2, #0
 8001244:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001246:	4b0e      	ldr	r3, [pc, #56]	; (8001280 <MX_I2C1_Init+0x50>)
 8001248:	2200      	movs	r2, #0
 800124a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800124c:	4b0c      	ldr	r3, [pc, #48]	; (8001280 <MX_I2C1_Init+0x50>)
 800124e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001252:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001254:	4b0a      	ldr	r3, [pc, #40]	; (8001280 <MX_I2C1_Init+0x50>)
 8001256:	2200      	movs	r2, #0
 8001258:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800125a:	4b09      	ldr	r3, [pc, #36]	; (8001280 <MX_I2C1_Init+0x50>)
 800125c:	2200      	movs	r2, #0
 800125e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001260:	4b07      	ldr	r3, [pc, #28]	; (8001280 <MX_I2C1_Init+0x50>)
 8001262:	2200      	movs	r2, #0
 8001264:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001266:	4b06      	ldr	r3, [pc, #24]	; (8001280 <MX_I2C1_Init+0x50>)
 8001268:	2200      	movs	r2, #0
 800126a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800126c:	4804      	ldr	r0, [pc, #16]	; (8001280 <MX_I2C1_Init+0x50>)
 800126e:	f001 fc87 	bl	8002b80 <HAL_I2C_Init>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001278:	f000 f930 	bl	80014dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800127c:	bf00      	nop
 800127e:	bd80      	pop	{r7, pc}
 8001280:	200008c4 	.word	0x200008c4
 8001284:	40005400 	.word	0x40005400
 8001288:	00061a80 	.word	0x00061a80

0800128c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b08a      	sub	sp, #40	; 0x28
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001294:	f107 0314 	add.w	r3, r7, #20
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]
 800129c:	605a      	str	r2, [r3, #4]
 800129e:	609a      	str	r2, [r3, #8]
 80012a0:	60da      	str	r2, [r3, #12]
 80012a2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a19      	ldr	r2, [pc, #100]	; (8001310 <HAL_I2C_MspInit+0x84>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d12c      	bne.n	8001308 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ae:	2300      	movs	r3, #0
 80012b0:	613b      	str	r3, [r7, #16]
 80012b2:	4b18      	ldr	r3, [pc, #96]	; (8001314 <HAL_I2C_MspInit+0x88>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b6:	4a17      	ldr	r2, [pc, #92]	; (8001314 <HAL_I2C_MspInit+0x88>)
 80012b8:	f043 0302 	orr.w	r3, r3, #2
 80012bc:	6313      	str	r3, [r2, #48]	; 0x30
 80012be:	4b15      	ldr	r3, [pc, #84]	; (8001314 <HAL_I2C_MspInit+0x88>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c2:	f003 0302 	and.w	r3, r3, #2
 80012c6:	613b      	str	r3, [r7, #16]
 80012c8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80012ca:	f44f 7340 	mov.w	r3, #768	; 0x300
 80012ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012d0:	2312      	movs	r3, #18
 80012d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d4:	2300      	movs	r3, #0
 80012d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012d8:	2303      	movs	r3, #3
 80012da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012dc:	2304      	movs	r3, #4
 80012de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012e0:	f107 0314 	add.w	r3, r7, #20
 80012e4:	4619      	mov	r1, r3
 80012e6:	480c      	ldr	r0, [pc, #48]	; (8001318 <HAL_I2C_MspInit+0x8c>)
 80012e8:	f001 fa82 	bl	80027f0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012ec:	2300      	movs	r3, #0
 80012ee:	60fb      	str	r3, [r7, #12]
 80012f0:	4b08      	ldr	r3, [pc, #32]	; (8001314 <HAL_I2C_MspInit+0x88>)
 80012f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f4:	4a07      	ldr	r2, [pc, #28]	; (8001314 <HAL_I2C_MspInit+0x88>)
 80012f6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012fa:	6413      	str	r3, [r2, #64]	; 0x40
 80012fc:	4b05      	ldr	r3, [pc, #20]	; (8001314 <HAL_I2C_MspInit+0x88>)
 80012fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001300:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001304:	60fb      	str	r3, [r7, #12]
 8001306:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001308:	bf00      	nop
 800130a:	3728      	adds	r7, #40	; 0x28
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	40005400 	.word	0x40005400
 8001314:	40023800 	.word	0x40023800
 8001318:	40020400 	.word	0x40020400

0800131c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800131c:	b5b0      	push	{r4, r5, r7, lr}
 800131e:	b08a      	sub	sp, #40	; 0x28
 8001320:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001322:	f000 fcbb 	bl	8001c9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001326:	f000 f86b 	bl	8001400 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800132a:	f7ff ff3f 	bl	80011ac <MX_GPIO_Init>
  MX_DMA_Init();
 800132e:	f7ff ff07 	bl	8001140 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001332:	f000 fba7 	bl	8001a84 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001336:	f7ff ff7b 	bl	8001230 <MX_I2C1_Init>
  MX_TIM3_Init();
 800133a:	f000 f997 	bl	800166c <MX_TIM3_Init>
  MX_TIM4_Init();
 800133e:	f000 f9e9 	bl	8001714 <MX_TIM4_Init>
  MX_TIM6_Init();
 8001342:	f000 fa3f 	bl	80017c4 <MX_TIM6_Init>
  MX_USART1_UART_Init();
 8001346:	f000 fb73 	bl	8001a30 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

	SSD1306_Init();
 800134a:	f7ff fc39 	bl	8000bc0 <SSD1306_Init>

	SSD1306_GotoXY (0, 0);
 800134e:	2100      	movs	r1, #0
 8001350:	2000      	movs	r0, #0
 8001352:	f7ff fd9f 	bl	8000e94 <SSD1306_GotoXY>
	SSD1306_Puts("HA3PB", &Font_7x10, 1);
 8001356:	2201      	movs	r2, #1
 8001358:	4922      	ldr	r1, [pc, #136]	; (80013e4 <main+0xc8>)
 800135a:	4823      	ldr	r0, [pc, #140]	; (80013e8 <main+0xcc>)
 800135c:	f7ff fe30 	bl	8000fc0 <SSD1306_Puts>

	SSD1306_GotoXY(0, 10);
 8001360:	210a      	movs	r1, #10
 8001362:	2000      	movs	r0, #0
 8001364:	f7ff fd96 	bl	8000e94 <SSD1306_GotoXY>
	SSD1306_Puts("APRS GADGET", &Font_11x18, 1);
 8001368:	2201      	movs	r2, #1
 800136a:	4920      	ldr	r1, [pc, #128]	; (80013ec <main+0xd0>)
 800136c:	4820      	ldr	r0, [pc, #128]	; (80013f0 <main+0xd4>)
 800136e:	f7ff fe27 	bl	8000fc0 <SSD1306_Puts>

	char counter[12];

	char menu[4][7] = {"CALL","PERIOD","ICON","QUIT"};
 8001372:	4b20      	ldr	r3, [pc, #128]	; (80013f4 <main+0xd8>)
 8001374:	463c      	mov	r4, r7
 8001376:	461d      	mov	r5, r3
 8001378:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800137a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800137c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001380:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	APRS_Init();
 8001384:	f7ff f954 	bl	8000630 <APRS_Init>
	APRS_SendPacket();
 8001388:	f7ff fa72 	bl	8000870 <APRS_SendPacket>

	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 800138c:	213c      	movs	r1, #60	; 0x3c
 800138e:	481a      	ldr	r0, [pc, #104]	; (80013f8 <main+0xdc>)
 8001390:	f003 fbd6 	bl	8004b40 <HAL_TIM_Encoder_Start>

	GPS_ReceiveNMEA();
 8001394:	f7ff fbe4 	bl	8000b60 <GPS_ReceiveNMEA>

	SSD1306_UpdateScreen();
 8001398:	f7ff fcd6 	bl	8000d48 <SSD1306_UpdateScreen>
	HAL_Delay (1000);
 800139c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013a0:	f000 fcee 	bl	8001d80 <HAL_Delay>
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		sprintf(counter, "MENU:%6s", menu[(__HAL_TIM_GET_COUNTER(&htim3))>>2]);
 80013a4:	4b14      	ldr	r3, [pc, #80]	; (80013f8 <main+0xdc>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013aa:	089a      	lsrs	r2, r3, #2
 80013ac:	4639      	mov	r1, r7
 80013ae:	4613      	mov	r3, r2
 80013b0:	00db      	lsls	r3, r3, #3
 80013b2:	1a9b      	subs	r3, r3, r2
 80013b4:	18ca      	adds	r2, r1, r3
 80013b6:	f107 031c 	add.w	r3, r7, #28
 80013ba:	4910      	ldr	r1, [pc, #64]	; (80013fc <main+0xe0>)
 80013bc:	4618      	mov	r0, r3
 80013be:	f005 fb91 	bl	8006ae4 <siprintf>
		SSD1306_GotoXY(0, 10);
 80013c2:	210a      	movs	r1, #10
 80013c4:	2000      	movs	r0, #0
 80013c6:	f7ff fd65 	bl	8000e94 <SSD1306_GotoXY>
		SSD1306_Puts(counter, &Font_11x18, 1);
 80013ca:	f107 031c 	add.w	r3, r7, #28
 80013ce:	2201      	movs	r2, #1
 80013d0:	4906      	ldr	r1, [pc, #24]	; (80013ec <main+0xd0>)
 80013d2:	4618      	mov	r0, r3
 80013d4:	f7ff fdf4 	bl	8000fc0 <SSD1306_Puts>
		SSD1306_UpdateScreen();
 80013d8:	f7ff fcb6 	bl	8000d48 <SSD1306_UpdateScreen>

		HAL_Delay(20);
 80013dc:	2014      	movs	r0, #20
 80013de:	f000 fccf 	bl	8001d80 <HAL_Delay>
		sprintf(counter, "MENU:%6s", menu[(__HAL_TIM_GET_COUNTER(&htim3))>>2]);
 80013e2:	e7df      	b.n	80013a4 <main+0x88>
 80013e4:	20000004 	.word	0x20000004
 80013e8:	0800740c 	.word	0x0800740c
 80013ec:	2000000c 	.word	0x2000000c
 80013f0:	08007414 	.word	0x08007414
 80013f4:	0800742c 	.word	0x0800742c
 80013f8:	2000091c 	.word	0x2000091c
 80013fc:	08007420 	.word	0x08007420

08001400 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b094      	sub	sp, #80	; 0x50
 8001404:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001406:	f107 031c 	add.w	r3, r7, #28
 800140a:	2234      	movs	r2, #52	; 0x34
 800140c:	2100      	movs	r1, #0
 800140e:	4618      	mov	r0, r3
 8001410:	f005 fb60 	bl	8006ad4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001414:	f107 0308 	add.w	r3, r7, #8
 8001418:	2200      	movs	r2, #0
 800141a:	601a      	str	r2, [r3, #0]
 800141c:	605a      	str	r2, [r3, #4]
 800141e:	609a      	str	r2, [r3, #8]
 8001420:	60da      	str	r2, [r3, #12]
 8001422:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001424:	2300      	movs	r3, #0
 8001426:	607b      	str	r3, [r7, #4]
 8001428:	4b2a      	ldr	r3, [pc, #168]	; (80014d4 <SystemClock_Config+0xd4>)
 800142a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142c:	4a29      	ldr	r2, [pc, #164]	; (80014d4 <SystemClock_Config+0xd4>)
 800142e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001432:	6413      	str	r3, [r2, #64]	; 0x40
 8001434:	4b27      	ldr	r3, [pc, #156]	; (80014d4 <SystemClock_Config+0xd4>)
 8001436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001438:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800143c:	607b      	str	r3, [r7, #4]
 800143e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001440:	2300      	movs	r3, #0
 8001442:	603b      	str	r3, [r7, #0]
 8001444:	4b24      	ldr	r3, [pc, #144]	; (80014d8 <SystemClock_Config+0xd8>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800144c:	4a22      	ldr	r2, [pc, #136]	; (80014d8 <SystemClock_Config+0xd8>)
 800144e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001452:	6013      	str	r3, [r2, #0]
 8001454:	4b20      	ldr	r3, [pc, #128]	; (80014d8 <SystemClock_Config+0xd8>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800145c:	603b      	str	r3, [r7, #0]
 800145e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001460:	2302      	movs	r3, #2
 8001462:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001464:	2301      	movs	r3, #1
 8001466:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001468:	2310      	movs	r3, #16
 800146a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800146c:	2302      	movs	r3, #2
 800146e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001470:	2300      	movs	r3, #0
 8001472:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001474:	2308      	movs	r3, #8
 8001476:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001478:	2360      	movs	r3, #96	; 0x60
 800147a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800147c:	2302      	movs	r3, #2
 800147e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001480:	2302      	movs	r3, #2
 8001482:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001484:	2302      	movs	r3, #2
 8001486:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001488:	f107 031c 	add.w	r3, r7, #28
 800148c:	4618      	mov	r0, r3
 800148e:	f002 fc3b 	bl	8003d08 <HAL_RCC_OscConfig>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001498:	f000 f820 	bl	80014dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800149c:	230f      	movs	r3, #15
 800149e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014a0:	2302      	movs	r3, #2
 80014a2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80014a4:	2380      	movs	r3, #128	; 0x80
 80014a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014ac:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80014ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014b2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80014b4:	f107 0308 	add.w	r3, r7, #8
 80014b8:	2101      	movs	r1, #1
 80014ba:	4618      	mov	r0, r3
 80014bc:	f002 f8da 	bl	8003674 <HAL_RCC_ClockConfig>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <SystemClock_Config+0xca>
  {
    Error_Handler();
 80014c6:	f000 f809 	bl	80014dc <Error_Handler>
  }
}
 80014ca:	bf00      	nop
 80014cc:	3750      	adds	r7, #80	; 0x50
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	40023800 	.word	0x40023800
 80014d8:	40007000 	.word	0x40007000

080014dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014e0:	b672      	cpsid	i
}
 80014e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80014e4:	e7fe      	b.n	80014e4 <Error_Handler+0x8>
	...

080014e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ee:	2300      	movs	r3, #0
 80014f0:	607b      	str	r3, [r7, #4]
 80014f2:	4b10      	ldr	r3, [pc, #64]	; (8001534 <HAL_MspInit+0x4c>)
 80014f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f6:	4a0f      	ldr	r2, [pc, #60]	; (8001534 <HAL_MspInit+0x4c>)
 80014f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014fc:	6453      	str	r3, [r2, #68]	; 0x44
 80014fe:	4b0d      	ldr	r3, [pc, #52]	; (8001534 <HAL_MspInit+0x4c>)
 8001500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001502:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001506:	607b      	str	r3, [r7, #4]
 8001508:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800150a:	2300      	movs	r3, #0
 800150c:	603b      	str	r3, [r7, #0]
 800150e:	4b09      	ldr	r3, [pc, #36]	; (8001534 <HAL_MspInit+0x4c>)
 8001510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001512:	4a08      	ldr	r2, [pc, #32]	; (8001534 <HAL_MspInit+0x4c>)
 8001514:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001518:	6413      	str	r3, [r2, #64]	; 0x40
 800151a:	4b06      	ldr	r3, [pc, #24]	; (8001534 <HAL_MspInit+0x4c>)
 800151c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001522:	603b      	str	r3, [r7, #0]
 8001524:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001526:	2007      	movs	r0, #7
 8001528:	f000 fd1e 	bl	8001f68 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800152c:	bf00      	nop
 800152e:	3708      	adds	r7, #8
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	40023800 	.word	0x40023800

08001538 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800153c:	e7fe      	b.n	800153c <NMI_Handler+0x4>

0800153e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800153e:	b480      	push	{r7}
 8001540:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001542:	e7fe      	b.n	8001542 <HardFault_Handler+0x4>

08001544 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001548:	e7fe      	b.n	8001548 <MemManage_Handler+0x4>

0800154a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800154a:	b480      	push	{r7}
 800154c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800154e:	e7fe      	b.n	800154e <BusFault_Handler+0x4>

08001550 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001554:	e7fe      	b.n	8001554 <UsageFault_Handler+0x4>

08001556 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001556:	b480      	push	{r7}
 8001558:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800155a:	bf00      	nop
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr

08001564 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001568:	bf00      	nop
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr

08001572 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001572:	b480      	push	{r7}
 8001574:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001576:	bf00      	nop
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr

08001580 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001584:	f000 fbdc 	bl	8001d40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001588:	bf00      	nop
 800158a:	bd80      	pop	{r7, pc}

0800158c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch1);
 8001590:	4802      	ldr	r0, [pc, #8]	; (800159c <DMA1_Stream0_IRQHandler+0x10>)
 8001592:	f000 fec3 	bl	800231c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001596:	bf00      	nop
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	200009f4 	.word	0x200009f4

080015a0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80015a4:	4802      	ldr	r0, [pc, #8]	; (80015b0 <USART1_IRQHandler+0x10>)
 80015a6:	f004 f9e9 	bl	800597c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80015aa:	bf00      	nop
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	20000a54 	.word	0x20000a54

080015b4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80015b8:	4802      	ldr	r0, [pc, #8]	; (80015c4 <TIM6_DAC_IRQHandler+0x10>)
 80015ba:	f003 fb4f 	bl	8004c5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80015be:	bf00      	nop
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	200009ac 	.word	0x200009ac

080015c8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80015cc:	4802      	ldr	r0, [pc, #8]	; (80015d8 <DMA2_Stream2_IRQHandler+0x10>)
 80015ce:	f000 fea5 	bl	800231c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80015d2:	bf00      	nop
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	20000adc 	.word	0x20000adc

080015dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b086      	sub	sp, #24
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015e4:	4a14      	ldr	r2, [pc, #80]	; (8001638 <_sbrk+0x5c>)
 80015e6:	4b15      	ldr	r3, [pc, #84]	; (800163c <_sbrk+0x60>)
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015f0:	4b13      	ldr	r3, [pc, #76]	; (8001640 <_sbrk+0x64>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d102      	bne.n	80015fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015f8:	4b11      	ldr	r3, [pc, #68]	; (8001640 <_sbrk+0x64>)
 80015fa:	4a12      	ldr	r2, [pc, #72]	; (8001644 <_sbrk+0x68>)
 80015fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015fe:	4b10      	ldr	r3, [pc, #64]	; (8001640 <_sbrk+0x64>)
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	4413      	add	r3, r2
 8001606:	693a      	ldr	r2, [r7, #16]
 8001608:	429a      	cmp	r2, r3
 800160a:	d207      	bcs.n	800161c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800160c:	f005 fa38 	bl	8006a80 <__errno>
 8001610:	4603      	mov	r3, r0
 8001612:	220c      	movs	r2, #12
 8001614:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001616:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800161a:	e009      	b.n	8001630 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800161c:	4b08      	ldr	r3, [pc, #32]	; (8001640 <_sbrk+0x64>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001622:	4b07      	ldr	r3, [pc, #28]	; (8001640 <_sbrk+0x64>)
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	4413      	add	r3, r2
 800162a:	4a05      	ldr	r2, [pc, #20]	; (8001640 <_sbrk+0x64>)
 800162c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800162e:	68fb      	ldr	r3, [r7, #12]
}
 8001630:	4618      	mov	r0, r3
 8001632:	3718      	adds	r7, #24
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	20020000 	.word	0x20020000
 800163c:	00000400 	.word	0x00000400
 8001640:	20000918 	.word	0x20000918
 8001644:	20000b50 	.word	0x20000b50

08001648 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800164c:	4b06      	ldr	r3, [pc, #24]	; (8001668 <SystemInit+0x20>)
 800164e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001652:	4a05      	ldr	r2, [pc, #20]	; (8001668 <SystemInit+0x20>)
 8001654:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001658:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800165c:	bf00      	nop
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr
 8001666:	bf00      	nop
 8001668:	e000ed00 	.word	0xe000ed00

0800166c <MX_TIM3_Init>:
TIM_HandleTypeDef htim6;
DMA_HandleTypeDef hdma_tim4_ch1;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b08c      	sub	sp, #48	; 0x30
 8001670:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001672:	f107 030c 	add.w	r3, r7, #12
 8001676:	2224      	movs	r2, #36	; 0x24
 8001678:	2100      	movs	r1, #0
 800167a:	4618      	mov	r0, r3
 800167c:	f005 fa2a 	bl	8006ad4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001680:	1d3b      	adds	r3, r7, #4
 8001682:	2200      	movs	r2, #0
 8001684:	601a      	str	r2, [r3, #0]
 8001686:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001688:	4b20      	ldr	r3, [pc, #128]	; (800170c <MX_TIM3_Init+0xa0>)
 800168a:	4a21      	ldr	r2, [pc, #132]	; (8001710 <MX_TIM3_Init+0xa4>)
 800168c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800168e:	4b1f      	ldr	r3, [pc, #124]	; (800170c <MX_TIM3_Init+0xa0>)
 8001690:	2200      	movs	r2, #0
 8001692:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001694:	4b1d      	ldr	r3, [pc, #116]	; (800170c <MX_TIM3_Init+0xa0>)
 8001696:	2200      	movs	r2, #0
 8001698:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 15;
 800169a:	4b1c      	ldr	r3, [pc, #112]	; (800170c <MX_TIM3_Init+0xa0>)
 800169c:	220f      	movs	r2, #15
 800169e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016a0:	4b1a      	ldr	r3, [pc, #104]	; (800170c <MX_TIM3_Init+0xa0>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80016a6:	4b19      	ldr	r3, [pc, #100]	; (800170c <MX_TIM3_Init+0xa0>)
 80016a8:	2280      	movs	r2, #128	; 0x80
 80016aa:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80016ac:	2303      	movs	r3, #3
 80016ae:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 80016b0:	2302      	movs	r3, #2
 80016b2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80016b4:	2301      	movs	r3, #1
 80016b6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80016b8:	2300      	movs	r3, #0
 80016ba:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80016bc:	230a      	movs	r3, #10
 80016be:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 80016c0:	2302      	movs	r3, #2
 80016c2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80016c4:	2301      	movs	r3, #1
 80016c6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80016c8:	2300      	movs	r3, #0
 80016ca:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 80016cc:	230a      	movs	r3, #10
 80016ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80016d0:	f107 030c 	add.w	r3, r7, #12
 80016d4:	4619      	mov	r1, r3
 80016d6:	480d      	ldr	r0, [pc, #52]	; (800170c <MX_TIM3_Init+0xa0>)
 80016d8:	f003 f98c 	bl	80049f4 <HAL_TIM_Encoder_Init>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 80016e2:	f7ff fefb 	bl	80014dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016e6:	2300      	movs	r3, #0
 80016e8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016ea:	2300      	movs	r3, #0
 80016ec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80016ee:	1d3b      	adds	r3, r7, #4
 80016f0:	4619      	mov	r1, r3
 80016f2:	4806      	ldr	r0, [pc, #24]	; (800170c <MX_TIM3_Init+0xa0>)
 80016f4:	f004 f800 	bl	80056f8 <HAL_TIMEx_MasterConfigSynchronization>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80016fe:	f7ff feed 	bl	80014dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001702:	bf00      	nop
 8001704:	3730      	adds	r7, #48	; 0x30
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	2000091c 	.word	0x2000091c
 8001710:	40000400 	.word	0x40000400

08001714 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b08a      	sub	sp, #40	; 0x28
 8001718:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800171a:	f107 0320 	add.w	r3, r7, #32
 800171e:	2200      	movs	r2, #0
 8001720:	601a      	str	r2, [r3, #0]
 8001722:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001724:	1d3b      	adds	r3, r7, #4
 8001726:	2200      	movs	r2, #0
 8001728:	601a      	str	r2, [r3, #0]
 800172a:	605a      	str	r2, [r3, #4]
 800172c:	609a      	str	r2, [r3, #8]
 800172e:	60da      	str	r2, [r3, #12]
 8001730:	611a      	str	r2, [r3, #16]
 8001732:	615a      	str	r2, [r3, #20]
 8001734:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001736:	4b21      	ldr	r3, [pc, #132]	; (80017bc <MX_TIM4_Init+0xa8>)
 8001738:	4a21      	ldr	r2, [pc, #132]	; (80017c0 <MX_TIM4_Init+0xac>)
 800173a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 10;
 800173c:	4b1f      	ldr	r3, [pc, #124]	; (80017bc <MX_TIM4_Init+0xa8>)
 800173e:	220a      	movs	r2, #10
 8001740:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001742:	4b1e      	ldr	r3, [pc, #120]	; (80017bc <MX_TIM4_Init+0xa8>)
 8001744:	2200      	movs	r2, #0
 8001746:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100;
 8001748:	4b1c      	ldr	r3, [pc, #112]	; (80017bc <MX_TIM4_Init+0xa8>)
 800174a:	2264      	movs	r2, #100	; 0x64
 800174c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800174e:	4b1b      	ldr	r3, [pc, #108]	; (80017bc <MX_TIM4_Init+0xa8>)
 8001750:	2200      	movs	r2, #0
 8001752:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001754:	4b19      	ldr	r3, [pc, #100]	; (80017bc <MX_TIM4_Init+0xa8>)
 8001756:	2280      	movs	r2, #128	; 0x80
 8001758:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800175a:	4818      	ldr	r0, [pc, #96]	; (80017bc <MX_TIM4_Init+0xa8>)
 800175c:	f002 fe61 	bl	8004422 <HAL_TIM_PWM_Init>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8001766:	f7ff feb9 	bl	80014dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800176a:	2300      	movs	r3, #0
 800176c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800176e:	2300      	movs	r3, #0
 8001770:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001772:	f107 0320 	add.w	r3, r7, #32
 8001776:	4619      	mov	r1, r3
 8001778:	4810      	ldr	r0, [pc, #64]	; (80017bc <MX_TIM4_Init+0xa8>)
 800177a:	f003 ffbd 	bl	80056f8 <HAL_TIMEx_MasterConfigSynchronization>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <MX_TIM4_Init+0x74>
  {
    Error_Handler();
 8001784:	f7ff feaa 	bl	80014dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001788:	2360      	movs	r3, #96	; 0x60
 800178a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800178c:	2300      	movs	r3, #0
 800178e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001790:	2300      	movs	r3, #0
 8001792:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001794:	2300      	movs	r3, #0
 8001796:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001798:	1d3b      	adds	r3, r7, #4
 800179a:	2200      	movs	r2, #0
 800179c:	4619      	mov	r1, r3
 800179e:	4807      	ldr	r0, [pc, #28]	; (80017bc <MX_TIM4_Init+0xa8>)
 80017a0:	f003 fb64 	bl	8004e6c <HAL_TIM_PWM_ConfigChannel>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80017aa:	f7ff fe97 	bl	80014dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80017ae:	4803      	ldr	r0, [pc, #12]	; (80017bc <MX_TIM4_Init+0xa8>)
 80017b0:	f000 f904 	bl	80019bc <HAL_TIM_MspPostInit>

}
 80017b4:	bf00      	nop
 80017b6:	3728      	adds	r7, #40	; 0x28
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	20000964 	.word	0x20000964
 80017c0:	40000800 	.word	0x40000800

080017c4 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017ca:	463b      	mov	r3, r7
 80017cc:	2200      	movs	r2, #0
 80017ce:	601a      	str	r2, [r3, #0]
 80017d0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80017d2:	4b15      	ldr	r3, [pc, #84]	; (8001828 <MX_TIM6_Init+0x64>)
 80017d4:	4a15      	ldr	r2, [pc, #84]	; (800182c <MX_TIM6_Init+0x68>)
 80017d6:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 19999;
 80017d8:	4b13      	ldr	r3, [pc, #76]	; (8001828 <MX_TIM6_Init+0x64>)
 80017da:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80017de:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017e0:	4b11      	ldr	r3, [pc, #68]	; (8001828 <MX_TIM6_Init+0x64>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1;
 80017e6:	4b10      	ldr	r3, [pc, #64]	; (8001828 <MX_TIM6_Init+0x64>)
 80017e8:	2201      	movs	r2, #1
 80017ea:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80017ec:	4b0e      	ldr	r3, [pc, #56]	; (8001828 <MX_TIM6_Init+0x64>)
 80017ee:	2280      	movs	r2, #128	; 0x80
 80017f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80017f2:	480d      	ldr	r0, [pc, #52]	; (8001828 <MX_TIM6_Init+0x64>)
 80017f4:	f002 fd26 	bl	8004244 <HAL_TIM_Base_Init>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80017fe:	f7ff fe6d 	bl	80014dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001802:	2300      	movs	r3, #0
 8001804:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001806:	2300      	movs	r3, #0
 8001808:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800180a:	463b      	mov	r3, r7
 800180c:	4619      	mov	r1, r3
 800180e:	4806      	ldr	r0, [pc, #24]	; (8001828 <MX_TIM6_Init+0x64>)
 8001810:	f003 ff72 	bl	80056f8 <HAL_TIMEx_MasterConfigSynchronization>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800181a:	f7ff fe5f 	bl	80014dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800181e:	bf00      	nop
 8001820:	3708      	adds	r7, #8
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	200009ac 	.word	0x200009ac
 800182c:	40001000 	.word	0x40001000

08001830 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b08a      	sub	sp, #40	; 0x28
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001838:	f107 0314 	add.w	r3, r7, #20
 800183c:	2200      	movs	r2, #0
 800183e:	601a      	str	r2, [r3, #0]
 8001840:	605a      	str	r2, [r3, #4]
 8001842:	609a      	str	r2, [r3, #8]
 8001844:	60da      	str	r2, [r3, #12]
 8001846:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a19      	ldr	r2, [pc, #100]	; (80018b4 <HAL_TIM_Encoder_MspInit+0x84>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d12b      	bne.n	80018aa <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001852:	2300      	movs	r3, #0
 8001854:	613b      	str	r3, [r7, #16]
 8001856:	4b18      	ldr	r3, [pc, #96]	; (80018b8 <HAL_TIM_Encoder_MspInit+0x88>)
 8001858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185a:	4a17      	ldr	r2, [pc, #92]	; (80018b8 <HAL_TIM_Encoder_MspInit+0x88>)
 800185c:	f043 0302 	orr.w	r3, r3, #2
 8001860:	6413      	str	r3, [r2, #64]	; 0x40
 8001862:	4b15      	ldr	r3, [pc, #84]	; (80018b8 <HAL_TIM_Encoder_MspInit+0x88>)
 8001864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001866:	f003 0302 	and.w	r3, r3, #2
 800186a:	613b      	str	r3, [r7, #16]
 800186c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800186e:	2300      	movs	r3, #0
 8001870:	60fb      	str	r3, [r7, #12]
 8001872:	4b11      	ldr	r3, [pc, #68]	; (80018b8 <HAL_TIM_Encoder_MspInit+0x88>)
 8001874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001876:	4a10      	ldr	r2, [pc, #64]	; (80018b8 <HAL_TIM_Encoder_MspInit+0x88>)
 8001878:	f043 0301 	orr.w	r3, r3, #1
 800187c:	6313      	str	r3, [r2, #48]	; 0x30
 800187e:	4b0e      	ldr	r3, [pc, #56]	; (80018b8 <HAL_TIM_Encoder_MspInit+0x88>)
 8001880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001882:	f003 0301 	and.w	r3, r3, #1
 8001886:	60fb      	str	r3, [r7, #12]
 8001888:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800188a:	23c0      	movs	r3, #192	; 0xc0
 800188c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800188e:	2302      	movs	r3, #2
 8001890:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001892:	2300      	movs	r3, #0
 8001894:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001896:	2300      	movs	r3, #0
 8001898:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800189a:	2302      	movs	r3, #2
 800189c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800189e:	f107 0314 	add.w	r3, r7, #20
 80018a2:	4619      	mov	r1, r3
 80018a4:	4805      	ldr	r0, [pc, #20]	; (80018bc <HAL_TIM_Encoder_MspInit+0x8c>)
 80018a6:	f000 ffa3 	bl	80027f0 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80018aa:	bf00      	nop
 80018ac:	3728      	adds	r7, #40	; 0x28
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	40000400 	.word	0x40000400
 80018b8:	40023800 	.word	0x40023800
 80018bc:	40020000 	.word	0x40020000

080018c0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b084      	sub	sp, #16
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a23      	ldr	r2, [pc, #140]	; (800195c <HAL_TIM_PWM_MspInit+0x9c>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d13f      	bne.n	8001952 <HAL_TIM_PWM_MspInit+0x92>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80018d2:	2300      	movs	r3, #0
 80018d4:	60fb      	str	r3, [r7, #12]
 80018d6:	4b22      	ldr	r3, [pc, #136]	; (8001960 <HAL_TIM_PWM_MspInit+0xa0>)
 80018d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018da:	4a21      	ldr	r2, [pc, #132]	; (8001960 <HAL_TIM_PWM_MspInit+0xa0>)
 80018dc:	f043 0304 	orr.w	r3, r3, #4
 80018e0:	6413      	str	r3, [r2, #64]	; 0x40
 80018e2:	4b1f      	ldr	r3, [pc, #124]	; (8001960 <HAL_TIM_PWM_MspInit+0xa0>)
 80018e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e6:	f003 0304 	and.w	r3, r3, #4
 80018ea:	60fb      	str	r3, [r7, #12]
 80018ec:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 DMA Init */
    /* TIM4_CH1 Init */
    hdma_tim4_ch1.Instance = DMA1_Stream0;
 80018ee:	4b1d      	ldr	r3, [pc, #116]	; (8001964 <HAL_TIM_PWM_MspInit+0xa4>)
 80018f0:	4a1d      	ldr	r2, [pc, #116]	; (8001968 <HAL_TIM_PWM_MspInit+0xa8>)
 80018f2:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch1.Init.Channel = DMA_CHANNEL_2;
 80018f4:	4b1b      	ldr	r3, [pc, #108]	; (8001964 <HAL_TIM_PWM_MspInit+0xa4>)
 80018f6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80018fa:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80018fc:	4b19      	ldr	r3, [pc, #100]	; (8001964 <HAL_TIM_PWM_MspInit+0xa4>)
 80018fe:	2240      	movs	r2, #64	; 0x40
 8001900:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001902:	4b18      	ldr	r3, [pc, #96]	; (8001964 <HAL_TIM_PWM_MspInit+0xa4>)
 8001904:	2200      	movs	r2, #0
 8001906:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001908:	4b16      	ldr	r3, [pc, #88]	; (8001964 <HAL_TIM_PWM_MspInit+0xa4>)
 800190a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800190e:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001910:	4b14      	ldr	r3, [pc, #80]	; (8001964 <HAL_TIM_PWM_MspInit+0xa4>)
 8001912:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001916:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001918:	4b12      	ldr	r3, [pc, #72]	; (8001964 <HAL_TIM_PWM_MspInit+0xa4>)
 800191a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800191e:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch1.Init.Mode = DMA_CIRCULAR;
 8001920:	4b10      	ldr	r3, [pc, #64]	; (8001964 <HAL_TIM_PWM_MspInit+0xa4>)
 8001922:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001926:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8001928:	4b0e      	ldr	r3, [pc, #56]	; (8001964 <HAL_TIM_PWM_MspInit+0xa4>)
 800192a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800192e:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001930:	4b0c      	ldr	r3, [pc, #48]	; (8001964 <HAL_TIM_PWM_MspInit+0xa4>)
 8001932:	2200      	movs	r2, #0
 8001934:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch1) != HAL_OK)
 8001936:	480b      	ldr	r0, [pc, #44]	; (8001964 <HAL_TIM_PWM_MspInit+0xa4>)
 8001938:	f000 fb58 	bl	8001fec <HAL_DMA_Init>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d001      	beq.n	8001946 <HAL_TIM_PWM_MspInit+0x86>
    {
      Error_Handler();
 8001942:	f7ff fdcb 	bl	80014dc <Error_Handler>
    }

    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC1],hdma_tim4_ch1);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	4a06      	ldr	r2, [pc, #24]	; (8001964 <HAL_TIM_PWM_MspInit+0xa4>)
 800194a:	625a      	str	r2, [r3, #36]	; 0x24
 800194c:	4a05      	ldr	r2, [pc, #20]	; (8001964 <HAL_TIM_PWM_MspInit+0xa4>)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001952:	bf00      	nop
 8001954:	3710      	adds	r7, #16
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	40000800 	.word	0x40000800
 8001960:	40023800 	.word	0x40023800
 8001964:	200009f4 	.word	0x200009f4
 8001968:	40026010 	.word	0x40026010

0800196c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b084      	sub	sp, #16
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a0e      	ldr	r2, [pc, #56]	; (80019b4 <HAL_TIM_Base_MspInit+0x48>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d115      	bne.n	80019aa <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800197e:	2300      	movs	r3, #0
 8001980:	60fb      	str	r3, [r7, #12]
 8001982:	4b0d      	ldr	r3, [pc, #52]	; (80019b8 <HAL_TIM_Base_MspInit+0x4c>)
 8001984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001986:	4a0c      	ldr	r2, [pc, #48]	; (80019b8 <HAL_TIM_Base_MspInit+0x4c>)
 8001988:	f043 0310 	orr.w	r3, r3, #16
 800198c:	6413      	str	r3, [r2, #64]	; 0x40
 800198e:	4b0a      	ldr	r3, [pc, #40]	; (80019b8 <HAL_TIM_Base_MspInit+0x4c>)
 8001990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001992:	f003 0310 	and.w	r3, r3, #16
 8001996:	60fb      	str	r3, [r7, #12]
 8001998:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800199a:	2200      	movs	r2, #0
 800199c:	2100      	movs	r1, #0
 800199e:	2036      	movs	r0, #54	; 0x36
 80019a0:	f000 faed 	bl	8001f7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80019a4:	2036      	movs	r0, #54	; 0x36
 80019a6:	f000 fb06 	bl	8001fb6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 80019aa:	bf00      	nop
 80019ac:	3710      	adds	r7, #16
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	40001000 	.word	0x40001000
 80019b8:	40023800 	.word	0x40023800

080019bc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b088      	sub	sp, #32
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019c4:	f107 030c 	add.w	r3, r7, #12
 80019c8:	2200      	movs	r2, #0
 80019ca:	601a      	str	r2, [r3, #0]
 80019cc:	605a      	str	r2, [r3, #4]
 80019ce:	609a      	str	r2, [r3, #8]
 80019d0:	60da      	str	r2, [r3, #12]
 80019d2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a12      	ldr	r2, [pc, #72]	; (8001a24 <HAL_TIM_MspPostInit+0x68>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d11d      	bne.n	8001a1a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019de:	2300      	movs	r3, #0
 80019e0:	60bb      	str	r3, [r7, #8]
 80019e2:	4b11      	ldr	r3, [pc, #68]	; (8001a28 <HAL_TIM_MspPostInit+0x6c>)
 80019e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e6:	4a10      	ldr	r2, [pc, #64]	; (8001a28 <HAL_TIM_MspPostInit+0x6c>)
 80019e8:	f043 0302 	orr.w	r3, r3, #2
 80019ec:	6313      	str	r3, [r2, #48]	; 0x30
 80019ee:	4b0e      	ldr	r3, [pc, #56]	; (8001a28 <HAL_TIM_MspPostInit+0x6c>)
 80019f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f2:	f003 0302 	and.w	r3, r3, #2
 80019f6:	60bb      	str	r3, [r7, #8]
 80019f8:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80019fa:	2340      	movs	r3, #64	; 0x40
 80019fc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019fe:	2302      	movs	r3, #2
 8001a00:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a02:	2300      	movs	r3, #0
 8001a04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a06:	2300      	movs	r3, #0
 8001a08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001a0a:	2302      	movs	r3, #2
 8001a0c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a0e:	f107 030c 	add.w	r3, r7, #12
 8001a12:	4619      	mov	r1, r3
 8001a14:	4805      	ldr	r0, [pc, #20]	; (8001a2c <HAL_TIM_MspPostInit+0x70>)
 8001a16:	f000 feeb 	bl	80027f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001a1a:	bf00      	nop
 8001a1c:	3720      	adds	r7, #32
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	40000800 	.word	0x40000800
 8001a28:	40023800 	.word	0x40023800
 8001a2c:	40020400 	.word	0x40020400

08001a30 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a34:	4b11      	ldr	r3, [pc, #68]	; (8001a7c <MX_USART1_UART_Init+0x4c>)
 8001a36:	4a12      	ldr	r2, [pc, #72]	; (8001a80 <MX_USART1_UART_Init+0x50>)
 8001a38:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001a3a:	4b10      	ldr	r3, [pc, #64]	; (8001a7c <MX_USART1_UART_Init+0x4c>)
 8001a3c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001a40:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a42:	4b0e      	ldr	r3, [pc, #56]	; (8001a7c <MX_USART1_UART_Init+0x4c>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a48:	4b0c      	ldr	r3, [pc, #48]	; (8001a7c <MX_USART1_UART_Init+0x4c>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a4e:	4b0b      	ldr	r3, [pc, #44]	; (8001a7c <MX_USART1_UART_Init+0x4c>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a54:	4b09      	ldr	r3, [pc, #36]	; (8001a7c <MX_USART1_UART_Init+0x4c>)
 8001a56:	220c      	movs	r2, #12
 8001a58:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a5a:	4b08      	ldr	r3, [pc, #32]	; (8001a7c <MX_USART1_UART_Init+0x4c>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a60:	4b06      	ldr	r3, [pc, #24]	; (8001a7c <MX_USART1_UART_Init+0x4c>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a66:	4805      	ldr	r0, [pc, #20]	; (8001a7c <MX_USART1_UART_Init+0x4c>)
 8001a68:	f003 fed6 	bl	8005818 <HAL_UART_Init>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d001      	beq.n	8001a76 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001a72:	f7ff fd33 	bl	80014dc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001a76:	bf00      	nop
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	20000a54 	.word	0x20000a54
 8001a80:	40011000 	.word	0x40011000

08001a84 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a88:	4b11      	ldr	r3, [pc, #68]	; (8001ad0 <MX_USART2_UART_Init+0x4c>)
 8001a8a:	4a12      	ldr	r2, [pc, #72]	; (8001ad4 <MX_USART2_UART_Init+0x50>)
 8001a8c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001a8e:	4b10      	ldr	r3, [pc, #64]	; (8001ad0 <MX_USART2_UART_Init+0x4c>)
 8001a90:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001a94:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a96:	4b0e      	ldr	r3, [pc, #56]	; (8001ad0 <MX_USART2_UART_Init+0x4c>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a9c:	4b0c      	ldr	r3, [pc, #48]	; (8001ad0 <MX_USART2_UART_Init+0x4c>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001aa2:	4b0b      	ldr	r3, [pc, #44]	; (8001ad0 <MX_USART2_UART_Init+0x4c>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001aa8:	4b09      	ldr	r3, [pc, #36]	; (8001ad0 <MX_USART2_UART_Init+0x4c>)
 8001aaa:	220c      	movs	r2, #12
 8001aac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001aae:	4b08      	ldr	r3, [pc, #32]	; (8001ad0 <MX_USART2_UART_Init+0x4c>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ab4:	4b06      	ldr	r3, [pc, #24]	; (8001ad0 <MX_USART2_UART_Init+0x4c>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001aba:	4805      	ldr	r0, [pc, #20]	; (8001ad0 <MX_USART2_UART_Init+0x4c>)
 8001abc:	f003 feac 	bl	8005818 <HAL_UART_Init>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d001      	beq.n	8001aca <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001ac6:	f7ff fd09 	bl	80014dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001aca:	bf00      	nop
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	20000a98 	.word	0x20000a98
 8001ad4:	40004400 	.word	0x40004400

08001ad8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b08c      	sub	sp, #48	; 0x30
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae0:	f107 031c 	add.w	r3, r7, #28
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	601a      	str	r2, [r3, #0]
 8001ae8:	605a      	str	r2, [r3, #4]
 8001aea:	609a      	str	r2, [r3, #8]
 8001aec:	60da      	str	r2, [r3, #12]
 8001aee:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a4e      	ldr	r2, [pc, #312]	; (8001c30 <HAL_UART_MspInit+0x158>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d164      	bne.n	8001bc4 <HAL_UART_MspInit+0xec>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001afa:	2300      	movs	r3, #0
 8001afc:	61bb      	str	r3, [r7, #24]
 8001afe:	4b4d      	ldr	r3, [pc, #308]	; (8001c34 <HAL_UART_MspInit+0x15c>)
 8001b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b02:	4a4c      	ldr	r2, [pc, #304]	; (8001c34 <HAL_UART_MspInit+0x15c>)
 8001b04:	f043 0310 	orr.w	r3, r3, #16
 8001b08:	6453      	str	r3, [r2, #68]	; 0x44
 8001b0a:	4b4a      	ldr	r3, [pc, #296]	; (8001c34 <HAL_UART_MspInit+0x15c>)
 8001b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b0e:	f003 0310 	and.w	r3, r3, #16
 8001b12:	61bb      	str	r3, [r7, #24]
 8001b14:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b16:	2300      	movs	r3, #0
 8001b18:	617b      	str	r3, [r7, #20]
 8001b1a:	4b46      	ldr	r3, [pc, #280]	; (8001c34 <HAL_UART_MspInit+0x15c>)
 8001b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1e:	4a45      	ldr	r2, [pc, #276]	; (8001c34 <HAL_UART_MspInit+0x15c>)
 8001b20:	f043 0301 	orr.w	r3, r3, #1
 8001b24:	6313      	str	r3, [r2, #48]	; 0x30
 8001b26:	4b43      	ldr	r3, [pc, #268]	; (8001c34 <HAL_UART_MspInit+0x15c>)
 8001b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2a:	f003 0301 	and.w	r3, r3, #1
 8001b2e:	617b      	str	r3, [r7, #20]
 8001b30:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001b32:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001b36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b38:	2302      	movs	r3, #2
 8001b3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b40:	2303      	movs	r3, #3
 8001b42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b44:	2307      	movs	r3, #7
 8001b46:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b48:	f107 031c 	add.w	r3, r7, #28
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	483a      	ldr	r0, [pc, #232]	; (8001c38 <HAL_UART_MspInit+0x160>)
 8001b50:	f000 fe4e 	bl	80027f0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001b54:	4b39      	ldr	r3, [pc, #228]	; (8001c3c <HAL_UART_MspInit+0x164>)
 8001b56:	4a3a      	ldr	r2, [pc, #232]	; (8001c40 <HAL_UART_MspInit+0x168>)
 8001b58:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001b5a:	4b38      	ldr	r3, [pc, #224]	; (8001c3c <HAL_UART_MspInit+0x164>)
 8001b5c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b60:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b62:	4b36      	ldr	r3, [pc, #216]	; (8001c3c <HAL_UART_MspInit+0x164>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b68:	4b34      	ldr	r3, [pc, #208]	; (8001c3c <HAL_UART_MspInit+0x164>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001b6e:	4b33      	ldr	r3, [pc, #204]	; (8001c3c <HAL_UART_MspInit+0x164>)
 8001b70:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b74:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b76:	4b31      	ldr	r3, [pc, #196]	; (8001c3c <HAL_UART_MspInit+0x164>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b7c:	4b2f      	ldr	r3, [pc, #188]	; (8001c3c <HAL_UART_MspInit+0x164>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001b82:	4b2e      	ldr	r3, [pc, #184]	; (8001c3c <HAL_UART_MspInit+0x164>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001b88:	4b2c      	ldr	r3, [pc, #176]	; (8001c3c <HAL_UART_MspInit+0x164>)
 8001b8a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001b8e:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b90:	4b2a      	ldr	r3, [pc, #168]	; (8001c3c <HAL_UART_MspInit+0x164>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001b96:	4829      	ldr	r0, [pc, #164]	; (8001c3c <HAL_UART_MspInit+0x164>)
 8001b98:	f000 fa28 	bl	8001fec <HAL_DMA_Init>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d001      	beq.n	8001ba6 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8001ba2:	f7ff fc9b 	bl	80014dc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4a24      	ldr	r2, [pc, #144]	; (8001c3c <HAL_UART_MspInit+0x164>)
 8001baa:	639a      	str	r2, [r3, #56]	; 0x38
 8001bac:	4a23      	ldr	r2, [pc, #140]	; (8001c3c <HAL_UART_MspInit+0x164>)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	2100      	movs	r1, #0
 8001bb6:	2025      	movs	r0, #37	; 0x25
 8001bb8:	f000 f9e1 	bl	8001f7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001bbc:	2025      	movs	r0, #37	; 0x25
 8001bbe:	f000 f9fa 	bl	8001fb6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001bc2:	e030      	b.n	8001c26 <HAL_UART_MspInit+0x14e>
  else if(uartHandle->Instance==USART2)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a1e      	ldr	r2, [pc, #120]	; (8001c44 <HAL_UART_MspInit+0x16c>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d12b      	bne.n	8001c26 <HAL_UART_MspInit+0x14e>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001bce:	2300      	movs	r3, #0
 8001bd0:	613b      	str	r3, [r7, #16]
 8001bd2:	4b18      	ldr	r3, [pc, #96]	; (8001c34 <HAL_UART_MspInit+0x15c>)
 8001bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd6:	4a17      	ldr	r2, [pc, #92]	; (8001c34 <HAL_UART_MspInit+0x15c>)
 8001bd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bdc:	6413      	str	r3, [r2, #64]	; 0x40
 8001bde:	4b15      	ldr	r3, [pc, #84]	; (8001c34 <HAL_UART_MspInit+0x15c>)
 8001be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001be6:	613b      	str	r3, [r7, #16]
 8001be8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bea:	2300      	movs	r3, #0
 8001bec:	60fb      	str	r3, [r7, #12]
 8001bee:	4b11      	ldr	r3, [pc, #68]	; (8001c34 <HAL_UART_MspInit+0x15c>)
 8001bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf2:	4a10      	ldr	r2, [pc, #64]	; (8001c34 <HAL_UART_MspInit+0x15c>)
 8001bf4:	f043 0301 	orr.w	r3, r3, #1
 8001bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bfa:	4b0e      	ldr	r3, [pc, #56]	; (8001c34 <HAL_UART_MspInit+0x15c>)
 8001bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfe:	f003 0301 	and.w	r3, r3, #1
 8001c02:	60fb      	str	r3, [r7, #12]
 8001c04:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001c06:	230c      	movs	r3, #12
 8001c08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c0a:	2302      	movs	r3, #2
 8001c0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c12:	2303      	movs	r3, #3
 8001c14:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c16:	2307      	movs	r3, #7
 8001c18:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c1a:	f107 031c 	add.w	r3, r7, #28
 8001c1e:	4619      	mov	r1, r3
 8001c20:	4805      	ldr	r0, [pc, #20]	; (8001c38 <HAL_UART_MspInit+0x160>)
 8001c22:	f000 fde5 	bl	80027f0 <HAL_GPIO_Init>
}
 8001c26:	bf00      	nop
 8001c28:	3730      	adds	r7, #48	; 0x30
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	40011000 	.word	0x40011000
 8001c34:	40023800 	.word	0x40023800
 8001c38:	40020000 	.word	0x40020000
 8001c3c:	20000adc 	.word	0x20000adc
 8001c40:	40026440 	.word	0x40026440
 8001c44:	40004400 	.word	0x40004400

08001c48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001c48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c80 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c4c:	480d      	ldr	r0, [pc, #52]	; (8001c84 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001c4e:	490e      	ldr	r1, [pc, #56]	; (8001c88 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001c50:	4a0e      	ldr	r2, [pc, #56]	; (8001c8c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c54:	e002      	b.n	8001c5c <LoopCopyDataInit>

08001c56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c5a:	3304      	adds	r3, #4

08001c5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c60:	d3f9      	bcc.n	8001c56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c62:	4a0b      	ldr	r2, [pc, #44]	; (8001c90 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001c64:	4c0b      	ldr	r4, [pc, #44]	; (8001c94 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001c66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c68:	e001      	b.n	8001c6e <LoopFillZerobss>

08001c6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c6c:	3204      	adds	r2, #4

08001c6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c70:	d3fb      	bcc.n	8001c6a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001c72:	f7ff fce9 	bl	8001648 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c76:	f004 ff09 	bl	8006a8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c7a:	f7ff fb4f 	bl	800131c <main>
  bx  lr    
 8001c7e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001c80:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c88:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8001c8c:	080089bc 	.word	0x080089bc
  ldr r2, =_sbss
 8001c90:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8001c94:	20000b50 	.word	0x20000b50

08001c98 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c98:	e7fe      	b.n	8001c98 <ADC_IRQHandler>
	...

08001c9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ca0:	4b0e      	ldr	r3, [pc, #56]	; (8001cdc <HAL_Init+0x40>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a0d      	ldr	r2, [pc, #52]	; (8001cdc <HAL_Init+0x40>)
 8001ca6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001caa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001cac:	4b0b      	ldr	r3, [pc, #44]	; (8001cdc <HAL_Init+0x40>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a0a      	ldr	r2, [pc, #40]	; (8001cdc <HAL_Init+0x40>)
 8001cb2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001cb6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cb8:	4b08      	ldr	r3, [pc, #32]	; (8001cdc <HAL_Init+0x40>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a07      	ldr	r2, [pc, #28]	; (8001cdc <HAL_Init+0x40>)
 8001cbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cc2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cc4:	2003      	movs	r0, #3
 8001cc6:	f000 f94f 	bl	8001f68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cca:	2000      	movs	r0, #0
 8001ccc:	f000 f808 	bl	8001ce0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cd0:	f7ff fc0a 	bl	80014e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cd4:	2300      	movs	r3, #0
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	40023c00 	.word	0x40023c00

08001ce0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ce8:	4b12      	ldr	r3, [pc, #72]	; (8001d34 <HAL_InitTick+0x54>)
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	4b12      	ldr	r3, [pc, #72]	; (8001d38 <HAL_InitTick+0x58>)
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cf6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f000 f967 	bl	8001fd2 <HAL_SYSTICK_Config>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d001      	beq.n	8001d0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e00e      	b.n	8001d2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2b0f      	cmp	r3, #15
 8001d12:	d80a      	bhi.n	8001d2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d14:	2200      	movs	r2, #0
 8001d16:	6879      	ldr	r1, [r7, #4]
 8001d18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d1c:	f000 f92f 	bl	8001f7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d20:	4a06      	ldr	r2, [pc, #24]	; (8001d3c <HAL_InitTick+0x5c>)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d26:	2300      	movs	r3, #0
 8001d28:	e000      	b.n	8001d2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	3708      	adds	r7, #8
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	20000014 	.word	0x20000014
 8001d38:	2000001c 	.word	0x2000001c
 8001d3c:	20000018 	.word	0x20000018

08001d40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d44:	4b06      	ldr	r3, [pc, #24]	; (8001d60 <HAL_IncTick+0x20>)
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	461a      	mov	r2, r3
 8001d4a:	4b06      	ldr	r3, [pc, #24]	; (8001d64 <HAL_IncTick+0x24>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4413      	add	r3, r2
 8001d50:	4a04      	ldr	r2, [pc, #16]	; (8001d64 <HAL_IncTick+0x24>)
 8001d52:	6013      	str	r3, [r2, #0]
}
 8001d54:	bf00      	nop
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr
 8001d5e:	bf00      	nop
 8001d60:	2000001c 	.word	0x2000001c
 8001d64:	20000b3c 	.word	0x20000b3c

08001d68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0
  return uwTick;
 8001d6c:	4b03      	ldr	r3, [pc, #12]	; (8001d7c <HAL_GetTick+0x14>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	20000b3c 	.word	0x20000b3c

08001d80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b084      	sub	sp, #16
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d88:	f7ff ffee 	bl	8001d68 <HAL_GetTick>
 8001d8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001d98:	d005      	beq.n	8001da6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d9a:	4b0a      	ldr	r3, [pc, #40]	; (8001dc4 <HAL_Delay+0x44>)
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	461a      	mov	r2, r3
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	4413      	add	r3, r2
 8001da4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001da6:	bf00      	nop
 8001da8:	f7ff ffde 	bl	8001d68 <HAL_GetTick>
 8001dac:	4602      	mov	r2, r0
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	68fa      	ldr	r2, [r7, #12]
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d8f7      	bhi.n	8001da8 <HAL_Delay+0x28>
  {
  }
}
 8001db8:	bf00      	nop
 8001dba:	bf00      	nop
 8001dbc:	3710      	adds	r7, #16
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	2000001c 	.word	0x2000001c

08001dc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b085      	sub	sp, #20
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	f003 0307 	and.w	r3, r3, #7
 8001dd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dd8:	4b0c      	ldr	r3, [pc, #48]	; (8001e0c <__NVIC_SetPriorityGrouping+0x44>)
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dde:	68ba      	ldr	r2, [r7, #8]
 8001de0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001de4:	4013      	ands	r3, r2
 8001de6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001df0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001df4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001df8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dfa:	4a04      	ldr	r2, [pc, #16]	; (8001e0c <__NVIC_SetPriorityGrouping+0x44>)
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	60d3      	str	r3, [r2, #12]
}
 8001e00:	bf00      	nop
 8001e02:	3714      	adds	r7, #20
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr
 8001e0c:	e000ed00 	.word	0xe000ed00

08001e10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e14:	4b04      	ldr	r3, [pc, #16]	; (8001e28 <__NVIC_GetPriorityGrouping+0x18>)
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	0a1b      	lsrs	r3, r3, #8
 8001e1a:	f003 0307 	and.w	r3, r3, #7
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr
 8001e28:	e000ed00 	.word	0xe000ed00

08001e2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	4603      	mov	r3, r0
 8001e34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	db0b      	blt.n	8001e56 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e3e:	79fb      	ldrb	r3, [r7, #7]
 8001e40:	f003 021f 	and.w	r2, r3, #31
 8001e44:	4907      	ldr	r1, [pc, #28]	; (8001e64 <__NVIC_EnableIRQ+0x38>)
 8001e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e4a:	095b      	lsrs	r3, r3, #5
 8001e4c:	2001      	movs	r0, #1
 8001e4e:	fa00 f202 	lsl.w	r2, r0, r2
 8001e52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e56:	bf00      	nop
 8001e58:	370c      	adds	r7, #12
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr
 8001e62:	bf00      	nop
 8001e64:	e000e100 	.word	0xe000e100

08001e68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	4603      	mov	r3, r0
 8001e70:	6039      	str	r1, [r7, #0]
 8001e72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	db0a      	blt.n	8001e92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	b2da      	uxtb	r2, r3
 8001e80:	490c      	ldr	r1, [pc, #48]	; (8001eb4 <__NVIC_SetPriority+0x4c>)
 8001e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e86:	0112      	lsls	r2, r2, #4
 8001e88:	b2d2      	uxtb	r2, r2
 8001e8a:	440b      	add	r3, r1
 8001e8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e90:	e00a      	b.n	8001ea8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	b2da      	uxtb	r2, r3
 8001e96:	4908      	ldr	r1, [pc, #32]	; (8001eb8 <__NVIC_SetPriority+0x50>)
 8001e98:	79fb      	ldrb	r3, [r7, #7]
 8001e9a:	f003 030f 	and.w	r3, r3, #15
 8001e9e:	3b04      	subs	r3, #4
 8001ea0:	0112      	lsls	r2, r2, #4
 8001ea2:	b2d2      	uxtb	r2, r2
 8001ea4:	440b      	add	r3, r1
 8001ea6:	761a      	strb	r2, [r3, #24]
}
 8001ea8:	bf00      	nop
 8001eaa:	370c      	adds	r7, #12
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr
 8001eb4:	e000e100 	.word	0xe000e100
 8001eb8:	e000ed00 	.word	0xe000ed00

08001ebc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b089      	sub	sp, #36	; 0x24
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	60f8      	str	r0, [r7, #12]
 8001ec4:	60b9      	str	r1, [r7, #8]
 8001ec6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	f003 0307 	and.w	r3, r3, #7
 8001ece:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ed0:	69fb      	ldr	r3, [r7, #28]
 8001ed2:	f1c3 0307 	rsb	r3, r3, #7
 8001ed6:	2b04      	cmp	r3, #4
 8001ed8:	bf28      	it	cs
 8001eda:	2304      	movcs	r3, #4
 8001edc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	3304      	adds	r3, #4
 8001ee2:	2b06      	cmp	r3, #6
 8001ee4:	d902      	bls.n	8001eec <NVIC_EncodePriority+0x30>
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	3b03      	subs	r3, #3
 8001eea:	e000      	b.n	8001eee <NVIC_EncodePriority+0x32>
 8001eec:	2300      	movs	r3, #0
 8001eee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ef0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ef4:	69bb      	ldr	r3, [r7, #24]
 8001ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8001efa:	43da      	mvns	r2, r3
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	401a      	ands	r2, r3
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f04:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f0e:	43d9      	mvns	r1, r3
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f14:	4313      	orrs	r3, r2
         );
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3724      	adds	r7, #36	; 0x24
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr
	...

08001f24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	3b01      	subs	r3, #1
 8001f30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f34:	d301      	bcc.n	8001f3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f36:	2301      	movs	r3, #1
 8001f38:	e00f      	b.n	8001f5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f3a:	4a0a      	ldr	r2, [pc, #40]	; (8001f64 <SysTick_Config+0x40>)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	3b01      	subs	r3, #1
 8001f40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f42:	210f      	movs	r1, #15
 8001f44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f48:	f7ff ff8e 	bl	8001e68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f4c:	4b05      	ldr	r3, [pc, #20]	; (8001f64 <SysTick_Config+0x40>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f52:	4b04      	ldr	r3, [pc, #16]	; (8001f64 <SysTick_Config+0x40>)
 8001f54:	2207      	movs	r2, #7
 8001f56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f58:	2300      	movs	r3, #0
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3708      	adds	r7, #8
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	e000e010 	.word	0xe000e010

08001f68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b082      	sub	sp, #8
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f70:	6878      	ldr	r0, [r7, #4]
 8001f72:	f7ff ff29 	bl	8001dc8 <__NVIC_SetPriorityGrouping>
}
 8001f76:	bf00      	nop
 8001f78:	3708      	adds	r7, #8
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}

08001f7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f7e:	b580      	push	{r7, lr}
 8001f80:	b086      	sub	sp, #24
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	4603      	mov	r3, r0
 8001f86:	60b9      	str	r1, [r7, #8]
 8001f88:	607a      	str	r2, [r7, #4]
 8001f8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f90:	f7ff ff3e 	bl	8001e10 <__NVIC_GetPriorityGrouping>
 8001f94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f96:	687a      	ldr	r2, [r7, #4]
 8001f98:	68b9      	ldr	r1, [r7, #8]
 8001f9a:	6978      	ldr	r0, [r7, #20]
 8001f9c:	f7ff ff8e 	bl	8001ebc <NVIC_EncodePriority>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fa6:	4611      	mov	r1, r2
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f7ff ff5d 	bl	8001e68 <__NVIC_SetPriority>
}
 8001fae:	bf00      	nop
 8001fb0:	3718      	adds	r7, #24
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}

08001fb6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fb6:	b580      	push	{r7, lr}
 8001fb8:	b082      	sub	sp, #8
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f7ff ff31 	bl	8001e2c <__NVIC_EnableIRQ>
}
 8001fca:	bf00      	nop
 8001fcc:	3708      	adds	r7, #8
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}

08001fd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fd2:	b580      	push	{r7, lr}
 8001fd4:	b082      	sub	sp, #8
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f7ff ffa2 	bl	8001f24 <SysTick_Config>
 8001fe0:	4603      	mov	r3, r0
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3708      	adds	r7, #8
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
	...

08001fec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b086      	sub	sp, #24
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001ff8:	f7ff feb6 	bl	8001d68 <HAL_GetTick>
 8001ffc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d101      	bne.n	8002008 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	e099      	b.n	800213c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2202      	movs	r2, #2
 800200c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2200      	movs	r2, #0
 8002014:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f022 0201 	bic.w	r2, r2, #1
 8002026:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002028:	e00f      	b.n	800204a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800202a:	f7ff fe9d 	bl	8001d68 <HAL_GetTick>
 800202e:	4602      	mov	r2, r0
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	1ad3      	subs	r3, r2, r3
 8002034:	2b05      	cmp	r3, #5
 8002036:	d908      	bls.n	800204a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2220      	movs	r2, #32
 800203c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2203      	movs	r2, #3
 8002042:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002046:	2303      	movs	r3, #3
 8002048:	e078      	b.n	800213c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f003 0301 	and.w	r3, r3, #1
 8002054:	2b00      	cmp	r3, #0
 8002056:	d1e8      	bne.n	800202a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002060:	697a      	ldr	r2, [r7, #20]
 8002062:	4b38      	ldr	r3, [pc, #224]	; (8002144 <HAL_DMA_Init+0x158>)
 8002064:	4013      	ands	r3, r2
 8002066:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	685a      	ldr	r2, [r3, #4]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002076:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	691b      	ldr	r3, [r3, #16]
 800207c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002082:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	699b      	ldr	r3, [r3, #24]
 8002088:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800208e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6a1b      	ldr	r3, [r3, #32]
 8002094:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002096:	697a      	ldr	r2, [r7, #20]
 8002098:	4313      	orrs	r3, r2
 800209a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a0:	2b04      	cmp	r3, #4
 80020a2:	d107      	bne.n	80020b4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ac:	4313      	orrs	r3, r2
 80020ae:	697a      	ldr	r2, [r7, #20]
 80020b0:	4313      	orrs	r3, r2
 80020b2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	697a      	ldr	r2, [r7, #20]
 80020ba:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	695b      	ldr	r3, [r3, #20]
 80020c2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	f023 0307 	bic.w	r3, r3, #7
 80020ca:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d0:	697a      	ldr	r2, [r7, #20]
 80020d2:	4313      	orrs	r3, r2
 80020d4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020da:	2b04      	cmp	r3, #4
 80020dc:	d117      	bne.n	800210e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020e2:	697a      	ldr	r2, [r7, #20]
 80020e4:	4313      	orrs	r3, r2
 80020e6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d00e      	beq.n	800210e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	f000 fb01 	bl	80026f8 <DMA_CheckFifoParam>
 80020f6:	4603      	mov	r3, r0
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d008      	beq.n	800210e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2240      	movs	r2, #64	; 0x40
 8002100:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2201      	movs	r2, #1
 8002106:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800210a:	2301      	movs	r3, #1
 800210c:	e016      	b.n	800213c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	697a      	ldr	r2, [r7, #20]
 8002114:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	f000 fab8 	bl	800268c <DMA_CalcBaseAndBitshift>
 800211c:	4603      	mov	r3, r0
 800211e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002124:	223f      	movs	r2, #63	; 0x3f
 8002126:	409a      	lsls	r2, r3
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2200      	movs	r2, #0
 8002130:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2201      	movs	r2, #1
 8002136:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800213a:	2300      	movs	r3, #0
}
 800213c:	4618      	mov	r0, r3
 800213e:	3718      	adds	r7, #24
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}
 8002144:	f010803f 	.word	0xf010803f

08002148 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b086      	sub	sp, #24
 800214c:	af00      	add	r7, sp, #0
 800214e:	60f8      	str	r0, [r7, #12]
 8002150:	60b9      	str	r1, [r7, #8]
 8002152:	607a      	str	r2, [r7, #4]
 8002154:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002156:	2300      	movs	r3, #0
 8002158:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800215e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002166:	2b01      	cmp	r3, #1
 8002168:	d101      	bne.n	800216e <HAL_DMA_Start_IT+0x26>
 800216a:	2302      	movs	r3, #2
 800216c:	e040      	b.n	80021f0 <HAL_DMA_Start_IT+0xa8>
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	2201      	movs	r2, #1
 8002172:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800217c:	b2db      	uxtb	r3, r3
 800217e:	2b01      	cmp	r3, #1
 8002180:	d12f      	bne.n	80021e2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	2202      	movs	r2, #2
 8002186:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	2200      	movs	r2, #0
 800218e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	687a      	ldr	r2, [r7, #4]
 8002194:	68b9      	ldr	r1, [r7, #8]
 8002196:	68f8      	ldr	r0, [r7, #12]
 8002198:	f000 fa4a 	bl	8002630 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021a0:	223f      	movs	r2, #63	; 0x3f
 80021a2:	409a      	lsls	r2, r3
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f042 0216 	orr.w	r2, r2, #22
 80021b6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d007      	beq.n	80021d0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f042 0208 	orr.w	r2, r2, #8
 80021ce:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f042 0201 	orr.w	r2, r2, #1
 80021de:	601a      	str	r2, [r3, #0]
 80021e0:	e005      	b.n	80021ee <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	2200      	movs	r2, #0
 80021e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80021ea:	2302      	movs	r3, #2
 80021ec:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80021ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	3718      	adds	r7, #24
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}

080021f8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b084      	sub	sp, #16
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002204:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002206:	f7ff fdaf 	bl	8001d68 <HAL_GetTick>
 800220a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002212:	b2db      	uxtb	r3, r3
 8002214:	2b02      	cmp	r3, #2
 8002216:	d008      	beq.n	800222a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2280      	movs	r2, #128	; 0x80
 800221c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2200      	movs	r2, #0
 8002222:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e052      	b.n	80022d0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f022 0216 	bic.w	r2, r2, #22
 8002238:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	695a      	ldr	r2, [r3, #20]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002248:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224e:	2b00      	cmp	r3, #0
 8002250:	d103      	bne.n	800225a <HAL_DMA_Abort+0x62>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002256:	2b00      	cmp	r3, #0
 8002258:	d007      	beq.n	800226a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f022 0208 	bic.w	r2, r2, #8
 8002268:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f022 0201 	bic.w	r2, r2, #1
 8002278:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800227a:	e013      	b.n	80022a4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800227c:	f7ff fd74 	bl	8001d68 <HAL_GetTick>
 8002280:	4602      	mov	r2, r0
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	1ad3      	subs	r3, r2, r3
 8002286:	2b05      	cmp	r3, #5
 8002288:	d90c      	bls.n	80022a4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2220      	movs	r2, #32
 800228e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2203      	movs	r2, #3
 8002294:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2200      	movs	r2, #0
 800229c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80022a0:	2303      	movs	r3, #3
 80022a2:	e015      	b.n	80022d0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 0301 	and.w	r3, r3, #1
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d1e4      	bne.n	800227c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022b6:	223f      	movs	r2, #63	; 0x3f
 80022b8:	409a      	lsls	r2, r3
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2201      	movs	r2, #1
 80022c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2200      	movs	r2, #0
 80022ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80022ce:	2300      	movs	r3, #0
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	3710      	adds	r7, #16
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}

080022d8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022e6:	b2db      	uxtb	r3, r3
 80022e8:	2b02      	cmp	r3, #2
 80022ea:	d004      	beq.n	80022f6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2280      	movs	r2, #128	; 0x80
 80022f0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e00c      	b.n	8002310 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2205      	movs	r2, #5
 80022fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f022 0201 	bic.w	r2, r2, #1
 800230c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800230e:	2300      	movs	r3, #0
}
 8002310:	4618      	mov	r0, r3
 8002312:	370c      	adds	r7, #12
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr

0800231c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b086      	sub	sp, #24
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002324:	2300      	movs	r3, #0
 8002326:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002328:	4b8e      	ldr	r3, [pc, #568]	; (8002564 <HAL_DMA_IRQHandler+0x248>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a8e      	ldr	r2, [pc, #568]	; (8002568 <HAL_DMA_IRQHandler+0x24c>)
 800232e:	fba2 2303 	umull	r2, r3, r2, r3
 8002332:	0a9b      	lsrs	r3, r3, #10
 8002334:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800233a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002346:	2208      	movs	r2, #8
 8002348:	409a      	lsls	r2, r3
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	4013      	ands	r3, r2
 800234e:	2b00      	cmp	r3, #0
 8002350:	d01a      	beq.n	8002388 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 0304 	and.w	r3, r3, #4
 800235c:	2b00      	cmp	r3, #0
 800235e:	d013      	beq.n	8002388 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f022 0204 	bic.w	r2, r2, #4
 800236e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002374:	2208      	movs	r2, #8
 8002376:	409a      	lsls	r2, r3
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002380:	f043 0201 	orr.w	r2, r3, #1
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800238c:	2201      	movs	r2, #1
 800238e:	409a      	lsls	r2, r3
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	4013      	ands	r3, r2
 8002394:	2b00      	cmp	r3, #0
 8002396:	d012      	beq.n	80023be <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	695b      	ldr	r3, [r3, #20]
 800239e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d00b      	beq.n	80023be <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023aa:	2201      	movs	r2, #1
 80023ac:	409a      	lsls	r2, r3
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023b6:	f043 0202 	orr.w	r2, r3, #2
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023c2:	2204      	movs	r2, #4
 80023c4:	409a      	lsls	r2, r3
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	4013      	ands	r3, r2
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d012      	beq.n	80023f4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 0302 	and.w	r3, r3, #2
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d00b      	beq.n	80023f4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023e0:	2204      	movs	r2, #4
 80023e2:	409a      	lsls	r2, r3
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023ec:	f043 0204 	orr.w	r2, r3, #4
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023f8:	2210      	movs	r2, #16
 80023fa:	409a      	lsls	r2, r3
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	4013      	ands	r3, r2
 8002400:	2b00      	cmp	r3, #0
 8002402:	d043      	beq.n	800248c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0308 	and.w	r3, r3, #8
 800240e:	2b00      	cmp	r3, #0
 8002410:	d03c      	beq.n	800248c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002416:	2210      	movs	r2, #16
 8002418:	409a      	lsls	r2, r3
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002428:	2b00      	cmp	r3, #0
 800242a:	d018      	beq.n	800245e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d108      	bne.n	800244c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243e:	2b00      	cmp	r3, #0
 8002440:	d024      	beq.n	800248c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	4798      	blx	r3
 800244a:	e01f      	b.n	800248c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002450:	2b00      	cmp	r3, #0
 8002452:	d01b      	beq.n	800248c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	4798      	blx	r3
 800245c:	e016      	b.n	800248c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002468:	2b00      	cmp	r3, #0
 800246a:	d107      	bne.n	800247c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f022 0208 	bic.w	r2, r2, #8
 800247a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002480:	2b00      	cmp	r3, #0
 8002482:	d003      	beq.n	800248c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002488:	6878      	ldr	r0, [r7, #4]
 800248a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002490:	2220      	movs	r2, #32
 8002492:	409a      	lsls	r2, r3
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	4013      	ands	r3, r2
 8002498:	2b00      	cmp	r3, #0
 800249a:	f000 808f 	beq.w	80025bc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 0310 	and.w	r3, r3, #16
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	f000 8087 	beq.w	80025bc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024b2:	2220      	movs	r2, #32
 80024b4:	409a      	lsls	r2, r3
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	2b05      	cmp	r3, #5
 80024c4:	d136      	bne.n	8002534 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f022 0216 	bic.w	r2, r2, #22
 80024d4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	695a      	ldr	r2, [r3, #20]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80024e4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d103      	bne.n	80024f6 <HAL_DMA_IRQHandler+0x1da>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d007      	beq.n	8002506 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f022 0208 	bic.w	r2, r2, #8
 8002504:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800250a:	223f      	movs	r2, #63	; 0x3f
 800250c:	409a      	lsls	r2, r3
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2201      	movs	r2, #1
 8002516:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2200      	movs	r2, #0
 800251e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002526:	2b00      	cmp	r3, #0
 8002528:	d07e      	beq.n	8002628 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800252e:	6878      	ldr	r0, [r7, #4]
 8002530:	4798      	blx	r3
        }
        return;
 8002532:	e079      	b.n	8002628 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d01d      	beq.n	800257e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800254c:	2b00      	cmp	r3, #0
 800254e:	d10d      	bne.n	800256c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002554:	2b00      	cmp	r3, #0
 8002556:	d031      	beq.n	80025bc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800255c:	6878      	ldr	r0, [r7, #4]
 800255e:	4798      	blx	r3
 8002560:	e02c      	b.n	80025bc <HAL_DMA_IRQHandler+0x2a0>
 8002562:	bf00      	nop
 8002564:	20000014 	.word	0x20000014
 8002568:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002570:	2b00      	cmp	r3, #0
 8002572:	d023      	beq.n	80025bc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002578:	6878      	ldr	r0, [r7, #4]
 800257a:	4798      	blx	r3
 800257c:	e01e      	b.n	80025bc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002588:	2b00      	cmp	r3, #0
 800258a:	d10f      	bne.n	80025ac <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f022 0210 	bic.w	r2, r2, #16
 800259a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2201      	movs	r2, #1
 80025a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2200      	movs	r2, #0
 80025a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d003      	beq.n	80025bc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025b8:	6878      	ldr	r0, [r7, #4]
 80025ba:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d032      	beq.n	800262a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025c8:	f003 0301 	and.w	r3, r3, #1
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d022      	beq.n	8002616 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2205      	movs	r2, #5
 80025d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f022 0201 	bic.w	r2, r2, #1
 80025e6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	3301      	adds	r3, #1
 80025ec:	60bb      	str	r3, [r7, #8]
 80025ee:	697a      	ldr	r2, [r7, #20]
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d307      	bcc.n	8002604 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 0301 	and.w	r3, r3, #1
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d1f2      	bne.n	80025e8 <HAL_DMA_IRQHandler+0x2cc>
 8002602:	e000      	b.n	8002606 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002604:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2201      	movs	r2, #1
 800260a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2200      	movs	r2, #0
 8002612:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800261a:	2b00      	cmp	r3, #0
 800261c:	d005      	beq.n	800262a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	4798      	blx	r3
 8002626:	e000      	b.n	800262a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002628:	bf00      	nop
    }
  }
}
 800262a:	3718      	adds	r7, #24
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}

08002630 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002630:	b480      	push	{r7}
 8002632:	b085      	sub	sp, #20
 8002634:	af00      	add	r7, sp, #0
 8002636:	60f8      	str	r0, [r7, #12]
 8002638:	60b9      	str	r1, [r7, #8]
 800263a:	607a      	str	r2, [r7, #4]
 800263c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800264c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	683a      	ldr	r2, [r7, #0]
 8002654:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	2b40      	cmp	r3, #64	; 0x40
 800265c:	d108      	bne.n	8002670 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	687a      	ldr	r2, [r7, #4]
 8002664:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	68ba      	ldr	r2, [r7, #8]
 800266c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800266e:	e007      	b.n	8002680 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	68ba      	ldr	r2, [r7, #8]
 8002676:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	687a      	ldr	r2, [r7, #4]
 800267e:	60da      	str	r2, [r3, #12]
}
 8002680:	bf00      	nop
 8002682:	3714      	adds	r7, #20
 8002684:	46bd      	mov	sp, r7
 8002686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268a:	4770      	bx	lr

0800268c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800268c:	b480      	push	{r7}
 800268e:	b085      	sub	sp, #20
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	b2db      	uxtb	r3, r3
 800269a:	3b10      	subs	r3, #16
 800269c:	4a14      	ldr	r2, [pc, #80]	; (80026f0 <DMA_CalcBaseAndBitshift+0x64>)
 800269e:	fba2 2303 	umull	r2, r3, r2, r3
 80026a2:	091b      	lsrs	r3, r3, #4
 80026a4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80026a6:	4a13      	ldr	r2, [pc, #76]	; (80026f4 <DMA_CalcBaseAndBitshift+0x68>)
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	4413      	add	r3, r2
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	461a      	mov	r2, r3
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	2b03      	cmp	r3, #3
 80026b8:	d909      	bls.n	80026ce <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80026c2:	f023 0303 	bic.w	r3, r3, #3
 80026c6:	1d1a      	adds	r2, r3, #4
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	659a      	str	r2, [r3, #88]	; 0x58
 80026cc:	e007      	b.n	80026de <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80026d6:	f023 0303 	bic.w	r3, r3, #3
 80026da:	687a      	ldr	r2, [r7, #4]
 80026dc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3714      	adds	r7, #20
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr
 80026ee:	bf00      	nop
 80026f0:	aaaaaaab 	.word	0xaaaaaaab
 80026f4:	08008970 	.word	0x08008970

080026f8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b085      	sub	sp, #20
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002700:	2300      	movs	r3, #0
 8002702:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002708:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	699b      	ldr	r3, [r3, #24]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d11f      	bne.n	8002752 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	2b03      	cmp	r3, #3
 8002716:	d856      	bhi.n	80027c6 <DMA_CheckFifoParam+0xce>
 8002718:	a201      	add	r2, pc, #4	; (adr r2, 8002720 <DMA_CheckFifoParam+0x28>)
 800271a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800271e:	bf00      	nop
 8002720:	08002731 	.word	0x08002731
 8002724:	08002743 	.word	0x08002743
 8002728:	08002731 	.word	0x08002731
 800272c:	080027c7 	.word	0x080027c7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002734:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002738:	2b00      	cmp	r3, #0
 800273a:	d046      	beq.n	80027ca <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002740:	e043      	b.n	80027ca <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002746:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800274a:	d140      	bne.n	80027ce <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002750:	e03d      	b.n	80027ce <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	699b      	ldr	r3, [r3, #24]
 8002756:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800275a:	d121      	bne.n	80027a0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	2b03      	cmp	r3, #3
 8002760:	d837      	bhi.n	80027d2 <DMA_CheckFifoParam+0xda>
 8002762:	a201      	add	r2, pc, #4	; (adr r2, 8002768 <DMA_CheckFifoParam+0x70>)
 8002764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002768:	08002779 	.word	0x08002779
 800276c:	0800277f 	.word	0x0800277f
 8002770:	08002779 	.word	0x08002779
 8002774:	08002791 	.word	0x08002791
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	73fb      	strb	r3, [r7, #15]
      break;
 800277c:	e030      	b.n	80027e0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002782:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d025      	beq.n	80027d6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800278e:	e022      	b.n	80027d6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002794:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002798:	d11f      	bne.n	80027da <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800279e:	e01c      	b.n	80027da <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	2b02      	cmp	r3, #2
 80027a4:	d903      	bls.n	80027ae <DMA_CheckFifoParam+0xb6>
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	2b03      	cmp	r3, #3
 80027aa:	d003      	beq.n	80027b4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80027ac:	e018      	b.n	80027e0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	73fb      	strb	r3, [r7, #15]
      break;
 80027b2:	e015      	b.n	80027e0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d00e      	beq.n	80027de <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	73fb      	strb	r3, [r7, #15]
      break;
 80027c4:	e00b      	b.n	80027de <DMA_CheckFifoParam+0xe6>
      break;
 80027c6:	bf00      	nop
 80027c8:	e00a      	b.n	80027e0 <DMA_CheckFifoParam+0xe8>
      break;
 80027ca:	bf00      	nop
 80027cc:	e008      	b.n	80027e0 <DMA_CheckFifoParam+0xe8>
      break;
 80027ce:	bf00      	nop
 80027d0:	e006      	b.n	80027e0 <DMA_CheckFifoParam+0xe8>
      break;
 80027d2:	bf00      	nop
 80027d4:	e004      	b.n	80027e0 <DMA_CheckFifoParam+0xe8>
      break;
 80027d6:	bf00      	nop
 80027d8:	e002      	b.n	80027e0 <DMA_CheckFifoParam+0xe8>
      break;   
 80027da:	bf00      	nop
 80027dc:	e000      	b.n	80027e0 <DMA_CheckFifoParam+0xe8>
      break;
 80027de:	bf00      	nop
    }
  } 
  
  return status; 
 80027e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3714      	adds	r7, #20
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr
 80027ee:	bf00      	nop

080027f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b089      	sub	sp, #36	; 0x24
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80027fa:	2300      	movs	r3, #0
 80027fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80027fe:	2300      	movs	r3, #0
 8002800:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002802:	2300      	movs	r3, #0
 8002804:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002806:	2300      	movs	r3, #0
 8002808:	61fb      	str	r3, [r7, #28]
 800280a:	e165      	b.n	8002ad8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800280c:	2201      	movs	r2, #1
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	fa02 f303 	lsl.w	r3, r2, r3
 8002814:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	697a      	ldr	r2, [r7, #20]
 800281c:	4013      	ands	r3, r2
 800281e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002820:	693a      	ldr	r2, [r7, #16]
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	429a      	cmp	r2, r3
 8002826:	f040 8154 	bne.w	8002ad2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	f003 0303 	and.w	r3, r3, #3
 8002832:	2b01      	cmp	r3, #1
 8002834:	d005      	beq.n	8002842 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800283e:	2b02      	cmp	r3, #2
 8002840:	d130      	bne.n	80028a4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002848:	69fb      	ldr	r3, [r7, #28]
 800284a:	005b      	lsls	r3, r3, #1
 800284c:	2203      	movs	r2, #3
 800284e:	fa02 f303 	lsl.w	r3, r2, r3
 8002852:	43db      	mvns	r3, r3
 8002854:	69ba      	ldr	r2, [r7, #24]
 8002856:	4013      	ands	r3, r2
 8002858:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	68da      	ldr	r2, [r3, #12]
 800285e:	69fb      	ldr	r3, [r7, #28]
 8002860:	005b      	lsls	r3, r3, #1
 8002862:	fa02 f303 	lsl.w	r3, r2, r3
 8002866:	69ba      	ldr	r2, [r7, #24]
 8002868:	4313      	orrs	r3, r2
 800286a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	69ba      	ldr	r2, [r7, #24]
 8002870:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002878:	2201      	movs	r2, #1
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	fa02 f303 	lsl.w	r3, r2, r3
 8002880:	43db      	mvns	r3, r3
 8002882:	69ba      	ldr	r2, [r7, #24]
 8002884:	4013      	ands	r3, r2
 8002886:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	091b      	lsrs	r3, r3, #4
 800288e:	f003 0201 	and.w	r2, r3, #1
 8002892:	69fb      	ldr	r3, [r7, #28]
 8002894:	fa02 f303 	lsl.w	r3, r2, r3
 8002898:	69ba      	ldr	r2, [r7, #24]
 800289a:	4313      	orrs	r3, r2
 800289c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	69ba      	ldr	r2, [r7, #24]
 80028a2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	f003 0303 	and.w	r3, r3, #3
 80028ac:	2b03      	cmp	r3, #3
 80028ae:	d017      	beq.n	80028e0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	68db      	ldr	r3, [r3, #12]
 80028b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80028b6:	69fb      	ldr	r3, [r7, #28]
 80028b8:	005b      	lsls	r3, r3, #1
 80028ba:	2203      	movs	r2, #3
 80028bc:	fa02 f303 	lsl.w	r3, r2, r3
 80028c0:	43db      	mvns	r3, r3
 80028c2:	69ba      	ldr	r2, [r7, #24]
 80028c4:	4013      	ands	r3, r2
 80028c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	689a      	ldr	r2, [r3, #8]
 80028cc:	69fb      	ldr	r3, [r7, #28]
 80028ce:	005b      	lsls	r3, r3, #1
 80028d0:	fa02 f303 	lsl.w	r3, r2, r3
 80028d4:	69ba      	ldr	r2, [r7, #24]
 80028d6:	4313      	orrs	r3, r2
 80028d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	69ba      	ldr	r2, [r7, #24]
 80028de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	f003 0303 	and.w	r3, r3, #3
 80028e8:	2b02      	cmp	r3, #2
 80028ea:	d123      	bne.n	8002934 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	08da      	lsrs	r2, r3, #3
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	3208      	adds	r2, #8
 80028f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	f003 0307 	and.w	r3, r3, #7
 8002900:	009b      	lsls	r3, r3, #2
 8002902:	220f      	movs	r2, #15
 8002904:	fa02 f303 	lsl.w	r3, r2, r3
 8002908:	43db      	mvns	r3, r3
 800290a:	69ba      	ldr	r2, [r7, #24]
 800290c:	4013      	ands	r3, r2
 800290e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	691a      	ldr	r2, [r3, #16]
 8002914:	69fb      	ldr	r3, [r7, #28]
 8002916:	f003 0307 	and.w	r3, r3, #7
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	fa02 f303 	lsl.w	r3, r2, r3
 8002920:	69ba      	ldr	r2, [r7, #24]
 8002922:	4313      	orrs	r3, r2
 8002924:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	08da      	lsrs	r2, r3, #3
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	3208      	adds	r2, #8
 800292e:	69b9      	ldr	r1, [r7, #24]
 8002930:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	005b      	lsls	r3, r3, #1
 800293e:	2203      	movs	r2, #3
 8002940:	fa02 f303 	lsl.w	r3, r2, r3
 8002944:	43db      	mvns	r3, r3
 8002946:	69ba      	ldr	r2, [r7, #24]
 8002948:	4013      	ands	r3, r2
 800294a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	f003 0203 	and.w	r2, r3, #3
 8002954:	69fb      	ldr	r3, [r7, #28]
 8002956:	005b      	lsls	r3, r3, #1
 8002958:	fa02 f303 	lsl.w	r3, r2, r3
 800295c:	69ba      	ldr	r2, [r7, #24]
 800295e:	4313      	orrs	r3, r2
 8002960:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	69ba      	ldr	r2, [r7, #24]
 8002966:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002970:	2b00      	cmp	r3, #0
 8002972:	f000 80ae 	beq.w	8002ad2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002976:	2300      	movs	r3, #0
 8002978:	60fb      	str	r3, [r7, #12]
 800297a:	4b5d      	ldr	r3, [pc, #372]	; (8002af0 <HAL_GPIO_Init+0x300>)
 800297c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800297e:	4a5c      	ldr	r2, [pc, #368]	; (8002af0 <HAL_GPIO_Init+0x300>)
 8002980:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002984:	6453      	str	r3, [r2, #68]	; 0x44
 8002986:	4b5a      	ldr	r3, [pc, #360]	; (8002af0 <HAL_GPIO_Init+0x300>)
 8002988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800298a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800298e:	60fb      	str	r3, [r7, #12]
 8002990:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002992:	4a58      	ldr	r2, [pc, #352]	; (8002af4 <HAL_GPIO_Init+0x304>)
 8002994:	69fb      	ldr	r3, [r7, #28]
 8002996:	089b      	lsrs	r3, r3, #2
 8002998:	3302      	adds	r3, #2
 800299a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800299e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80029a0:	69fb      	ldr	r3, [r7, #28]
 80029a2:	f003 0303 	and.w	r3, r3, #3
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	220f      	movs	r2, #15
 80029aa:	fa02 f303 	lsl.w	r3, r2, r3
 80029ae:	43db      	mvns	r3, r3
 80029b0:	69ba      	ldr	r2, [r7, #24]
 80029b2:	4013      	ands	r3, r2
 80029b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	4a4f      	ldr	r2, [pc, #316]	; (8002af8 <HAL_GPIO_Init+0x308>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d025      	beq.n	8002a0a <HAL_GPIO_Init+0x21a>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	4a4e      	ldr	r2, [pc, #312]	; (8002afc <HAL_GPIO_Init+0x30c>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d01f      	beq.n	8002a06 <HAL_GPIO_Init+0x216>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	4a4d      	ldr	r2, [pc, #308]	; (8002b00 <HAL_GPIO_Init+0x310>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d019      	beq.n	8002a02 <HAL_GPIO_Init+0x212>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	4a4c      	ldr	r2, [pc, #304]	; (8002b04 <HAL_GPIO_Init+0x314>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d013      	beq.n	80029fe <HAL_GPIO_Init+0x20e>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	4a4b      	ldr	r2, [pc, #300]	; (8002b08 <HAL_GPIO_Init+0x318>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d00d      	beq.n	80029fa <HAL_GPIO_Init+0x20a>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	4a4a      	ldr	r2, [pc, #296]	; (8002b0c <HAL_GPIO_Init+0x31c>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d007      	beq.n	80029f6 <HAL_GPIO_Init+0x206>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4a49      	ldr	r2, [pc, #292]	; (8002b10 <HAL_GPIO_Init+0x320>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d101      	bne.n	80029f2 <HAL_GPIO_Init+0x202>
 80029ee:	2306      	movs	r3, #6
 80029f0:	e00c      	b.n	8002a0c <HAL_GPIO_Init+0x21c>
 80029f2:	2307      	movs	r3, #7
 80029f4:	e00a      	b.n	8002a0c <HAL_GPIO_Init+0x21c>
 80029f6:	2305      	movs	r3, #5
 80029f8:	e008      	b.n	8002a0c <HAL_GPIO_Init+0x21c>
 80029fa:	2304      	movs	r3, #4
 80029fc:	e006      	b.n	8002a0c <HAL_GPIO_Init+0x21c>
 80029fe:	2303      	movs	r3, #3
 8002a00:	e004      	b.n	8002a0c <HAL_GPIO_Init+0x21c>
 8002a02:	2302      	movs	r3, #2
 8002a04:	e002      	b.n	8002a0c <HAL_GPIO_Init+0x21c>
 8002a06:	2301      	movs	r3, #1
 8002a08:	e000      	b.n	8002a0c <HAL_GPIO_Init+0x21c>
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	69fa      	ldr	r2, [r7, #28]
 8002a0e:	f002 0203 	and.w	r2, r2, #3
 8002a12:	0092      	lsls	r2, r2, #2
 8002a14:	4093      	lsls	r3, r2
 8002a16:	69ba      	ldr	r2, [r7, #24]
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a1c:	4935      	ldr	r1, [pc, #212]	; (8002af4 <HAL_GPIO_Init+0x304>)
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	089b      	lsrs	r3, r3, #2
 8002a22:	3302      	adds	r3, #2
 8002a24:	69ba      	ldr	r2, [r7, #24]
 8002a26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a2a:	4b3a      	ldr	r3, [pc, #232]	; (8002b14 <HAL_GPIO_Init+0x324>)
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	43db      	mvns	r3, r3
 8002a34:	69ba      	ldr	r2, [r7, #24]
 8002a36:	4013      	ands	r3, r2
 8002a38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d003      	beq.n	8002a4e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002a46:	69ba      	ldr	r2, [r7, #24]
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a4e:	4a31      	ldr	r2, [pc, #196]	; (8002b14 <HAL_GPIO_Init+0x324>)
 8002a50:	69bb      	ldr	r3, [r7, #24]
 8002a52:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a54:	4b2f      	ldr	r3, [pc, #188]	; (8002b14 <HAL_GPIO_Init+0x324>)
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	43db      	mvns	r3, r3
 8002a5e:	69ba      	ldr	r2, [r7, #24]
 8002a60:	4013      	ands	r3, r2
 8002a62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d003      	beq.n	8002a78 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002a70:	69ba      	ldr	r2, [r7, #24]
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	4313      	orrs	r3, r2
 8002a76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a78:	4a26      	ldr	r2, [pc, #152]	; (8002b14 <HAL_GPIO_Init+0x324>)
 8002a7a:	69bb      	ldr	r3, [r7, #24]
 8002a7c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a7e:	4b25      	ldr	r3, [pc, #148]	; (8002b14 <HAL_GPIO_Init+0x324>)
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	43db      	mvns	r3, r3
 8002a88:	69ba      	ldr	r2, [r7, #24]
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d003      	beq.n	8002aa2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002a9a:	69ba      	ldr	r2, [r7, #24]
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002aa2:	4a1c      	ldr	r2, [pc, #112]	; (8002b14 <HAL_GPIO_Init+0x324>)
 8002aa4:	69bb      	ldr	r3, [r7, #24]
 8002aa6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002aa8:	4b1a      	ldr	r3, [pc, #104]	; (8002b14 <HAL_GPIO_Init+0x324>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	43db      	mvns	r3, r3
 8002ab2:	69ba      	ldr	r2, [r7, #24]
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d003      	beq.n	8002acc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002ac4:	69ba      	ldr	r2, [r7, #24]
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002acc:	4a11      	ldr	r2, [pc, #68]	; (8002b14 <HAL_GPIO_Init+0x324>)
 8002ace:	69bb      	ldr	r3, [r7, #24]
 8002ad0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ad2:	69fb      	ldr	r3, [r7, #28]
 8002ad4:	3301      	adds	r3, #1
 8002ad6:	61fb      	str	r3, [r7, #28]
 8002ad8:	69fb      	ldr	r3, [r7, #28]
 8002ada:	2b0f      	cmp	r3, #15
 8002adc:	f67f ae96 	bls.w	800280c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ae0:	bf00      	nop
 8002ae2:	bf00      	nop
 8002ae4:	3724      	adds	r7, #36	; 0x24
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aec:	4770      	bx	lr
 8002aee:	bf00      	nop
 8002af0:	40023800 	.word	0x40023800
 8002af4:	40013800 	.word	0x40013800
 8002af8:	40020000 	.word	0x40020000
 8002afc:	40020400 	.word	0x40020400
 8002b00:	40020800 	.word	0x40020800
 8002b04:	40020c00 	.word	0x40020c00
 8002b08:	40021000 	.word	0x40021000
 8002b0c:	40021400 	.word	0x40021400
 8002b10:	40021800 	.word	0x40021800
 8002b14:	40013c00 	.word	0x40013c00

08002b18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b083      	sub	sp, #12
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
 8002b20:	460b      	mov	r3, r1
 8002b22:	807b      	strh	r3, [r7, #2]
 8002b24:	4613      	mov	r3, r2
 8002b26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b28:	787b      	ldrb	r3, [r7, #1]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d003      	beq.n	8002b36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b2e:	887a      	ldrh	r2, [r7, #2]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b34:	e003      	b.n	8002b3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b36:	887b      	ldrh	r3, [r7, #2]
 8002b38:	041a      	lsls	r2, r3, #16
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	619a      	str	r2, [r3, #24]
}
 8002b3e:	bf00      	nop
 8002b40:	370c      	adds	r7, #12
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr

08002b4a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b4a:	b480      	push	{r7}
 8002b4c:	b085      	sub	sp, #20
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	6078      	str	r0, [r7, #4]
 8002b52:	460b      	mov	r3, r1
 8002b54:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	695b      	ldr	r3, [r3, #20]
 8002b5a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002b5c:	887a      	ldrh	r2, [r7, #2]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	4013      	ands	r3, r2
 8002b62:	041a      	lsls	r2, r3, #16
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	43d9      	mvns	r1, r3
 8002b68:	887b      	ldrh	r3, [r7, #2]
 8002b6a:	400b      	ands	r3, r1
 8002b6c:	431a      	orrs	r2, r3
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	619a      	str	r2, [r3, #24]
}
 8002b72:	bf00      	nop
 8002b74:	3714      	adds	r7, #20
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr
	...

08002b80 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b084      	sub	sp, #16
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d101      	bne.n	8002b92 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e12b      	b.n	8002dea <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d106      	bne.n	8002bac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f7fe fb70 	bl	800128c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2224      	movs	r2, #36	; 0x24
 8002bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f022 0201 	bic.w	r2, r2, #1
 8002bc2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002bd2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002be2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002be4:	f000 fe38 	bl	8003858 <HAL_RCC_GetPCLK1Freq>
 8002be8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	4a81      	ldr	r2, [pc, #516]	; (8002df4 <HAL_I2C_Init+0x274>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d807      	bhi.n	8002c04 <HAL_I2C_Init+0x84>
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	4a80      	ldr	r2, [pc, #512]	; (8002df8 <HAL_I2C_Init+0x278>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	bf94      	ite	ls
 8002bfc:	2301      	movls	r3, #1
 8002bfe:	2300      	movhi	r3, #0
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	e006      	b.n	8002c12 <HAL_I2C_Init+0x92>
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	4a7d      	ldr	r2, [pc, #500]	; (8002dfc <HAL_I2C_Init+0x27c>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	bf94      	ite	ls
 8002c0c:	2301      	movls	r3, #1
 8002c0e:	2300      	movhi	r3, #0
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d001      	beq.n	8002c1a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e0e7      	b.n	8002dea <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	4a78      	ldr	r2, [pc, #480]	; (8002e00 <HAL_I2C_Init+0x280>)
 8002c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c22:	0c9b      	lsrs	r3, r3, #18
 8002c24:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	68ba      	ldr	r2, [r7, #8]
 8002c36:	430a      	orrs	r2, r1
 8002c38:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	6a1b      	ldr	r3, [r3, #32]
 8002c40:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	4a6a      	ldr	r2, [pc, #424]	; (8002df4 <HAL_I2C_Init+0x274>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d802      	bhi.n	8002c54 <HAL_I2C_Init+0xd4>
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	3301      	adds	r3, #1
 8002c52:	e009      	b.n	8002c68 <HAL_I2C_Init+0xe8>
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002c5a:	fb02 f303 	mul.w	r3, r2, r3
 8002c5e:	4a69      	ldr	r2, [pc, #420]	; (8002e04 <HAL_I2C_Init+0x284>)
 8002c60:	fba2 2303 	umull	r2, r3, r2, r3
 8002c64:	099b      	lsrs	r3, r3, #6
 8002c66:	3301      	adds	r3, #1
 8002c68:	687a      	ldr	r2, [r7, #4]
 8002c6a:	6812      	ldr	r2, [r2, #0]
 8002c6c:	430b      	orrs	r3, r1
 8002c6e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	69db      	ldr	r3, [r3, #28]
 8002c76:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002c7a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	495c      	ldr	r1, [pc, #368]	; (8002df4 <HAL_I2C_Init+0x274>)
 8002c84:	428b      	cmp	r3, r1
 8002c86:	d819      	bhi.n	8002cbc <HAL_I2C_Init+0x13c>
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	1e59      	subs	r1, r3, #1
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	005b      	lsls	r3, r3, #1
 8002c92:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c96:	1c59      	adds	r1, r3, #1
 8002c98:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002c9c:	400b      	ands	r3, r1
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d00a      	beq.n	8002cb8 <HAL_I2C_Init+0x138>
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	1e59      	subs	r1, r3, #1
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	005b      	lsls	r3, r3, #1
 8002cac:	fbb1 f3f3 	udiv	r3, r1, r3
 8002cb0:	3301      	adds	r3, #1
 8002cb2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cb6:	e051      	b.n	8002d5c <HAL_I2C_Init+0x1dc>
 8002cb8:	2304      	movs	r3, #4
 8002cba:	e04f      	b.n	8002d5c <HAL_I2C_Init+0x1dc>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d111      	bne.n	8002ce8 <HAL_I2C_Init+0x168>
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	1e58      	subs	r0, r3, #1
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6859      	ldr	r1, [r3, #4]
 8002ccc:	460b      	mov	r3, r1
 8002cce:	005b      	lsls	r3, r3, #1
 8002cd0:	440b      	add	r3, r1
 8002cd2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cd6:	3301      	adds	r3, #1
 8002cd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	bf0c      	ite	eq
 8002ce0:	2301      	moveq	r3, #1
 8002ce2:	2300      	movne	r3, #0
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	e012      	b.n	8002d0e <HAL_I2C_Init+0x18e>
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	1e58      	subs	r0, r3, #1
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6859      	ldr	r1, [r3, #4]
 8002cf0:	460b      	mov	r3, r1
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	440b      	add	r3, r1
 8002cf6:	0099      	lsls	r1, r3, #2
 8002cf8:	440b      	add	r3, r1
 8002cfa:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cfe:	3301      	adds	r3, #1
 8002d00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	bf0c      	ite	eq
 8002d08:	2301      	moveq	r3, #1
 8002d0a:	2300      	movne	r3, #0
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d001      	beq.n	8002d16 <HAL_I2C_Init+0x196>
 8002d12:	2301      	movs	r3, #1
 8002d14:	e022      	b.n	8002d5c <HAL_I2C_Init+0x1dc>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d10e      	bne.n	8002d3c <HAL_I2C_Init+0x1bc>
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	1e58      	subs	r0, r3, #1
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6859      	ldr	r1, [r3, #4]
 8002d26:	460b      	mov	r3, r1
 8002d28:	005b      	lsls	r3, r3, #1
 8002d2a:	440b      	add	r3, r1
 8002d2c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d30:	3301      	adds	r3, #1
 8002d32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d3a:	e00f      	b.n	8002d5c <HAL_I2C_Init+0x1dc>
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	1e58      	subs	r0, r3, #1
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6859      	ldr	r1, [r3, #4]
 8002d44:	460b      	mov	r3, r1
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	440b      	add	r3, r1
 8002d4a:	0099      	lsls	r1, r3, #2
 8002d4c:	440b      	add	r3, r1
 8002d4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d52:	3301      	adds	r3, #1
 8002d54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d58:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d5c:	6879      	ldr	r1, [r7, #4]
 8002d5e:	6809      	ldr	r1, [r1, #0]
 8002d60:	4313      	orrs	r3, r2
 8002d62:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	69da      	ldr	r2, [r3, #28]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6a1b      	ldr	r3, [r3, #32]
 8002d76:	431a      	orrs	r2, r3
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	430a      	orrs	r2, r1
 8002d7e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002d8a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002d8e:	687a      	ldr	r2, [r7, #4]
 8002d90:	6911      	ldr	r1, [r2, #16]
 8002d92:	687a      	ldr	r2, [r7, #4]
 8002d94:	68d2      	ldr	r2, [r2, #12]
 8002d96:	4311      	orrs	r1, r2
 8002d98:	687a      	ldr	r2, [r7, #4]
 8002d9a:	6812      	ldr	r2, [r2, #0]
 8002d9c:	430b      	orrs	r3, r1
 8002d9e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	68db      	ldr	r3, [r3, #12]
 8002da6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	695a      	ldr	r2, [r3, #20]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	699b      	ldr	r3, [r3, #24]
 8002db2:	431a      	orrs	r2, r3
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	430a      	orrs	r2, r1
 8002dba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f042 0201 	orr.w	r2, r2, #1
 8002dca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2220      	movs	r2, #32
 8002dd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2200      	movs	r2, #0
 8002de4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002de8:	2300      	movs	r3, #0
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3710      	adds	r7, #16
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	000186a0 	.word	0x000186a0
 8002df8:	001e847f 	.word	0x001e847f
 8002dfc:	003d08ff 	.word	0x003d08ff
 8002e00:	431bde83 	.word	0x431bde83
 8002e04:	10624dd3 	.word	0x10624dd3

08002e08 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b088      	sub	sp, #32
 8002e0c:	af02      	add	r7, sp, #8
 8002e0e:	60f8      	str	r0, [r7, #12]
 8002e10:	607a      	str	r2, [r7, #4]
 8002e12:	461a      	mov	r2, r3
 8002e14:	460b      	mov	r3, r1
 8002e16:	817b      	strh	r3, [r7, #10]
 8002e18:	4613      	mov	r3, r2
 8002e1a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e1c:	f7fe ffa4 	bl	8001d68 <HAL_GetTick>
 8002e20:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	2b20      	cmp	r3, #32
 8002e2c:	f040 80e0 	bne.w	8002ff0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	9300      	str	r3, [sp, #0]
 8002e34:	2319      	movs	r3, #25
 8002e36:	2201      	movs	r2, #1
 8002e38:	4970      	ldr	r1, [pc, #448]	; (8002ffc <HAL_I2C_Master_Transmit+0x1f4>)
 8002e3a:	68f8      	ldr	r0, [r7, #12]
 8002e3c:	f000 fa92 	bl	8003364 <I2C_WaitOnFlagUntilTimeout>
 8002e40:	4603      	mov	r3, r0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d001      	beq.n	8002e4a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002e46:	2302      	movs	r3, #2
 8002e48:	e0d3      	b.n	8002ff2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d101      	bne.n	8002e58 <HAL_I2C_Master_Transmit+0x50>
 8002e54:	2302      	movs	r3, #2
 8002e56:	e0cc      	b.n	8002ff2 <HAL_I2C_Master_Transmit+0x1ea>
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 0301 	and.w	r3, r3, #1
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d007      	beq.n	8002e7e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f042 0201 	orr.w	r2, r2, #1
 8002e7c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e8c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2221      	movs	r2, #33	; 0x21
 8002e92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2210      	movs	r2, #16
 8002e9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	687a      	ldr	r2, [r7, #4]
 8002ea8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	893a      	ldrh	r2, [r7, #8]
 8002eae:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eb4:	b29a      	uxth	r2, r3
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	4a50      	ldr	r2, [pc, #320]	; (8003000 <HAL_I2C_Master_Transmit+0x1f8>)
 8002ebe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002ec0:	8979      	ldrh	r1, [r7, #10]
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	6a3a      	ldr	r2, [r7, #32]
 8002ec6:	68f8      	ldr	r0, [r7, #12]
 8002ec8:	f000 f9ca 	bl	8003260 <I2C_MasterRequestWrite>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d001      	beq.n	8002ed6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e08d      	b.n	8002ff2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	613b      	str	r3, [r7, #16]
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	695b      	ldr	r3, [r3, #20]
 8002ee0:	613b      	str	r3, [r7, #16]
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	699b      	ldr	r3, [r3, #24]
 8002ee8:	613b      	str	r3, [r7, #16]
 8002eea:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002eec:	e066      	b.n	8002fbc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002eee:	697a      	ldr	r2, [r7, #20]
 8002ef0:	6a39      	ldr	r1, [r7, #32]
 8002ef2:	68f8      	ldr	r0, [r7, #12]
 8002ef4:	f000 fb0c 	bl	8003510 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d00d      	beq.n	8002f1a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f02:	2b04      	cmp	r3, #4
 8002f04:	d107      	bne.n	8002f16 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f14:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e06b      	b.n	8002ff2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f1e:	781a      	ldrb	r2, [r3, #0]
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2a:	1c5a      	adds	r2, r3, #1
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f34:	b29b      	uxth	r3, r3
 8002f36:	3b01      	subs	r3, #1
 8002f38:	b29a      	uxth	r2, r3
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f42:	3b01      	subs	r3, #1
 8002f44:	b29a      	uxth	r2, r3
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	695b      	ldr	r3, [r3, #20]
 8002f50:	f003 0304 	and.w	r3, r3, #4
 8002f54:	2b04      	cmp	r3, #4
 8002f56:	d11b      	bne.n	8002f90 <HAL_I2C_Master_Transmit+0x188>
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d017      	beq.n	8002f90 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f64:	781a      	ldrb	r2, [r3, #0]
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f70:	1c5a      	adds	r2, r3, #1
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f7a:	b29b      	uxth	r3, r3
 8002f7c:	3b01      	subs	r3, #1
 8002f7e:	b29a      	uxth	r2, r3
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f88:	3b01      	subs	r3, #1
 8002f8a:	b29a      	uxth	r2, r3
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f90:	697a      	ldr	r2, [r7, #20]
 8002f92:	6a39      	ldr	r1, [r7, #32]
 8002f94:	68f8      	ldr	r0, [r7, #12]
 8002f96:	f000 fafc 	bl	8003592 <I2C_WaitOnBTFFlagUntilTimeout>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d00d      	beq.n	8002fbc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa4:	2b04      	cmp	r3, #4
 8002fa6:	d107      	bne.n	8002fb8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fb6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e01a      	b.n	8002ff2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d194      	bne.n	8002eee <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fd2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2220      	movs	r2, #32
 8002fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002fec:	2300      	movs	r3, #0
 8002fee:	e000      	b.n	8002ff2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002ff0:	2302      	movs	r3, #2
  }
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3718      	adds	r7, #24
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	00100002 	.word	0x00100002
 8003000:	ffff0000 	.word	0xffff0000

08003004 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b08a      	sub	sp, #40	; 0x28
 8003008:	af02      	add	r7, sp, #8
 800300a:	60f8      	str	r0, [r7, #12]
 800300c:	607a      	str	r2, [r7, #4]
 800300e:	603b      	str	r3, [r7, #0]
 8003010:	460b      	mov	r3, r1
 8003012:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003014:	f7fe fea8 	bl	8001d68 <HAL_GetTick>
 8003018:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800301a:	2300      	movs	r3, #0
 800301c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003024:	b2db      	uxtb	r3, r3
 8003026:	2b20      	cmp	r3, #32
 8003028:	f040 8111 	bne.w	800324e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800302c:	69fb      	ldr	r3, [r7, #28]
 800302e:	9300      	str	r3, [sp, #0]
 8003030:	2319      	movs	r3, #25
 8003032:	2201      	movs	r2, #1
 8003034:	4988      	ldr	r1, [pc, #544]	; (8003258 <HAL_I2C_IsDeviceReady+0x254>)
 8003036:	68f8      	ldr	r0, [r7, #12]
 8003038:	f000 f994 	bl	8003364 <I2C_WaitOnFlagUntilTimeout>
 800303c:	4603      	mov	r3, r0
 800303e:	2b00      	cmp	r3, #0
 8003040:	d001      	beq.n	8003046 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003042:	2302      	movs	r3, #2
 8003044:	e104      	b.n	8003250 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800304c:	2b01      	cmp	r3, #1
 800304e:	d101      	bne.n	8003054 <HAL_I2C_IsDeviceReady+0x50>
 8003050:	2302      	movs	r3, #2
 8003052:	e0fd      	b.n	8003250 <HAL_I2C_IsDeviceReady+0x24c>
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2201      	movs	r2, #1
 8003058:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 0301 	and.w	r3, r3, #1
 8003066:	2b01      	cmp	r3, #1
 8003068:	d007      	beq.n	800307a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f042 0201 	orr.w	r2, r2, #1
 8003078:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003088:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2224      	movs	r2, #36	; 0x24
 800308e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2200      	movs	r2, #0
 8003096:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	4a70      	ldr	r2, [pc, #448]	; (800325c <HAL_I2C_IsDeviceReady+0x258>)
 800309c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030ac:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	9300      	str	r3, [sp, #0]
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	2200      	movs	r2, #0
 80030b6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80030ba:	68f8      	ldr	r0, [r7, #12]
 80030bc:	f000 f952 	bl	8003364 <I2C_WaitOnFlagUntilTimeout>
 80030c0:	4603      	mov	r3, r0
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d00d      	beq.n	80030e2 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030d4:	d103      	bne.n	80030de <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030dc:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80030de:	2303      	movs	r3, #3
 80030e0:	e0b6      	b.n	8003250 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80030e2:	897b      	ldrh	r3, [r7, #10]
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	461a      	mov	r2, r3
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80030f0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80030f2:	f7fe fe39 	bl	8001d68 <HAL_GetTick>
 80030f6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	695b      	ldr	r3, [r3, #20]
 80030fe:	f003 0302 	and.w	r3, r3, #2
 8003102:	2b02      	cmp	r3, #2
 8003104:	bf0c      	ite	eq
 8003106:	2301      	moveq	r3, #1
 8003108:	2300      	movne	r3, #0
 800310a:	b2db      	uxtb	r3, r3
 800310c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	695b      	ldr	r3, [r3, #20]
 8003114:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003118:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800311c:	bf0c      	ite	eq
 800311e:	2301      	moveq	r3, #1
 8003120:	2300      	movne	r3, #0
 8003122:	b2db      	uxtb	r3, r3
 8003124:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003126:	e025      	b.n	8003174 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003128:	f7fe fe1e 	bl	8001d68 <HAL_GetTick>
 800312c:	4602      	mov	r2, r0
 800312e:	69fb      	ldr	r3, [r7, #28]
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	683a      	ldr	r2, [r7, #0]
 8003134:	429a      	cmp	r2, r3
 8003136:	d302      	bcc.n	800313e <HAL_I2C_IsDeviceReady+0x13a>
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d103      	bne.n	8003146 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	22a0      	movs	r2, #160	; 0xa0
 8003142:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	695b      	ldr	r3, [r3, #20]
 800314c:	f003 0302 	and.w	r3, r3, #2
 8003150:	2b02      	cmp	r3, #2
 8003152:	bf0c      	ite	eq
 8003154:	2301      	moveq	r3, #1
 8003156:	2300      	movne	r3, #0
 8003158:	b2db      	uxtb	r3, r3
 800315a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	695b      	ldr	r3, [r3, #20]
 8003162:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003166:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800316a:	bf0c      	ite	eq
 800316c:	2301      	moveq	r3, #1
 800316e:	2300      	movne	r3, #0
 8003170:	b2db      	uxtb	r3, r3
 8003172:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800317a:	b2db      	uxtb	r3, r3
 800317c:	2ba0      	cmp	r3, #160	; 0xa0
 800317e:	d005      	beq.n	800318c <HAL_I2C_IsDeviceReady+0x188>
 8003180:	7dfb      	ldrb	r3, [r7, #23]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d102      	bne.n	800318c <HAL_I2C_IsDeviceReady+0x188>
 8003186:	7dbb      	ldrb	r3, [r7, #22]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d0cd      	beq.n	8003128 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	2220      	movs	r2, #32
 8003190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	695b      	ldr	r3, [r3, #20]
 800319a:	f003 0302 	and.w	r3, r3, #2
 800319e:	2b02      	cmp	r3, #2
 80031a0:	d129      	bne.n	80031f6 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031b0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031b2:	2300      	movs	r3, #0
 80031b4:	613b      	str	r3, [r7, #16]
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	695b      	ldr	r3, [r3, #20]
 80031bc:	613b      	str	r3, [r7, #16]
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	699b      	ldr	r3, [r3, #24]
 80031c4:	613b      	str	r3, [r7, #16]
 80031c6:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80031c8:	69fb      	ldr	r3, [r7, #28]
 80031ca:	9300      	str	r3, [sp, #0]
 80031cc:	2319      	movs	r3, #25
 80031ce:	2201      	movs	r2, #1
 80031d0:	4921      	ldr	r1, [pc, #132]	; (8003258 <HAL_I2C_IsDeviceReady+0x254>)
 80031d2:	68f8      	ldr	r0, [r7, #12]
 80031d4:	f000 f8c6 	bl	8003364 <I2C_WaitOnFlagUntilTimeout>
 80031d8:	4603      	mov	r3, r0
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d001      	beq.n	80031e2 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e036      	b.n	8003250 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2220      	movs	r2, #32
 80031e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2200      	movs	r2, #0
 80031ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80031f2:	2300      	movs	r3, #0
 80031f4:	e02c      	b.n	8003250 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003204:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800320e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003210:	69fb      	ldr	r3, [r7, #28]
 8003212:	9300      	str	r3, [sp, #0]
 8003214:	2319      	movs	r3, #25
 8003216:	2201      	movs	r2, #1
 8003218:	490f      	ldr	r1, [pc, #60]	; (8003258 <HAL_I2C_IsDeviceReady+0x254>)
 800321a:	68f8      	ldr	r0, [r7, #12]
 800321c:	f000 f8a2 	bl	8003364 <I2C_WaitOnFlagUntilTimeout>
 8003220:	4603      	mov	r3, r0
 8003222:	2b00      	cmp	r3, #0
 8003224:	d001      	beq.n	800322a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e012      	b.n	8003250 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800322a:	69bb      	ldr	r3, [r7, #24]
 800322c:	3301      	adds	r3, #1
 800322e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003230:	69ba      	ldr	r2, [r7, #24]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	429a      	cmp	r2, r3
 8003236:	f4ff af32 	bcc.w	800309e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2220      	movs	r2, #32
 800323e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2200      	movs	r2, #0
 8003246:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e000      	b.n	8003250 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800324e:	2302      	movs	r3, #2
  }
}
 8003250:	4618      	mov	r0, r3
 8003252:	3720      	adds	r7, #32
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}
 8003258:	00100002 	.word	0x00100002
 800325c:	ffff0000 	.word	0xffff0000

08003260 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b088      	sub	sp, #32
 8003264:	af02      	add	r7, sp, #8
 8003266:	60f8      	str	r0, [r7, #12]
 8003268:	607a      	str	r2, [r7, #4]
 800326a:	603b      	str	r3, [r7, #0]
 800326c:	460b      	mov	r3, r1
 800326e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003274:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	2b08      	cmp	r3, #8
 800327a:	d006      	beq.n	800328a <I2C_MasterRequestWrite+0x2a>
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	2b01      	cmp	r3, #1
 8003280:	d003      	beq.n	800328a <I2C_MasterRequestWrite+0x2a>
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003288:	d108      	bne.n	800329c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003298:	601a      	str	r2, [r3, #0]
 800329a:	e00b      	b.n	80032b4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a0:	2b12      	cmp	r3, #18
 80032a2:	d107      	bne.n	80032b4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032b2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	9300      	str	r3, [sp, #0]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2200      	movs	r2, #0
 80032bc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80032c0:	68f8      	ldr	r0, [r7, #12]
 80032c2:	f000 f84f 	bl	8003364 <I2C_WaitOnFlagUntilTimeout>
 80032c6:	4603      	mov	r3, r0
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d00d      	beq.n	80032e8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032da:	d103      	bne.n	80032e4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032e2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80032e4:	2303      	movs	r3, #3
 80032e6:	e035      	b.n	8003354 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	691b      	ldr	r3, [r3, #16]
 80032ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80032f0:	d108      	bne.n	8003304 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80032f2:	897b      	ldrh	r3, [r7, #10]
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	461a      	mov	r2, r3
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003300:	611a      	str	r2, [r3, #16]
 8003302:	e01b      	b.n	800333c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003304:	897b      	ldrh	r3, [r7, #10]
 8003306:	11db      	asrs	r3, r3, #7
 8003308:	b2db      	uxtb	r3, r3
 800330a:	f003 0306 	and.w	r3, r3, #6
 800330e:	b2db      	uxtb	r3, r3
 8003310:	f063 030f 	orn	r3, r3, #15
 8003314:	b2da      	uxtb	r2, r3
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	687a      	ldr	r2, [r7, #4]
 8003320:	490e      	ldr	r1, [pc, #56]	; (800335c <I2C_MasterRequestWrite+0xfc>)
 8003322:	68f8      	ldr	r0, [r7, #12]
 8003324:	f000 f875 	bl	8003412 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003328:	4603      	mov	r3, r0
 800332a:	2b00      	cmp	r3, #0
 800332c:	d001      	beq.n	8003332 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e010      	b.n	8003354 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003332:	897b      	ldrh	r3, [r7, #10]
 8003334:	b2da      	uxtb	r2, r3
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	687a      	ldr	r2, [r7, #4]
 8003340:	4907      	ldr	r1, [pc, #28]	; (8003360 <I2C_MasterRequestWrite+0x100>)
 8003342:	68f8      	ldr	r0, [r7, #12]
 8003344:	f000 f865 	bl	8003412 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003348:	4603      	mov	r3, r0
 800334a:	2b00      	cmp	r3, #0
 800334c:	d001      	beq.n	8003352 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e000      	b.n	8003354 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003352:	2300      	movs	r3, #0
}
 8003354:	4618      	mov	r0, r3
 8003356:	3718      	adds	r7, #24
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}
 800335c:	00010008 	.word	0x00010008
 8003360:	00010002 	.word	0x00010002

08003364 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b084      	sub	sp, #16
 8003368:	af00      	add	r7, sp, #0
 800336a:	60f8      	str	r0, [r7, #12]
 800336c:	60b9      	str	r1, [r7, #8]
 800336e:	603b      	str	r3, [r7, #0]
 8003370:	4613      	mov	r3, r2
 8003372:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003374:	e025      	b.n	80033c2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800337c:	d021      	beq.n	80033c2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800337e:	f7fe fcf3 	bl	8001d68 <HAL_GetTick>
 8003382:	4602      	mov	r2, r0
 8003384:	69bb      	ldr	r3, [r7, #24]
 8003386:	1ad3      	subs	r3, r2, r3
 8003388:	683a      	ldr	r2, [r7, #0]
 800338a:	429a      	cmp	r2, r3
 800338c:	d302      	bcc.n	8003394 <I2C_WaitOnFlagUntilTimeout+0x30>
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d116      	bne.n	80033c2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2200      	movs	r2, #0
 8003398:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2220      	movs	r2, #32
 800339e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2200      	movs	r2, #0
 80033a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ae:	f043 0220 	orr.w	r2, r3, #32
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2200      	movs	r2, #0
 80033ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e023      	b.n	800340a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	0c1b      	lsrs	r3, r3, #16
 80033c6:	b2db      	uxtb	r3, r3
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d10d      	bne.n	80033e8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	695b      	ldr	r3, [r3, #20]
 80033d2:	43da      	mvns	r2, r3
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	4013      	ands	r3, r2
 80033d8:	b29b      	uxth	r3, r3
 80033da:	2b00      	cmp	r3, #0
 80033dc:	bf0c      	ite	eq
 80033de:	2301      	moveq	r3, #1
 80033e0:	2300      	movne	r3, #0
 80033e2:	b2db      	uxtb	r3, r3
 80033e4:	461a      	mov	r2, r3
 80033e6:	e00c      	b.n	8003402 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	699b      	ldr	r3, [r3, #24]
 80033ee:	43da      	mvns	r2, r3
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	4013      	ands	r3, r2
 80033f4:	b29b      	uxth	r3, r3
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	bf0c      	ite	eq
 80033fa:	2301      	moveq	r3, #1
 80033fc:	2300      	movne	r3, #0
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	461a      	mov	r2, r3
 8003402:	79fb      	ldrb	r3, [r7, #7]
 8003404:	429a      	cmp	r2, r3
 8003406:	d0b6      	beq.n	8003376 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003408:	2300      	movs	r3, #0
}
 800340a:	4618      	mov	r0, r3
 800340c:	3710      	adds	r7, #16
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}

08003412 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003412:	b580      	push	{r7, lr}
 8003414:	b084      	sub	sp, #16
 8003416:	af00      	add	r7, sp, #0
 8003418:	60f8      	str	r0, [r7, #12]
 800341a:	60b9      	str	r1, [r7, #8]
 800341c:	607a      	str	r2, [r7, #4]
 800341e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003420:	e051      	b.n	80034c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	695b      	ldr	r3, [r3, #20]
 8003428:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800342c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003430:	d123      	bne.n	800347a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003440:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800344a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2200      	movs	r2, #0
 8003450:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2220      	movs	r2, #32
 8003456:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	2200      	movs	r2, #0
 800345e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003466:	f043 0204 	orr.w	r2, r3, #4
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2200      	movs	r2, #0
 8003472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e046      	b.n	8003508 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003480:	d021      	beq.n	80034c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003482:	f7fe fc71 	bl	8001d68 <HAL_GetTick>
 8003486:	4602      	mov	r2, r0
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	1ad3      	subs	r3, r2, r3
 800348c:	687a      	ldr	r2, [r7, #4]
 800348e:	429a      	cmp	r2, r3
 8003490:	d302      	bcc.n	8003498 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d116      	bne.n	80034c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2200      	movs	r2, #0
 800349c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2220      	movs	r2, #32
 80034a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2200      	movs	r2, #0
 80034aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b2:	f043 0220 	orr.w	r2, r3, #32
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2200      	movs	r2, #0
 80034be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	e020      	b.n	8003508 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	0c1b      	lsrs	r3, r3, #16
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d10c      	bne.n	80034ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	695b      	ldr	r3, [r3, #20]
 80034d6:	43da      	mvns	r2, r3
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	4013      	ands	r3, r2
 80034dc:	b29b      	uxth	r3, r3
 80034de:	2b00      	cmp	r3, #0
 80034e0:	bf14      	ite	ne
 80034e2:	2301      	movne	r3, #1
 80034e4:	2300      	moveq	r3, #0
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	e00b      	b.n	8003502 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	699b      	ldr	r3, [r3, #24]
 80034f0:	43da      	mvns	r2, r3
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	4013      	ands	r3, r2
 80034f6:	b29b      	uxth	r3, r3
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	bf14      	ite	ne
 80034fc:	2301      	movne	r3, #1
 80034fe:	2300      	moveq	r3, #0
 8003500:	b2db      	uxtb	r3, r3
 8003502:	2b00      	cmp	r3, #0
 8003504:	d18d      	bne.n	8003422 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003506:	2300      	movs	r3, #0
}
 8003508:	4618      	mov	r0, r3
 800350a:	3710      	adds	r7, #16
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}

08003510 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b084      	sub	sp, #16
 8003514:	af00      	add	r7, sp, #0
 8003516:	60f8      	str	r0, [r7, #12]
 8003518:	60b9      	str	r1, [r7, #8]
 800351a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800351c:	e02d      	b.n	800357a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800351e:	68f8      	ldr	r0, [r7, #12]
 8003520:	f000 f878 	bl	8003614 <I2C_IsAcknowledgeFailed>
 8003524:	4603      	mov	r3, r0
 8003526:	2b00      	cmp	r3, #0
 8003528:	d001      	beq.n	800352e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e02d      	b.n	800358a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003534:	d021      	beq.n	800357a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003536:	f7fe fc17 	bl	8001d68 <HAL_GetTick>
 800353a:	4602      	mov	r2, r0
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	68ba      	ldr	r2, [r7, #8]
 8003542:	429a      	cmp	r2, r3
 8003544:	d302      	bcc.n	800354c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d116      	bne.n	800357a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2200      	movs	r2, #0
 8003550:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2220      	movs	r2, #32
 8003556:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2200      	movs	r2, #0
 800355e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003566:	f043 0220 	orr.w	r2, r3, #32
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2200      	movs	r2, #0
 8003572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e007      	b.n	800358a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	695b      	ldr	r3, [r3, #20]
 8003580:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003584:	2b80      	cmp	r3, #128	; 0x80
 8003586:	d1ca      	bne.n	800351e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003588:	2300      	movs	r3, #0
}
 800358a:	4618      	mov	r0, r3
 800358c:	3710      	adds	r7, #16
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}

08003592 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003592:	b580      	push	{r7, lr}
 8003594:	b084      	sub	sp, #16
 8003596:	af00      	add	r7, sp, #0
 8003598:	60f8      	str	r0, [r7, #12]
 800359a:	60b9      	str	r1, [r7, #8]
 800359c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800359e:	e02d      	b.n	80035fc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80035a0:	68f8      	ldr	r0, [r7, #12]
 80035a2:	f000 f837 	bl	8003614 <I2C_IsAcknowledgeFailed>
 80035a6:	4603      	mov	r3, r0
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d001      	beq.n	80035b0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	e02d      	b.n	800360c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80035b6:	d021      	beq.n	80035fc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035b8:	f7fe fbd6 	bl	8001d68 <HAL_GetTick>
 80035bc:	4602      	mov	r2, r0
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	1ad3      	subs	r3, r2, r3
 80035c2:	68ba      	ldr	r2, [r7, #8]
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d302      	bcc.n	80035ce <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d116      	bne.n	80035fc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2200      	movs	r2, #0
 80035d2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2220      	movs	r2, #32
 80035d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2200      	movs	r2, #0
 80035e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e8:	f043 0220 	orr.w	r2, r3, #32
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2200      	movs	r2, #0
 80035f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	e007      	b.n	800360c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	695b      	ldr	r3, [r3, #20]
 8003602:	f003 0304 	and.w	r3, r3, #4
 8003606:	2b04      	cmp	r3, #4
 8003608:	d1ca      	bne.n	80035a0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800360a:	2300      	movs	r3, #0
}
 800360c:	4618      	mov	r0, r3
 800360e:	3710      	adds	r7, #16
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}

08003614 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003614:	b480      	push	{r7}
 8003616:	b083      	sub	sp, #12
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	695b      	ldr	r3, [r3, #20]
 8003622:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003626:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800362a:	d11b      	bne.n	8003664 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003634:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2200      	movs	r2, #0
 800363a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2220      	movs	r2, #32
 8003640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2200      	movs	r2, #0
 8003648:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003650:	f043 0204 	orr.w	r2, r3, #4
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2200      	movs	r2, #0
 800365c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	e000      	b.n	8003666 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003664:	2300      	movs	r3, #0
}
 8003666:	4618      	mov	r0, r3
 8003668:	370c      	adds	r7, #12
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr
	...

08003674 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b084      	sub	sp, #16
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
 800367c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d101      	bne.n	8003688 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	e0cc      	b.n	8003822 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003688:	4b68      	ldr	r3, [pc, #416]	; (800382c <HAL_RCC_ClockConfig+0x1b8>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 030f 	and.w	r3, r3, #15
 8003690:	683a      	ldr	r2, [r7, #0]
 8003692:	429a      	cmp	r2, r3
 8003694:	d90c      	bls.n	80036b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003696:	4b65      	ldr	r3, [pc, #404]	; (800382c <HAL_RCC_ClockConfig+0x1b8>)
 8003698:	683a      	ldr	r2, [r7, #0]
 800369a:	b2d2      	uxtb	r2, r2
 800369c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800369e:	4b63      	ldr	r3, [pc, #396]	; (800382c <HAL_RCC_ClockConfig+0x1b8>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 030f 	and.w	r3, r3, #15
 80036a6:	683a      	ldr	r2, [r7, #0]
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d001      	beq.n	80036b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	e0b8      	b.n	8003822 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f003 0302 	and.w	r3, r3, #2
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d020      	beq.n	80036fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f003 0304 	and.w	r3, r3, #4
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d005      	beq.n	80036d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036c8:	4b59      	ldr	r3, [pc, #356]	; (8003830 <HAL_RCC_ClockConfig+0x1bc>)
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	4a58      	ldr	r2, [pc, #352]	; (8003830 <HAL_RCC_ClockConfig+0x1bc>)
 80036ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80036d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 0308 	and.w	r3, r3, #8
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d005      	beq.n	80036ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80036e0:	4b53      	ldr	r3, [pc, #332]	; (8003830 <HAL_RCC_ClockConfig+0x1bc>)
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	4a52      	ldr	r2, [pc, #328]	; (8003830 <HAL_RCC_ClockConfig+0x1bc>)
 80036e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80036ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036ec:	4b50      	ldr	r3, [pc, #320]	; (8003830 <HAL_RCC_ClockConfig+0x1bc>)
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	494d      	ldr	r1, [pc, #308]	; (8003830 <HAL_RCC_ClockConfig+0x1bc>)
 80036fa:	4313      	orrs	r3, r2
 80036fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 0301 	and.w	r3, r3, #1
 8003706:	2b00      	cmp	r3, #0
 8003708:	d044      	beq.n	8003794 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	2b01      	cmp	r3, #1
 8003710:	d107      	bne.n	8003722 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003712:	4b47      	ldr	r3, [pc, #284]	; (8003830 <HAL_RCC_ClockConfig+0x1bc>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800371a:	2b00      	cmp	r3, #0
 800371c:	d119      	bne.n	8003752 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e07f      	b.n	8003822 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	2b02      	cmp	r3, #2
 8003728:	d003      	beq.n	8003732 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800372e:	2b03      	cmp	r3, #3
 8003730:	d107      	bne.n	8003742 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003732:	4b3f      	ldr	r3, [pc, #252]	; (8003830 <HAL_RCC_ClockConfig+0x1bc>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800373a:	2b00      	cmp	r3, #0
 800373c:	d109      	bne.n	8003752 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	e06f      	b.n	8003822 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003742:	4b3b      	ldr	r3, [pc, #236]	; (8003830 <HAL_RCC_ClockConfig+0x1bc>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 0302 	and.w	r3, r3, #2
 800374a:	2b00      	cmp	r3, #0
 800374c:	d101      	bne.n	8003752 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e067      	b.n	8003822 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003752:	4b37      	ldr	r3, [pc, #220]	; (8003830 <HAL_RCC_ClockConfig+0x1bc>)
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	f023 0203 	bic.w	r2, r3, #3
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	4934      	ldr	r1, [pc, #208]	; (8003830 <HAL_RCC_ClockConfig+0x1bc>)
 8003760:	4313      	orrs	r3, r2
 8003762:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003764:	f7fe fb00 	bl	8001d68 <HAL_GetTick>
 8003768:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800376a:	e00a      	b.n	8003782 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800376c:	f7fe fafc 	bl	8001d68 <HAL_GetTick>
 8003770:	4602      	mov	r2, r0
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	1ad3      	subs	r3, r2, r3
 8003776:	f241 3288 	movw	r2, #5000	; 0x1388
 800377a:	4293      	cmp	r3, r2
 800377c:	d901      	bls.n	8003782 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800377e:	2303      	movs	r3, #3
 8003780:	e04f      	b.n	8003822 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003782:	4b2b      	ldr	r3, [pc, #172]	; (8003830 <HAL_RCC_ClockConfig+0x1bc>)
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	f003 020c 	and.w	r2, r3, #12
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	009b      	lsls	r3, r3, #2
 8003790:	429a      	cmp	r2, r3
 8003792:	d1eb      	bne.n	800376c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003794:	4b25      	ldr	r3, [pc, #148]	; (800382c <HAL_RCC_ClockConfig+0x1b8>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 030f 	and.w	r3, r3, #15
 800379c:	683a      	ldr	r2, [r7, #0]
 800379e:	429a      	cmp	r2, r3
 80037a0:	d20c      	bcs.n	80037bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037a2:	4b22      	ldr	r3, [pc, #136]	; (800382c <HAL_RCC_ClockConfig+0x1b8>)
 80037a4:	683a      	ldr	r2, [r7, #0]
 80037a6:	b2d2      	uxtb	r2, r2
 80037a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037aa:	4b20      	ldr	r3, [pc, #128]	; (800382c <HAL_RCC_ClockConfig+0x1b8>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 030f 	and.w	r3, r3, #15
 80037b2:	683a      	ldr	r2, [r7, #0]
 80037b4:	429a      	cmp	r2, r3
 80037b6:	d001      	beq.n	80037bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	e032      	b.n	8003822 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f003 0304 	and.w	r3, r3, #4
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d008      	beq.n	80037da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037c8:	4b19      	ldr	r3, [pc, #100]	; (8003830 <HAL_RCC_ClockConfig+0x1bc>)
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	68db      	ldr	r3, [r3, #12]
 80037d4:	4916      	ldr	r1, [pc, #88]	; (8003830 <HAL_RCC_ClockConfig+0x1bc>)
 80037d6:	4313      	orrs	r3, r2
 80037d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f003 0308 	and.w	r3, r3, #8
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d009      	beq.n	80037fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037e6:	4b12      	ldr	r3, [pc, #72]	; (8003830 <HAL_RCC_ClockConfig+0x1bc>)
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	691b      	ldr	r3, [r3, #16]
 80037f2:	00db      	lsls	r3, r3, #3
 80037f4:	490e      	ldr	r1, [pc, #56]	; (8003830 <HAL_RCC_ClockConfig+0x1bc>)
 80037f6:	4313      	orrs	r3, r2
 80037f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80037fa:	f000 f855 	bl	80038a8 <HAL_RCC_GetSysClockFreq>
 80037fe:	4602      	mov	r2, r0
 8003800:	4b0b      	ldr	r3, [pc, #44]	; (8003830 <HAL_RCC_ClockConfig+0x1bc>)
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	091b      	lsrs	r3, r3, #4
 8003806:	f003 030f 	and.w	r3, r3, #15
 800380a:	490a      	ldr	r1, [pc, #40]	; (8003834 <HAL_RCC_ClockConfig+0x1c0>)
 800380c:	5ccb      	ldrb	r3, [r1, r3]
 800380e:	fa22 f303 	lsr.w	r3, r2, r3
 8003812:	4a09      	ldr	r2, [pc, #36]	; (8003838 <HAL_RCC_ClockConfig+0x1c4>)
 8003814:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003816:	4b09      	ldr	r3, [pc, #36]	; (800383c <HAL_RCC_ClockConfig+0x1c8>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4618      	mov	r0, r3
 800381c:	f7fe fa60 	bl	8001ce0 <HAL_InitTick>

  return HAL_OK;
 8003820:	2300      	movs	r3, #0
}
 8003822:	4618      	mov	r0, r3
 8003824:	3710      	adds	r7, #16
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}
 800382a:	bf00      	nop
 800382c:	40023c00 	.word	0x40023c00
 8003830:	40023800 	.word	0x40023800
 8003834:	08008958 	.word	0x08008958
 8003838:	20000014 	.word	0x20000014
 800383c:	20000018 	.word	0x20000018

08003840 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003840:	b480      	push	{r7}
 8003842:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003844:	4b03      	ldr	r3, [pc, #12]	; (8003854 <HAL_RCC_GetHCLKFreq+0x14>)
 8003846:	681b      	ldr	r3, [r3, #0]
}
 8003848:	4618      	mov	r0, r3
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr
 8003852:	bf00      	nop
 8003854:	20000014 	.word	0x20000014

08003858 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800385c:	f7ff fff0 	bl	8003840 <HAL_RCC_GetHCLKFreq>
 8003860:	4602      	mov	r2, r0
 8003862:	4b05      	ldr	r3, [pc, #20]	; (8003878 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	0a9b      	lsrs	r3, r3, #10
 8003868:	f003 0307 	and.w	r3, r3, #7
 800386c:	4903      	ldr	r1, [pc, #12]	; (800387c <HAL_RCC_GetPCLK1Freq+0x24>)
 800386e:	5ccb      	ldrb	r3, [r1, r3]
 8003870:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003874:	4618      	mov	r0, r3
 8003876:	bd80      	pop	{r7, pc}
 8003878:	40023800 	.word	0x40023800
 800387c:	08008968 	.word	0x08008968

08003880 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003884:	f7ff ffdc 	bl	8003840 <HAL_RCC_GetHCLKFreq>
 8003888:	4602      	mov	r2, r0
 800388a:	4b05      	ldr	r3, [pc, #20]	; (80038a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	0b5b      	lsrs	r3, r3, #13
 8003890:	f003 0307 	and.w	r3, r3, #7
 8003894:	4903      	ldr	r1, [pc, #12]	; (80038a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003896:	5ccb      	ldrb	r3, [r1, r3]
 8003898:	fa22 f303 	lsr.w	r3, r2, r3
}
 800389c:	4618      	mov	r0, r3
 800389e:	bd80      	pop	{r7, pc}
 80038a0:	40023800 	.word	0x40023800
 80038a4:	08008968 	.word	0x08008968

080038a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038ac:	b0ae      	sub	sp, #184	; 0xb8
 80038ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80038b0:	2300      	movs	r3, #0
 80038b2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80038b6:	2300      	movs	r3, #0
 80038b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80038bc:	2300      	movs	r3, #0
 80038be:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80038c2:	2300      	movs	r3, #0
 80038c4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80038c8:	2300      	movs	r3, #0
 80038ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80038ce:	4bcb      	ldr	r3, [pc, #812]	; (8003bfc <HAL_RCC_GetSysClockFreq+0x354>)
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	f003 030c 	and.w	r3, r3, #12
 80038d6:	2b0c      	cmp	r3, #12
 80038d8:	f200 8206 	bhi.w	8003ce8 <HAL_RCC_GetSysClockFreq+0x440>
 80038dc:	a201      	add	r2, pc, #4	; (adr r2, 80038e4 <HAL_RCC_GetSysClockFreq+0x3c>)
 80038de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038e2:	bf00      	nop
 80038e4:	08003919 	.word	0x08003919
 80038e8:	08003ce9 	.word	0x08003ce9
 80038ec:	08003ce9 	.word	0x08003ce9
 80038f0:	08003ce9 	.word	0x08003ce9
 80038f4:	08003921 	.word	0x08003921
 80038f8:	08003ce9 	.word	0x08003ce9
 80038fc:	08003ce9 	.word	0x08003ce9
 8003900:	08003ce9 	.word	0x08003ce9
 8003904:	08003929 	.word	0x08003929
 8003908:	08003ce9 	.word	0x08003ce9
 800390c:	08003ce9 	.word	0x08003ce9
 8003910:	08003ce9 	.word	0x08003ce9
 8003914:	08003b19 	.word	0x08003b19
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003918:	4bb9      	ldr	r3, [pc, #740]	; (8003c00 <HAL_RCC_GetSysClockFreq+0x358>)
 800391a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800391e:	e1e7      	b.n	8003cf0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003920:	4bb8      	ldr	r3, [pc, #736]	; (8003c04 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003922:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003926:	e1e3      	b.n	8003cf0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003928:	4bb4      	ldr	r3, [pc, #720]	; (8003bfc <HAL_RCC_GetSysClockFreq+0x354>)
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003930:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003934:	4bb1      	ldr	r3, [pc, #708]	; (8003bfc <HAL_RCC_GetSysClockFreq+0x354>)
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800393c:	2b00      	cmp	r3, #0
 800393e:	d071      	beq.n	8003a24 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003940:	4bae      	ldr	r3, [pc, #696]	; (8003bfc <HAL_RCC_GetSysClockFreq+0x354>)
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	099b      	lsrs	r3, r3, #6
 8003946:	2200      	movs	r2, #0
 8003948:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800394c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003950:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003954:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003958:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800395c:	2300      	movs	r3, #0
 800395e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003962:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003966:	4622      	mov	r2, r4
 8003968:	462b      	mov	r3, r5
 800396a:	f04f 0000 	mov.w	r0, #0
 800396e:	f04f 0100 	mov.w	r1, #0
 8003972:	0159      	lsls	r1, r3, #5
 8003974:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003978:	0150      	lsls	r0, r2, #5
 800397a:	4602      	mov	r2, r0
 800397c:	460b      	mov	r3, r1
 800397e:	4621      	mov	r1, r4
 8003980:	1a51      	subs	r1, r2, r1
 8003982:	6439      	str	r1, [r7, #64]	; 0x40
 8003984:	4629      	mov	r1, r5
 8003986:	eb63 0301 	sbc.w	r3, r3, r1
 800398a:	647b      	str	r3, [r7, #68]	; 0x44
 800398c:	f04f 0200 	mov.w	r2, #0
 8003990:	f04f 0300 	mov.w	r3, #0
 8003994:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003998:	4649      	mov	r1, r9
 800399a:	018b      	lsls	r3, r1, #6
 800399c:	4641      	mov	r1, r8
 800399e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80039a2:	4641      	mov	r1, r8
 80039a4:	018a      	lsls	r2, r1, #6
 80039a6:	4641      	mov	r1, r8
 80039a8:	1a51      	subs	r1, r2, r1
 80039aa:	63b9      	str	r1, [r7, #56]	; 0x38
 80039ac:	4649      	mov	r1, r9
 80039ae:	eb63 0301 	sbc.w	r3, r3, r1
 80039b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80039b4:	f04f 0200 	mov.w	r2, #0
 80039b8:	f04f 0300 	mov.w	r3, #0
 80039bc:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80039c0:	4649      	mov	r1, r9
 80039c2:	00cb      	lsls	r3, r1, #3
 80039c4:	4641      	mov	r1, r8
 80039c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80039ca:	4641      	mov	r1, r8
 80039cc:	00ca      	lsls	r2, r1, #3
 80039ce:	4610      	mov	r0, r2
 80039d0:	4619      	mov	r1, r3
 80039d2:	4603      	mov	r3, r0
 80039d4:	4622      	mov	r2, r4
 80039d6:	189b      	adds	r3, r3, r2
 80039d8:	633b      	str	r3, [r7, #48]	; 0x30
 80039da:	462b      	mov	r3, r5
 80039dc:	460a      	mov	r2, r1
 80039de:	eb42 0303 	adc.w	r3, r2, r3
 80039e2:	637b      	str	r3, [r7, #52]	; 0x34
 80039e4:	f04f 0200 	mov.w	r2, #0
 80039e8:	f04f 0300 	mov.w	r3, #0
 80039ec:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80039f0:	4629      	mov	r1, r5
 80039f2:	024b      	lsls	r3, r1, #9
 80039f4:	4621      	mov	r1, r4
 80039f6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80039fa:	4621      	mov	r1, r4
 80039fc:	024a      	lsls	r2, r1, #9
 80039fe:	4610      	mov	r0, r2
 8003a00:	4619      	mov	r1, r3
 8003a02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003a06:	2200      	movs	r2, #0
 8003a08:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003a0c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003a10:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003a14:	f7fc fc54 	bl	80002c0 <__aeabi_uldivmod>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	460b      	mov	r3, r1
 8003a1c:	4613      	mov	r3, r2
 8003a1e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003a22:	e067      	b.n	8003af4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a24:	4b75      	ldr	r3, [pc, #468]	; (8003bfc <HAL_RCC_GetSysClockFreq+0x354>)
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	099b      	lsrs	r3, r3, #6
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003a30:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003a34:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003a38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a3c:	67bb      	str	r3, [r7, #120]	; 0x78
 8003a3e:	2300      	movs	r3, #0
 8003a40:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003a42:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8003a46:	4622      	mov	r2, r4
 8003a48:	462b      	mov	r3, r5
 8003a4a:	f04f 0000 	mov.w	r0, #0
 8003a4e:	f04f 0100 	mov.w	r1, #0
 8003a52:	0159      	lsls	r1, r3, #5
 8003a54:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a58:	0150      	lsls	r0, r2, #5
 8003a5a:	4602      	mov	r2, r0
 8003a5c:	460b      	mov	r3, r1
 8003a5e:	4621      	mov	r1, r4
 8003a60:	1a51      	subs	r1, r2, r1
 8003a62:	62b9      	str	r1, [r7, #40]	; 0x28
 8003a64:	4629      	mov	r1, r5
 8003a66:	eb63 0301 	sbc.w	r3, r3, r1
 8003a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a6c:	f04f 0200 	mov.w	r2, #0
 8003a70:	f04f 0300 	mov.w	r3, #0
 8003a74:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003a78:	4649      	mov	r1, r9
 8003a7a:	018b      	lsls	r3, r1, #6
 8003a7c:	4641      	mov	r1, r8
 8003a7e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003a82:	4641      	mov	r1, r8
 8003a84:	018a      	lsls	r2, r1, #6
 8003a86:	4641      	mov	r1, r8
 8003a88:	ebb2 0a01 	subs.w	sl, r2, r1
 8003a8c:	4649      	mov	r1, r9
 8003a8e:	eb63 0b01 	sbc.w	fp, r3, r1
 8003a92:	f04f 0200 	mov.w	r2, #0
 8003a96:	f04f 0300 	mov.w	r3, #0
 8003a9a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003a9e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003aa2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003aa6:	4692      	mov	sl, r2
 8003aa8:	469b      	mov	fp, r3
 8003aaa:	4623      	mov	r3, r4
 8003aac:	eb1a 0303 	adds.w	r3, sl, r3
 8003ab0:	623b      	str	r3, [r7, #32]
 8003ab2:	462b      	mov	r3, r5
 8003ab4:	eb4b 0303 	adc.w	r3, fp, r3
 8003ab8:	627b      	str	r3, [r7, #36]	; 0x24
 8003aba:	f04f 0200 	mov.w	r2, #0
 8003abe:	f04f 0300 	mov.w	r3, #0
 8003ac2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003ac6:	4629      	mov	r1, r5
 8003ac8:	028b      	lsls	r3, r1, #10
 8003aca:	4621      	mov	r1, r4
 8003acc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ad0:	4621      	mov	r1, r4
 8003ad2:	028a      	lsls	r2, r1, #10
 8003ad4:	4610      	mov	r0, r2
 8003ad6:	4619      	mov	r1, r3
 8003ad8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003adc:	2200      	movs	r2, #0
 8003ade:	673b      	str	r3, [r7, #112]	; 0x70
 8003ae0:	677a      	str	r2, [r7, #116]	; 0x74
 8003ae2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003ae6:	f7fc fbeb 	bl	80002c0 <__aeabi_uldivmod>
 8003aea:	4602      	mov	r2, r0
 8003aec:	460b      	mov	r3, r1
 8003aee:	4613      	mov	r3, r2
 8003af0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003af4:	4b41      	ldr	r3, [pc, #260]	; (8003bfc <HAL_RCC_GetSysClockFreq+0x354>)
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	0c1b      	lsrs	r3, r3, #16
 8003afa:	f003 0303 	and.w	r3, r3, #3
 8003afe:	3301      	adds	r3, #1
 8003b00:	005b      	lsls	r3, r3, #1
 8003b02:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8003b06:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003b0a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003b0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b12:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003b16:	e0eb      	b.n	8003cf0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b18:	4b38      	ldr	r3, [pc, #224]	; (8003bfc <HAL_RCC_GetSysClockFreq+0x354>)
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b20:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b24:	4b35      	ldr	r3, [pc, #212]	; (8003bfc <HAL_RCC_GetSysClockFreq+0x354>)
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d06b      	beq.n	8003c08 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b30:	4b32      	ldr	r3, [pc, #200]	; (8003bfc <HAL_RCC_GetSysClockFreq+0x354>)
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	099b      	lsrs	r3, r3, #6
 8003b36:	2200      	movs	r2, #0
 8003b38:	66bb      	str	r3, [r7, #104]	; 0x68
 8003b3a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003b3c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003b3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b42:	663b      	str	r3, [r7, #96]	; 0x60
 8003b44:	2300      	movs	r3, #0
 8003b46:	667b      	str	r3, [r7, #100]	; 0x64
 8003b48:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003b4c:	4622      	mov	r2, r4
 8003b4e:	462b      	mov	r3, r5
 8003b50:	f04f 0000 	mov.w	r0, #0
 8003b54:	f04f 0100 	mov.w	r1, #0
 8003b58:	0159      	lsls	r1, r3, #5
 8003b5a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b5e:	0150      	lsls	r0, r2, #5
 8003b60:	4602      	mov	r2, r0
 8003b62:	460b      	mov	r3, r1
 8003b64:	4621      	mov	r1, r4
 8003b66:	1a51      	subs	r1, r2, r1
 8003b68:	61b9      	str	r1, [r7, #24]
 8003b6a:	4629      	mov	r1, r5
 8003b6c:	eb63 0301 	sbc.w	r3, r3, r1
 8003b70:	61fb      	str	r3, [r7, #28]
 8003b72:	f04f 0200 	mov.w	r2, #0
 8003b76:	f04f 0300 	mov.w	r3, #0
 8003b7a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003b7e:	4659      	mov	r1, fp
 8003b80:	018b      	lsls	r3, r1, #6
 8003b82:	4651      	mov	r1, sl
 8003b84:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003b88:	4651      	mov	r1, sl
 8003b8a:	018a      	lsls	r2, r1, #6
 8003b8c:	4651      	mov	r1, sl
 8003b8e:	ebb2 0801 	subs.w	r8, r2, r1
 8003b92:	4659      	mov	r1, fp
 8003b94:	eb63 0901 	sbc.w	r9, r3, r1
 8003b98:	f04f 0200 	mov.w	r2, #0
 8003b9c:	f04f 0300 	mov.w	r3, #0
 8003ba0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003ba4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003ba8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003bac:	4690      	mov	r8, r2
 8003bae:	4699      	mov	r9, r3
 8003bb0:	4623      	mov	r3, r4
 8003bb2:	eb18 0303 	adds.w	r3, r8, r3
 8003bb6:	613b      	str	r3, [r7, #16]
 8003bb8:	462b      	mov	r3, r5
 8003bba:	eb49 0303 	adc.w	r3, r9, r3
 8003bbe:	617b      	str	r3, [r7, #20]
 8003bc0:	f04f 0200 	mov.w	r2, #0
 8003bc4:	f04f 0300 	mov.w	r3, #0
 8003bc8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003bcc:	4629      	mov	r1, r5
 8003bce:	024b      	lsls	r3, r1, #9
 8003bd0:	4621      	mov	r1, r4
 8003bd2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003bd6:	4621      	mov	r1, r4
 8003bd8:	024a      	lsls	r2, r1, #9
 8003bda:	4610      	mov	r0, r2
 8003bdc:	4619      	mov	r1, r3
 8003bde:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003be2:	2200      	movs	r2, #0
 8003be4:	65bb      	str	r3, [r7, #88]	; 0x58
 8003be6:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003be8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003bec:	f7fc fb68 	bl	80002c0 <__aeabi_uldivmod>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	460b      	mov	r3, r1
 8003bf4:	4613      	mov	r3, r2
 8003bf6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003bfa:	e065      	b.n	8003cc8 <HAL_RCC_GetSysClockFreq+0x420>
 8003bfc:	40023800 	.word	0x40023800
 8003c00:	00f42400 	.word	0x00f42400
 8003c04:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c08:	4b3d      	ldr	r3, [pc, #244]	; (8003d00 <HAL_RCC_GetSysClockFreq+0x458>)
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	099b      	lsrs	r3, r3, #6
 8003c0e:	2200      	movs	r2, #0
 8003c10:	4618      	mov	r0, r3
 8003c12:	4611      	mov	r1, r2
 8003c14:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003c18:	653b      	str	r3, [r7, #80]	; 0x50
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	657b      	str	r3, [r7, #84]	; 0x54
 8003c1e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8003c22:	4642      	mov	r2, r8
 8003c24:	464b      	mov	r3, r9
 8003c26:	f04f 0000 	mov.w	r0, #0
 8003c2a:	f04f 0100 	mov.w	r1, #0
 8003c2e:	0159      	lsls	r1, r3, #5
 8003c30:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c34:	0150      	lsls	r0, r2, #5
 8003c36:	4602      	mov	r2, r0
 8003c38:	460b      	mov	r3, r1
 8003c3a:	4641      	mov	r1, r8
 8003c3c:	1a51      	subs	r1, r2, r1
 8003c3e:	60b9      	str	r1, [r7, #8]
 8003c40:	4649      	mov	r1, r9
 8003c42:	eb63 0301 	sbc.w	r3, r3, r1
 8003c46:	60fb      	str	r3, [r7, #12]
 8003c48:	f04f 0200 	mov.w	r2, #0
 8003c4c:	f04f 0300 	mov.w	r3, #0
 8003c50:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003c54:	4659      	mov	r1, fp
 8003c56:	018b      	lsls	r3, r1, #6
 8003c58:	4651      	mov	r1, sl
 8003c5a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c5e:	4651      	mov	r1, sl
 8003c60:	018a      	lsls	r2, r1, #6
 8003c62:	4651      	mov	r1, sl
 8003c64:	1a54      	subs	r4, r2, r1
 8003c66:	4659      	mov	r1, fp
 8003c68:	eb63 0501 	sbc.w	r5, r3, r1
 8003c6c:	f04f 0200 	mov.w	r2, #0
 8003c70:	f04f 0300 	mov.w	r3, #0
 8003c74:	00eb      	lsls	r3, r5, #3
 8003c76:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c7a:	00e2      	lsls	r2, r4, #3
 8003c7c:	4614      	mov	r4, r2
 8003c7e:	461d      	mov	r5, r3
 8003c80:	4643      	mov	r3, r8
 8003c82:	18e3      	adds	r3, r4, r3
 8003c84:	603b      	str	r3, [r7, #0]
 8003c86:	464b      	mov	r3, r9
 8003c88:	eb45 0303 	adc.w	r3, r5, r3
 8003c8c:	607b      	str	r3, [r7, #4]
 8003c8e:	f04f 0200 	mov.w	r2, #0
 8003c92:	f04f 0300 	mov.w	r3, #0
 8003c96:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003c9a:	4629      	mov	r1, r5
 8003c9c:	028b      	lsls	r3, r1, #10
 8003c9e:	4621      	mov	r1, r4
 8003ca0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ca4:	4621      	mov	r1, r4
 8003ca6:	028a      	lsls	r2, r1, #10
 8003ca8:	4610      	mov	r0, r2
 8003caa:	4619      	mov	r1, r3
 8003cac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	64bb      	str	r3, [r7, #72]	; 0x48
 8003cb4:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003cb6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003cba:	f7fc fb01 	bl	80002c0 <__aeabi_uldivmod>
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	460b      	mov	r3, r1
 8003cc2:	4613      	mov	r3, r2
 8003cc4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003cc8:	4b0d      	ldr	r3, [pc, #52]	; (8003d00 <HAL_RCC_GetSysClockFreq+0x458>)
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	0f1b      	lsrs	r3, r3, #28
 8003cce:	f003 0307 	and.w	r3, r3, #7
 8003cd2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8003cd6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003cda:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003cde:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ce2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003ce6:	e003      	b.n	8003cf0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ce8:	4b06      	ldr	r3, [pc, #24]	; (8003d04 <HAL_RCC_GetSysClockFreq+0x45c>)
 8003cea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003cee:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003cf0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	37b8      	adds	r7, #184	; 0xb8
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003cfe:	bf00      	nop
 8003d00:	40023800 	.word	0x40023800
 8003d04:	00f42400 	.word	0x00f42400

08003d08 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b086      	sub	sp, #24
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d101      	bne.n	8003d1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	e28d      	b.n	8004236 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f003 0301 	and.w	r3, r3, #1
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	f000 8083 	beq.w	8003e2e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003d28:	4b94      	ldr	r3, [pc, #592]	; (8003f7c <HAL_RCC_OscConfig+0x274>)
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	f003 030c 	and.w	r3, r3, #12
 8003d30:	2b04      	cmp	r3, #4
 8003d32:	d019      	beq.n	8003d68 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003d34:	4b91      	ldr	r3, [pc, #580]	; (8003f7c <HAL_RCC_OscConfig+0x274>)
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003d3c:	2b08      	cmp	r3, #8
 8003d3e:	d106      	bne.n	8003d4e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003d40:	4b8e      	ldr	r3, [pc, #568]	; (8003f7c <HAL_RCC_OscConfig+0x274>)
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d48:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d4c:	d00c      	beq.n	8003d68 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d4e:	4b8b      	ldr	r3, [pc, #556]	; (8003f7c <HAL_RCC_OscConfig+0x274>)
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003d56:	2b0c      	cmp	r3, #12
 8003d58:	d112      	bne.n	8003d80 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d5a:	4b88      	ldr	r3, [pc, #544]	; (8003f7c <HAL_RCC_OscConfig+0x274>)
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d62:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d66:	d10b      	bne.n	8003d80 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d68:	4b84      	ldr	r3, [pc, #528]	; (8003f7c <HAL_RCC_OscConfig+0x274>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d05b      	beq.n	8003e2c <HAL_RCC_OscConfig+0x124>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d157      	bne.n	8003e2c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e25a      	b.n	8004236 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d88:	d106      	bne.n	8003d98 <HAL_RCC_OscConfig+0x90>
 8003d8a:	4b7c      	ldr	r3, [pc, #496]	; (8003f7c <HAL_RCC_OscConfig+0x274>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a7b      	ldr	r2, [pc, #492]	; (8003f7c <HAL_RCC_OscConfig+0x274>)
 8003d90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d94:	6013      	str	r3, [r2, #0]
 8003d96:	e01d      	b.n	8003dd4 <HAL_RCC_OscConfig+0xcc>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003da0:	d10c      	bne.n	8003dbc <HAL_RCC_OscConfig+0xb4>
 8003da2:	4b76      	ldr	r3, [pc, #472]	; (8003f7c <HAL_RCC_OscConfig+0x274>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a75      	ldr	r2, [pc, #468]	; (8003f7c <HAL_RCC_OscConfig+0x274>)
 8003da8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003dac:	6013      	str	r3, [r2, #0]
 8003dae:	4b73      	ldr	r3, [pc, #460]	; (8003f7c <HAL_RCC_OscConfig+0x274>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a72      	ldr	r2, [pc, #456]	; (8003f7c <HAL_RCC_OscConfig+0x274>)
 8003db4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003db8:	6013      	str	r3, [r2, #0]
 8003dba:	e00b      	b.n	8003dd4 <HAL_RCC_OscConfig+0xcc>
 8003dbc:	4b6f      	ldr	r3, [pc, #444]	; (8003f7c <HAL_RCC_OscConfig+0x274>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a6e      	ldr	r2, [pc, #440]	; (8003f7c <HAL_RCC_OscConfig+0x274>)
 8003dc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dc6:	6013      	str	r3, [r2, #0]
 8003dc8:	4b6c      	ldr	r3, [pc, #432]	; (8003f7c <HAL_RCC_OscConfig+0x274>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a6b      	ldr	r2, [pc, #428]	; (8003f7c <HAL_RCC_OscConfig+0x274>)
 8003dce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003dd2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d013      	beq.n	8003e04 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ddc:	f7fd ffc4 	bl	8001d68 <HAL_GetTick>
 8003de0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003de2:	e008      	b.n	8003df6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003de4:	f7fd ffc0 	bl	8001d68 <HAL_GetTick>
 8003de8:	4602      	mov	r2, r0
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	1ad3      	subs	r3, r2, r3
 8003dee:	2b64      	cmp	r3, #100	; 0x64
 8003df0:	d901      	bls.n	8003df6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003df2:	2303      	movs	r3, #3
 8003df4:	e21f      	b.n	8004236 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003df6:	4b61      	ldr	r3, [pc, #388]	; (8003f7c <HAL_RCC_OscConfig+0x274>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d0f0      	beq.n	8003de4 <HAL_RCC_OscConfig+0xdc>
 8003e02:	e014      	b.n	8003e2e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e04:	f7fd ffb0 	bl	8001d68 <HAL_GetTick>
 8003e08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e0a:	e008      	b.n	8003e1e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e0c:	f7fd ffac 	bl	8001d68 <HAL_GetTick>
 8003e10:	4602      	mov	r2, r0
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	1ad3      	subs	r3, r2, r3
 8003e16:	2b64      	cmp	r3, #100	; 0x64
 8003e18:	d901      	bls.n	8003e1e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003e1a:	2303      	movs	r3, #3
 8003e1c:	e20b      	b.n	8004236 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e1e:	4b57      	ldr	r3, [pc, #348]	; (8003f7c <HAL_RCC_OscConfig+0x274>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d1f0      	bne.n	8003e0c <HAL_RCC_OscConfig+0x104>
 8003e2a:	e000      	b.n	8003e2e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f003 0302 	and.w	r3, r3, #2
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d06f      	beq.n	8003f1a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003e3a:	4b50      	ldr	r3, [pc, #320]	; (8003f7c <HAL_RCC_OscConfig+0x274>)
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	f003 030c 	and.w	r3, r3, #12
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d017      	beq.n	8003e76 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003e46:	4b4d      	ldr	r3, [pc, #308]	; (8003f7c <HAL_RCC_OscConfig+0x274>)
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003e4e:	2b08      	cmp	r3, #8
 8003e50:	d105      	bne.n	8003e5e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003e52:	4b4a      	ldr	r3, [pc, #296]	; (8003f7c <HAL_RCC_OscConfig+0x274>)
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d00b      	beq.n	8003e76 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e5e:	4b47      	ldr	r3, [pc, #284]	; (8003f7c <HAL_RCC_OscConfig+0x274>)
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003e66:	2b0c      	cmp	r3, #12
 8003e68:	d11c      	bne.n	8003ea4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e6a:	4b44      	ldr	r3, [pc, #272]	; (8003f7c <HAL_RCC_OscConfig+0x274>)
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d116      	bne.n	8003ea4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e76:	4b41      	ldr	r3, [pc, #260]	; (8003f7c <HAL_RCC_OscConfig+0x274>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 0302 	and.w	r3, r3, #2
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d005      	beq.n	8003e8e <HAL_RCC_OscConfig+0x186>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	68db      	ldr	r3, [r3, #12]
 8003e86:	2b01      	cmp	r3, #1
 8003e88:	d001      	beq.n	8003e8e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e1d3      	b.n	8004236 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e8e:	4b3b      	ldr	r3, [pc, #236]	; (8003f7c <HAL_RCC_OscConfig+0x274>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	691b      	ldr	r3, [r3, #16]
 8003e9a:	00db      	lsls	r3, r3, #3
 8003e9c:	4937      	ldr	r1, [pc, #220]	; (8003f7c <HAL_RCC_OscConfig+0x274>)
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ea2:	e03a      	b.n	8003f1a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d020      	beq.n	8003eee <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003eac:	4b34      	ldr	r3, [pc, #208]	; (8003f80 <HAL_RCC_OscConfig+0x278>)
 8003eae:	2201      	movs	r2, #1
 8003eb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eb2:	f7fd ff59 	bl	8001d68 <HAL_GetTick>
 8003eb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003eb8:	e008      	b.n	8003ecc <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003eba:	f7fd ff55 	bl	8001d68 <HAL_GetTick>
 8003ebe:	4602      	mov	r2, r0
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	1ad3      	subs	r3, r2, r3
 8003ec4:	2b02      	cmp	r3, #2
 8003ec6:	d901      	bls.n	8003ecc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003ec8:	2303      	movs	r3, #3
 8003eca:	e1b4      	b.n	8004236 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ecc:	4b2b      	ldr	r3, [pc, #172]	; (8003f7c <HAL_RCC_OscConfig+0x274>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 0302 	and.w	r3, r3, #2
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d0f0      	beq.n	8003eba <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ed8:	4b28      	ldr	r3, [pc, #160]	; (8003f7c <HAL_RCC_OscConfig+0x274>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	691b      	ldr	r3, [r3, #16]
 8003ee4:	00db      	lsls	r3, r3, #3
 8003ee6:	4925      	ldr	r1, [pc, #148]	; (8003f7c <HAL_RCC_OscConfig+0x274>)
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	600b      	str	r3, [r1, #0]
 8003eec:	e015      	b.n	8003f1a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003eee:	4b24      	ldr	r3, [pc, #144]	; (8003f80 <HAL_RCC_OscConfig+0x278>)
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ef4:	f7fd ff38 	bl	8001d68 <HAL_GetTick>
 8003ef8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003efa:	e008      	b.n	8003f0e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003efc:	f7fd ff34 	bl	8001d68 <HAL_GetTick>
 8003f00:	4602      	mov	r2, r0
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	1ad3      	subs	r3, r2, r3
 8003f06:	2b02      	cmp	r3, #2
 8003f08:	d901      	bls.n	8003f0e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003f0a:	2303      	movs	r3, #3
 8003f0c:	e193      	b.n	8004236 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f0e:	4b1b      	ldr	r3, [pc, #108]	; (8003f7c <HAL_RCC_OscConfig+0x274>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f003 0302 	and.w	r3, r3, #2
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d1f0      	bne.n	8003efc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 0308 	and.w	r3, r3, #8
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d036      	beq.n	8003f94 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	695b      	ldr	r3, [r3, #20]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d016      	beq.n	8003f5c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f2e:	4b15      	ldr	r3, [pc, #84]	; (8003f84 <HAL_RCC_OscConfig+0x27c>)
 8003f30:	2201      	movs	r2, #1
 8003f32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f34:	f7fd ff18 	bl	8001d68 <HAL_GetTick>
 8003f38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f3a:	e008      	b.n	8003f4e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f3c:	f7fd ff14 	bl	8001d68 <HAL_GetTick>
 8003f40:	4602      	mov	r2, r0
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	1ad3      	subs	r3, r2, r3
 8003f46:	2b02      	cmp	r3, #2
 8003f48:	d901      	bls.n	8003f4e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003f4a:	2303      	movs	r3, #3
 8003f4c:	e173      	b.n	8004236 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f4e:	4b0b      	ldr	r3, [pc, #44]	; (8003f7c <HAL_RCC_OscConfig+0x274>)
 8003f50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f52:	f003 0302 	and.w	r3, r3, #2
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d0f0      	beq.n	8003f3c <HAL_RCC_OscConfig+0x234>
 8003f5a:	e01b      	b.n	8003f94 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f5c:	4b09      	ldr	r3, [pc, #36]	; (8003f84 <HAL_RCC_OscConfig+0x27c>)
 8003f5e:	2200      	movs	r2, #0
 8003f60:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f62:	f7fd ff01 	bl	8001d68 <HAL_GetTick>
 8003f66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f68:	e00e      	b.n	8003f88 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f6a:	f7fd fefd 	bl	8001d68 <HAL_GetTick>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	1ad3      	subs	r3, r2, r3
 8003f74:	2b02      	cmp	r3, #2
 8003f76:	d907      	bls.n	8003f88 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003f78:	2303      	movs	r3, #3
 8003f7a:	e15c      	b.n	8004236 <HAL_RCC_OscConfig+0x52e>
 8003f7c:	40023800 	.word	0x40023800
 8003f80:	42470000 	.word	0x42470000
 8003f84:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f88:	4b8a      	ldr	r3, [pc, #552]	; (80041b4 <HAL_RCC_OscConfig+0x4ac>)
 8003f8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f8c:	f003 0302 	and.w	r3, r3, #2
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d1ea      	bne.n	8003f6a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f003 0304 	and.w	r3, r3, #4
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	f000 8097 	beq.w	80040d0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fa6:	4b83      	ldr	r3, [pc, #524]	; (80041b4 <HAL_RCC_OscConfig+0x4ac>)
 8003fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003faa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d10f      	bne.n	8003fd2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	60bb      	str	r3, [r7, #8]
 8003fb6:	4b7f      	ldr	r3, [pc, #508]	; (80041b4 <HAL_RCC_OscConfig+0x4ac>)
 8003fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fba:	4a7e      	ldr	r2, [pc, #504]	; (80041b4 <HAL_RCC_OscConfig+0x4ac>)
 8003fbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fc0:	6413      	str	r3, [r2, #64]	; 0x40
 8003fc2:	4b7c      	ldr	r3, [pc, #496]	; (80041b4 <HAL_RCC_OscConfig+0x4ac>)
 8003fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fca:	60bb      	str	r3, [r7, #8]
 8003fcc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fd2:	4b79      	ldr	r3, [pc, #484]	; (80041b8 <HAL_RCC_OscConfig+0x4b0>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d118      	bne.n	8004010 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003fde:	4b76      	ldr	r3, [pc, #472]	; (80041b8 <HAL_RCC_OscConfig+0x4b0>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a75      	ldr	r2, [pc, #468]	; (80041b8 <HAL_RCC_OscConfig+0x4b0>)
 8003fe4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fe8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fea:	f7fd febd 	bl	8001d68 <HAL_GetTick>
 8003fee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ff0:	e008      	b.n	8004004 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ff2:	f7fd feb9 	bl	8001d68 <HAL_GetTick>
 8003ff6:	4602      	mov	r2, r0
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	1ad3      	subs	r3, r2, r3
 8003ffc:	2b02      	cmp	r3, #2
 8003ffe:	d901      	bls.n	8004004 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004000:	2303      	movs	r3, #3
 8004002:	e118      	b.n	8004236 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004004:	4b6c      	ldr	r3, [pc, #432]	; (80041b8 <HAL_RCC_OscConfig+0x4b0>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800400c:	2b00      	cmp	r3, #0
 800400e:	d0f0      	beq.n	8003ff2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	2b01      	cmp	r3, #1
 8004016:	d106      	bne.n	8004026 <HAL_RCC_OscConfig+0x31e>
 8004018:	4b66      	ldr	r3, [pc, #408]	; (80041b4 <HAL_RCC_OscConfig+0x4ac>)
 800401a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800401c:	4a65      	ldr	r2, [pc, #404]	; (80041b4 <HAL_RCC_OscConfig+0x4ac>)
 800401e:	f043 0301 	orr.w	r3, r3, #1
 8004022:	6713      	str	r3, [r2, #112]	; 0x70
 8004024:	e01c      	b.n	8004060 <HAL_RCC_OscConfig+0x358>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	2b05      	cmp	r3, #5
 800402c:	d10c      	bne.n	8004048 <HAL_RCC_OscConfig+0x340>
 800402e:	4b61      	ldr	r3, [pc, #388]	; (80041b4 <HAL_RCC_OscConfig+0x4ac>)
 8004030:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004032:	4a60      	ldr	r2, [pc, #384]	; (80041b4 <HAL_RCC_OscConfig+0x4ac>)
 8004034:	f043 0304 	orr.w	r3, r3, #4
 8004038:	6713      	str	r3, [r2, #112]	; 0x70
 800403a:	4b5e      	ldr	r3, [pc, #376]	; (80041b4 <HAL_RCC_OscConfig+0x4ac>)
 800403c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800403e:	4a5d      	ldr	r2, [pc, #372]	; (80041b4 <HAL_RCC_OscConfig+0x4ac>)
 8004040:	f043 0301 	orr.w	r3, r3, #1
 8004044:	6713      	str	r3, [r2, #112]	; 0x70
 8004046:	e00b      	b.n	8004060 <HAL_RCC_OscConfig+0x358>
 8004048:	4b5a      	ldr	r3, [pc, #360]	; (80041b4 <HAL_RCC_OscConfig+0x4ac>)
 800404a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800404c:	4a59      	ldr	r2, [pc, #356]	; (80041b4 <HAL_RCC_OscConfig+0x4ac>)
 800404e:	f023 0301 	bic.w	r3, r3, #1
 8004052:	6713      	str	r3, [r2, #112]	; 0x70
 8004054:	4b57      	ldr	r3, [pc, #348]	; (80041b4 <HAL_RCC_OscConfig+0x4ac>)
 8004056:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004058:	4a56      	ldr	r2, [pc, #344]	; (80041b4 <HAL_RCC_OscConfig+0x4ac>)
 800405a:	f023 0304 	bic.w	r3, r3, #4
 800405e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d015      	beq.n	8004094 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004068:	f7fd fe7e 	bl	8001d68 <HAL_GetTick>
 800406c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800406e:	e00a      	b.n	8004086 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004070:	f7fd fe7a 	bl	8001d68 <HAL_GetTick>
 8004074:	4602      	mov	r2, r0
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	1ad3      	subs	r3, r2, r3
 800407a:	f241 3288 	movw	r2, #5000	; 0x1388
 800407e:	4293      	cmp	r3, r2
 8004080:	d901      	bls.n	8004086 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004082:	2303      	movs	r3, #3
 8004084:	e0d7      	b.n	8004236 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004086:	4b4b      	ldr	r3, [pc, #300]	; (80041b4 <HAL_RCC_OscConfig+0x4ac>)
 8004088:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800408a:	f003 0302 	and.w	r3, r3, #2
 800408e:	2b00      	cmp	r3, #0
 8004090:	d0ee      	beq.n	8004070 <HAL_RCC_OscConfig+0x368>
 8004092:	e014      	b.n	80040be <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004094:	f7fd fe68 	bl	8001d68 <HAL_GetTick>
 8004098:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800409a:	e00a      	b.n	80040b2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800409c:	f7fd fe64 	bl	8001d68 <HAL_GetTick>
 80040a0:	4602      	mov	r2, r0
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	1ad3      	subs	r3, r2, r3
 80040a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d901      	bls.n	80040b2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80040ae:	2303      	movs	r3, #3
 80040b0:	e0c1      	b.n	8004236 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040b2:	4b40      	ldr	r3, [pc, #256]	; (80041b4 <HAL_RCC_OscConfig+0x4ac>)
 80040b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040b6:	f003 0302 	and.w	r3, r3, #2
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d1ee      	bne.n	800409c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80040be:	7dfb      	ldrb	r3, [r7, #23]
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	d105      	bne.n	80040d0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040c4:	4b3b      	ldr	r3, [pc, #236]	; (80041b4 <HAL_RCC_OscConfig+0x4ac>)
 80040c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c8:	4a3a      	ldr	r2, [pc, #232]	; (80041b4 <HAL_RCC_OscConfig+0x4ac>)
 80040ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040ce:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	699b      	ldr	r3, [r3, #24]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	f000 80ad 	beq.w	8004234 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80040da:	4b36      	ldr	r3, [pc, #216]	; (80041b4 <HAL_RCC_OscConfig+0x4ac>)
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	f003 030c 	and.w	r3, r3, #12
 80040e2:	2b08      	cmp	r3, #8
 80040e4:	d060      	beq.n	80041a8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	699b      	ldr	r3, [r3, #24]
 80040ea:	2b02      	cmp	r3, #2
 80040ec:	d145      	bne.n	800417a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040ee:	4b33      	ldr	r3, [pc, #204]	; (80041bc <HAL_RCC_OscConfig+0x4b4>)
 80040f0:	2200      	movs	r2, #0
 80040f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040f4:	f7fd fe38 	bl	8001d68 <HAL_GetTick>
 80040f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040fa:	e008      	b.n	800410e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040fc:	f7fd fe34 	bl	8001d68 <HAL_GetTick>
 8004100:	4602      	mov	r2, r0
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	1ad3      	subs	r3, r2, r3
 8004106:	2b02      	cmp	r3, #2
 8004108:	d901      	bls.n	800410e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800410a:	2303      	movs	r3, #3
 800410c:	e093      	b.n	8004236 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800410e:	4b29      	ldr	r3, [pc, #164]	; (80041b4 <HAL_RCC_OscConfig+0x4ac>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004116:	2b00      	cmp	r3, #0
 8004118:	d1f0      	bne.n	80040fc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	69da      	ldr	r2, [r3, #28]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6a1b      	ldr	r3, [r3, #32]
 8004122:	431a      	orrs	r2, r3
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004128:	019b      	lsls	r3, r3, #6
 800412a:	431a      	orrs	r2, r3
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004130:	085b      	lsrs	r3, r3, #1
 8004132:	3b01      	subs	r3, #1
 8004134:	041b      	lsls	r3, r3, #16
 8004136:	431a      	orrs	r2, r3
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800413c:	061b      	lsls	r3, r3, #24
 800413e:	431a      	orrs	r2, r3
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004144:	071b      	lsls	r3, r3, #28
 8004146:	491b      	ldr	r1, [pc, #108]	; (80041b4 <HAL_RCC_OscConfig+0x4ac>)
 8004148:	4313      	orrs	r3, r2
 800414a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800414c:	4b1b      	ldr	r3, [pc, #108]	; (80041bc <HAL_RCC_OscConfig+0x4b4>)
 800414e:	2201      	movs	r2, #1
 8004150:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004152:	f7fd fe09 	bl	8001d68 <HAL_GetTick>
 8004156:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004158:	e008      	b.n	800416c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800415a:	f7fd fe05 	bl	8001d68 <HAL_GetTick>
 800415e:	4602      	mov	r2, r0
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	1ad3      	subs	r3, r2, r3
 8004164:	2b02      	cmp	r3, #2
 8004166:	d901      	bls.n	800416c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004168:	2303      	movs	r3, #3
 800416a:	e064      	b.n	8004236 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800416c:	4b11      	ldr	r3, [pc, #68]	; (80041b4 <HAL_RCC_OscConfig+0x4ac>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004174:	2b00      	cmp	r3, #0
 8004176:	d0f0      	beq.n	800415a <HAL_RCC_OscConfig+0x452>
 8004178:	e05c      	b.n	8004234 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800417a:	4b10      	ldr	r3, [pc, #64]	; (80041bc <HAL_RCC_OscConfig+0x4b4>)
 800417c:	2200      	movs	r2, #0
 800417e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004180:	f7fd fdf2 	bl	8001d68 <HAL_GetTick>
 8004184:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004186:	e008      	b.n	800419a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004188:	f7fd fdee 	bl	8001d68 <HAL_GetTick>
 800418c:	4602      	mov	r2, r0
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	1ad3      	subs	r3, r2, r3
 8004192:	2b02      	cmp	r3, #2
 8004194:	d901      	bls.n	800419a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004196:	2303      	movs	r3, #3
 8004198:	e04d      	b.n	8004236 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800419a:	4b06      	ldr	r3, [pc, #24]	; (80041b4 <HAL_RCC_OscConfig+0x4ac>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d1f0      	bne.n	8004188 <HAL_RCC_OscConfig+0x480>
 80041a6:	e045      	b.n	8004234 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	699b      	ldr	r3, [r3, #24]
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d107      	bne.n	80041c0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	e040      	b.n	8004236 <HAL_RCC_OscConfig+0x52e>
 80041b4:	40023800 	.word	0x40023800
 80041b8:	40007000 	.word	0x40007000
 80041bc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80041c0:	4b1f      	ldr	r3, [pc, #124]	; (8004240 <HAL_RCC_OscConfig+0x538>)
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	699b      	ldr	r3, [r3, #24]
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	d030      	beq.n	8004230 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041d8:	429a      	cmp	r2, r3
 80041da:	d129      	bne.n	8004230 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041e6:	429a      	cmp	r2, r3
 80041e8:	d122      	bne.n	8004230 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80041ea:	68fa      	ldr	r2, [r7, #12]
 80041ec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80041f0:	4013      	ands	r3, r2
 80041f2:	687a      	ldr	r2, [r7, #4]
 80041f4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80041f6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d119      	bne.n	8004230 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004206:	085b      	lsrs	r3, r3, #1
 8004208:	3b01      	subs	r3, #1
 800420a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800420c:	429a      	cmp	r2, r3
 800420e:	d10f      	bne.n	8004230 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800421a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800421c:	429a      	cmp	r2, r3
 800421e:	d107      	bne.n	8004230 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800422a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800422c:	429a      	cmp	r2, r3
 800422e:	d001      	beq.n	8004234 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	e000      	b.n	8004236 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004234:	2300      	movs	r3, #0
}
 8004236:	4618      	mov	r0, r3
 8004238:	3718      	adds	r7, #24
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}
 800423e:	bf00      	nop
 8004240:	40023800 	.word	0x40023800

08004244 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b082      	sub	sp, #8
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d101      	bne.n	8004256 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004252:	2301      	movs	r3, #1
 8004254:	e041      	b.n	80042da <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800425c:	b2db      	uxtb	r3, r3
 800425e:	2b00      	cmp	r3, #0
 8004260:	d106      	bne.n	8004270 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2200      	movs	r2, #0
 8004266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f7fd fb7e 	bl	800196c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2202      	movs	r2, #2
 8004274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	3304      	adds	r3, #4
 8004280:	4619      	mov	r1, r3
 8004282:	4610      	mov	r0, r2
 8004284:	f000 ffc2 	bl	800520c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2201      	movs	r2, #1
 800428c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2201      	movs	r2, #1
 8004294:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2201      	movs	r2, #1
 800429c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2201      	movs	r2, #1
 80042a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2201      	movs	r2, #1
 80042ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2201      	movs	r2, #1
 80042b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2201      	movs	r2, #1
 80042bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2201      	movs	r2, #1
 80042c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2201      	movs	r2, #1
 80042cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2201      	movs	r2, #1
 80042d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80042d8:	2300      	movs	r3, #0
}
 80042da:	4618      	mov	r0, r3
 80042dc:	3708      	adds	r7, #8
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}
	...

080042e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b085      	sub	sp, #20
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042f2:	b2db      	uxtb	r3, r3
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d001      	beq.n	80042fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	e04e      	b.n	800439a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2202      	movs	r2, #2
 8004300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	68da      	ldr	r2, [r3, #12]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f042 0201 	orr.w	r2, r2, #1
 8004312:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a23      	ldr	r2, [pc, #140]	; (80043a8 <HAL_TIM_Base_Start_IT+0xc4>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d022      	beq.n	8004364 <HAL_TIM_Base_Start_IT+0x80>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004326:	d01d      	beq.n	8004364 <HAL_TIM_Base_Start_IT+0x80>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a1f      	ldr	r2, [pc, #124]	; (80043ac <HAL_TIM_Base_Start_IT+0xc8>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d018      	beq.n	8004364 <HAL_TIM_Base_Start_IT+0x80>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a1e      	ldr	r2, [pc, #120]	; (80043b0 <HAL_TIM_Base_Start_IT+0xcc>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d013      	beq.n	8004364 <HAL_TIM_Base_Start_IT+0x80>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a1c      	ldr	r2, [pc, #112]	; (80043b4 <HAL_TIM_Base_Start_IT+0xd0>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d00e      	beq.n	8004364 <HAL_TIM_Base_Start_IT+0x80>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a1b      	ldr	r2, [pc, #108]	; (80043b8 <HAL_TIM_Base_Start_IT+0xd4>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d009      	beq.n	8004364 <HAL_TIM_Base_Start_IT+0x80>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a19      	ldr	r2, [pc, #100]	; (80043bc <HAL_TIM_Base_Start_IT+0xd8>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d004      	beq.n	8004364 <HAL_TIM_Base_Start_IT+0x80>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a18      	ldr	r2, [pc, #96]	; (80043c0 <HAL_TIM_Base_Start_IT+0xdc>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d111      	bne.n	8004388 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	f003 0307 	and.w	r3, r3, #7
 800436e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	2b06      	cmp	r3, #6
 8004374:	d010      	beq.n	8004398 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f042 0201 	orr.w	r2, r2, #1
 8004384:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004386:	e007      	b.n	8004398 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f042 0201 	orr.w	r2, r2, #1
 8004396:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004398:	2300      	movs	r3, #0
}
 800439a:	4618      	mov	r0, r3
 800439c:	3714      	adds	r7, #20
 800439e:	46bd      	mov	sp, r7
 80043a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a4:	4770      	bx	lr
 80043a6:	bf00      	nop
 80043a8:	40010000 	.word	0x40010000
 80043ac:	40000400 	.word	0x40000400
 80043b0:	40000800 	.word	0x40000800
 80043b4:	40000c00 	.word	0x40000c00
 80043b8:	40010400 	.word	0x40010400
 80043bc:	40014000 	.word	0x40014000
 80043c0:	40001800 	.word	0x40001800

080043c4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b083      	sub	sp, #12
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	68da      	ldr	r2, [r3, #12]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f022 0201 	bic.w	r2, r2, #1
 80043da:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	6a1a      	ldr	r2, [r3, #32]
 80043e2:	f241 1311 	movw	r3, #4369	; 0x1111
 80043e6:	4013      	ands	r3, r2
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d10f      	bne.n	800440c <HAL_TIM_Base_Stop_IT+0x48>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	6a1a      	ldr	r2, [r3, #32]
 80043f2:	f240 4344 	movw	r3, #1092	; 0x444
 80043f6:	4013      	ands	r3, r2
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d107      	bne.n	800440c <HAL_TIM_Base_Stop_IT+0x48>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	681a      	ldr	r2, [r3, #0]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f022 0201 	bic.w	r2, r2, #1
 800440a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2201      	movs	r2, #1
 8004410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004414:	2300      	movs	r3, #0
}
 8004416:	4618      	mov	r0, r3
 8004418:	370c      	adds	r7, #12
 800441a:	46bd      	mov	sp, r7
 800441c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004420:	4770      	bx	lr

08004422 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004422:	b580      	push	{r7, lr}
 8004424:	b082      	sub	sp, #8
 8004426:	af00      	add	r7, sp, #0
 8004428:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d101      	bne.n	8004434 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004430:	2301      	movs	r3, #1
 8004432:	e041      	b.n	80044b8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800443a:	b2db      	uxtb	r3, r3
 800443c:	2b00      	cmp	r3, #0
 800443e:	d106      	bne.n	800444e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2200      	movs	r2, #0
 8004444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004448:	6878      	ldr	r0, [r7, #4]
 800444a:	f7fd fa39 	bl	80018c0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2202      	movs	r2, #2
 8004452:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	3304      	adds	r3, #4
 800445e:	4619      	mov	r1, r3
 8004460:	4610      	mov	r0, r2
 8004462:	f000 fed3 	bl	800520c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2201      	movs	r2, #1
 800446a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2201      	movs	r2, #1
 8004472:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2201      	movs	r2, #1
 800447a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2201      	movs	r2, #1
 8004482:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2201      	movs	r2, #1
 800448a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2201      	movs	r2, #1
 8004492:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2201      	movs	r2, #1
 800449a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2201      	movs	r2, #1
 80044a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2201      	movs	r2, #1
 80044aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2201      	movs	r2, #1
 80044b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80044b6:	2300      	movs	r3, #0
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	3708      	adds	r7, #8
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}

080044c0 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b086      	sub	sp, #24
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	60f8      	str	r0, [r7, #12]
 80044c8:	60b9      	str	r1, [r7, #8]
 80044ca:	607a      	str	r2, [r7, #4]
 80044cc:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80044ce:	2300      	movs	r3, #0
 80044d0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d109      	bne.n	80044ec <HAL_TIM_PWM_Start_DMA+0x2c>
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80044de:	b2db      	uxtb	r3, r3
 80044e0:	2b02      	cmp	r3, #2
 80044e2:	bf0c      	ite	eq
 80044e4:	2301      	moveq	r3, #1
 80044e6:	2300      	movne	r3, #0
 80044e8:	b2db      	uxtb	r3, r3
 80044ea:	e022      	b.n	8004532 <HAL_TIM_PWM_Start_DMA+0x72>
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	2b04      	cmp	r3, #4
 80044f0:	d109      	bne.n	8004506 <HAL_TIM_PWM_Start_DMA+0x46>
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80044f8:	b2db      	uxtb	r3, r3
 80044fa:	2b02      	cmp	r3, #2
 80044fc:	bf0c      	ite	eq
 80044fe:	2301      	moveq	r3, #1
 8004500:	2300      	movne	r3, #0
 8004502:	b2db      	uxtb	r3, r3
 8004504:	e015      	b.n	8004532 <HAL_TIM_PWM_Start_DMA+0x72>
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	2b08      	cmp	r3, #8
 800450a:	d109      	bne.n	8004520 <HAL_TIM_PWM_Start_DMA+0x60>
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004512:	b2db      	uxtb	r3, r3
 8004514:	2b02      	cmp	r3, #2
 8004516:	bf0c      	ite	eq
 8004518:	2301      	moveq	r3, #1
 800451a:	2300      	movne	r3, #0
 800451c:	b2db      	uxtb	r3, r3
 800451e:	e008      	b.n	8004532 <HAL_TIM_PWM_Start_DMA+0x72>
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004526:	b2db      	uxtb	r3, r3
 8004528:	2b02      	cmp	r3, #2
 800452a:	bf0c      	ite	eq
 800452c:	2301      	moveq	r3, #1
 800452e:	2300      	movne	r3, #0
 8004530:	b2db      	uxtb	r3, r3
 8004532:	2b00      	cmp	r3, #0
 8004534:	d001      	beq.n	800453a <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8004536:	2302      	movs	r3, #2
 8004538:	e171      	b.n	800481e <HAL_TIM_PWM_Start_DMA+0x35e>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d109      	bne.n	8004554 <HAL_TIM_PWM_Start_DMA+0x94>
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004546:	b2db      	uxtb	r3, r3
 8004548:	2b01      	cmp	r3, #1
 800454a:	bf0c      	ite	eq
 800454c:	2301      	moveq	r3, #1
 800454e:	2300      	movne	r3, #0
 8004550:	b2db      	uxtb	r3, r3
 8004552:	e022      	b.n	800459a <HAL_TIM_PWM_Start_DMA+0xda>
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	2b04      	cmp	r3, #4
 8004558:	d109      	bne.n	800456e <HAL_TIM_PWM_Start_DMA+0xae>
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004560:	b2db      	uxtb	r3, r3
 8004562:	2b01      	cmp	r3, #1
 8004564:	bf0c      	ite	eq
 8004566:	2301      	moveq	r3, #1
 8004568:	2300      	movne	r3, #0
 800456a:	b2db      	uxtb	r3, r3
 800456c:	e015      	b.n	800459a <HAL_TIM_PWM_Start_DMA+0xda>
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	2b08      	cmp	r3, #8
 8004572:	d109      	bne.n	8004588 <HAL_TIM_PWM_Start_DMA+0xc8>
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800457a:	b2db      	uxtb	r3, r3
 800457c:	2b01      	cmp	r3, #1
 800457e:	bf0c      	ite	eq
 8004580:	2301      	moveq	r3, #1
 8004582:	2300      	movne	r3, #0
 8004584:	b2db      	uxtb	r3, r3
 8004586:	e008      	b.n	800459a <HAL_TIM_PWM_Start_DMA+0xda>
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800458e:	b2db      	uxtb	r3, r3
 8004590:	2b01      	cmp	r3, #1
 8004592:	bf0c      	ite	eq
 8004594:	2301      	moveq	r3, #1
 8004596:	2300      	movne	r3, #0
 8004598:	b2db      	uxtb	r3, r3
 800459a:	2b00      	cmp	r3, #0
 800459c:	d024      	beq.n	80045e8 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d104      	bne.n	80045ae <HAL_TIM_PWM_Start_DMA+0xee>
 80045a4:	887b      	ldrh	r3, [r7, #2]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d001      	beq.n	80045ae <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	e137      	b.n	800481e <HAL_TIM_PWM_Start_DMA+0x35e>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d104      	bne.n	80045be <HAL_TIM_PWM_Start_DMA+0xfe>
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	2202      	movs	r2, #2
 80045b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80045bc:	e016      	b.n	80045ec <HAL_TIM_PWM_Start_DMA+0x12c>
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	2b04      	cmp	r3, #4
 80045c2:	d104      	bne.n	80045ce <HAL_TIM_PWM_Start_DMA+0x10e>
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	2202      	movs	r2, #2
 80045c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80045cc:	e00e      	b.n	80045ec <HAL_TIM_PWM_Start_DMA+0x12c>
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	2b08      	cmp	r3, #8
 80045d2:	d104      	bne.n	80045de <HAL_TIM_PWM_Start_DMA+0x11e>
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2202      	movs	r2, #2
 80045d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80045dc:	e006      	b.n	80045ec <HAL_TIM_PWM_Start_DMA+0x12c>
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2202      	movs	r2, #2
 80045e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80045e6:	e001      	b.n	80045ec <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	e118      	b.n	800481e <HAL_TIM_PWM_Start_DMA+0x35e>
  }

  switch (Channel)
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	2b0c      	cmp	r3, #12
 80045f0:	f200 80ae 	bhi.w	8004750 <HAL_TIM_PWM_Start_DMA+0x290>
 80045f4:	a201      	add	r2, pc, #4	; (adr r2, 80045fc <HAL_TIM_PWM_Start_DMA+0x13c>)
 80045f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045fa:	bf00      	nop
 80045fc:	08004631 	.word	0x08004631
 8004600:	08004751 	.word	0x08004751
 8004604:	08004751 	.word	0x08004751
 8004608:	08004751 	.word	0x08004751
 800460c:	08004679 	.word	0x08004679
 8004610:	08004751 	.word	0x08004751
 8004614:	08004751 	.word	0x08004751
 8004618:	08004751 	.word	0x08004751
 800461c:	080046c1 	.word	0x080046c1
 8004620:	08004751 	.word	0x08004751
 8004624:	08004751 	.word	0x08004751
 8004628:	08004751 	.word	0x08004751
 800462c:	08004709 	.word	0x08004709
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004634:	4a7c      	ldr	r2, [pc, #496]	; (8004828 <HAL_TIM_PWM_Start_DMA+0x368>)
 8004636:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800463c:	4a7b      	ldr	r2, [pc, #492]	; (800482c <HAL_TIM_PWM_Start_DMA+0x36c>)
 800463e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004644:	4a7a      	ldr	r2, [pc, #488]	; (8004830 <HAL_TIM_PWM_Start_DMA+0x370>)
 8004646:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800464c:	6879      	ldr	r1, [r7, #4]
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	3334      	adds	r3, #52	; 0x34
 8004654:	461a      	mov	r2, r3
 8004656:	887b      	ldrh	r3, [r7, #2]
 8004658:	f7fd fd76 	bl	8002148 <HAL_DMA_Start_IT>
 800465c:	4603      	mov	r3, r0
 800465e:	2b00      	cmp	r3, #0
 8004660:	d001      	beq.n	8004666 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004662:	2301      	movs	r3, #1
 8004664:	e0db      	b.n	800481e <HAL_TIM_PWM_Start_DMA+0x35e>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	68da      	ldr	r2, [r3, #12]
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004674:	60da      	str	r2, [r3, #12]
      break;
 8004676:	e06e      	b.n	8004756 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800467c:	4a6a      	ldr	r2, [pc, #424]	; (8004828 <HAL_TIM_PWM_Start_DMA+0x368>)
 800467e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004684:	4a69      	ldr	r2, [pc, #420]	; (800482c <HAL_TIM_PWM_Start_DMA+0x36c>)
 8004686:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800468c:	4a68      	ldr	r2, [pc, #416]	; (8004830 <HAL_TIM_PWM_Start_DMA+0x370>)
 800468e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8004694:	6879      	ldr	r1, [r7, #4]
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	3338      	adds	r3, #56	; 0x38
 800469c:	461a      	mov	r2, r3
 800469e:	887b      	ldrh	r3, [r7, #2]
 80046a0:	f7fd fd52 	bl	8002148 <HAL_DMA_Start_IT>
 80046a4:	4603      	mov	r3, r0
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d001      	beq.n	80046ae <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80046aa:	2301      	movs	r3, #1
 80046ac:	e0b7      	b.n	800481e <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	68da      	ldr	r2, [r3, #12]
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80046bc:	60da      	str	r2, [r3, #12]
      break;
 80046be:	e04a      	b.n	8004756 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046c4:	4a58      	ldr	r2, [pc, #352]	; (8004828 <HAL_TIM_PWM_Start_DMA+0x368>)
 80046c6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046cc:	4a57      	ldr	r2, [pc, #348]	; (800482c <HAL_TIM_PWM_Start_DMA+0x36c>)
 80046ce:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046d4:	4a56      	ldr	r2, [pc, #344]	; (8004830 <HAL_TIM_PWM_Start_DMA+0x370>)
 80046d6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80046dc:	6879      	ldr	r1, [r7, #4]
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	333c      	adds	r3, #60	; 0x3c
 80046e4:	461a      	mov	r2, r3
 80046e6:	887b      	ldrh	r3, [r7, #2]
 80046e8:	f7fd fd2e 	bl	8002148 <HAL_DMA_Start_IT>
 80046ec:	4603      	mov	r3, r0
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d001      	beq.n	80046f6 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	e093      	b.n	800481e <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	68da      	ldr	r2, [r3, #12]
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004704:	60da      	str	r2, [r3, #12]
      break;
 8004706:	e026      	b.n	8004756 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800470c:	4a46      	ldr	r2, [pc, #280]	; (8004828 <HAL_TIM_PWM_Start_DMA+0x368>)
 800470e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004714:	4a45      	ldr	r2, [pc, #276]	; (800482c <HAL_TIM_PWM_Start_DMA+0x36c>)
 8004716:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800471c:	4a44      	ldr	r2, [pc, #272]	; (8004830 <HAL_TIM_PWM_Start_DMA+0x370>)
 800471e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004724:	6879      	ldr	r1, [r7, #4]
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	3340      	adds	r3, #64	; 0x40
 800472c:	461a      	mov	r2, r3
 800472e:	887b      	ldrh	r3, [r7, #2]
 8004730:	f7fd fd0a 	bl	8002148 <HAL_DMA_Start_IT>
 8004734:	4603      	mov	r3, r0
 8004736:	2b00      	cmp	r3, #0
 8004738:	d001      	beq.n	800473e <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	e06f      	b.n	800481e <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	68da      	ldr	r2, [r3, #12]
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800474c:	60da      	str	r2, [r3, #12]
      break;
 800474e:	e002      	b.n	8004756 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	75fb      	strb	r3, [r7, #23]
      break;
 8004754:	bf00      	nop
  }

  if (status == HAL_OK)
 8004756:	7dfb      	ldrb	r3, [r7, #23]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d15f      	bne.n	800481c <HAL_TIM_PWM_Start_DMA+0x35c>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	2201      	movs	r2, #1
 8004762:	68b9      	ldr	r1, [r7, #8]
 8004764:	4618      	mov	r0, r3
 8004766:	f000 ffa1 	bl	80056ac <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a31      	ldr	r2, [pc, #196]	; (8004834 <HAL_TIM_PWM_Start_DMA+0x374>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d004      	beq.n	800477e <HAL_TIM_PWM_Start_DMA+0x2be>
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a2f      	ldr	r2, [pc, #188]	; (8004838 <HAL_TIM_PWM_Start_DMA+0x378>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d101      	bne.n	8004782 <HAL_TIM_PWM_Start_DMA+0x2c2>
 800477e:	2301      	movs	r3, #1
 8004780:	e000      	b.n	8004784 <HAL_TIM_PWM_Start_DMA+0x2c4>
 8004782:	2300      	movs	r3, #0
 8004784:	2b00      	cmp	r3, #0
 8004786:	d007      	beq.n	8004798 <HAL_TIM_PWM_Start_DMA+0x2d8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004796:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a25      	ldr	r2, [pc, #148]	; (8004834 <HAL_TIM_PWM_Start_DMA+0x374>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d022      	beq.n	80047e8 <HAL_TIM_PWM_Start_DMA+0x328>
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047aa:	d01d      	beq.n	80047e8 <HAL_TIM_PWM_Start_DMA+0x328>
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a22      	ldr	r2, [pc, #136]	; (800483c <HAL_TIM_PWM_Start_DMA+0x37c>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d018      	beq.n	80047e8 <HAL_TIM_PWM_Start_DMA+0x328>
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a21      	ldr	r2, [pc, #132]	; (8004840 <HAL_TIM_PWM_Start_DMA+0x380>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d013      	beq.n	80047e8 <HAL_TIM_PWM_Start_DMA+0x328>
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a1f      	ldr	r2, [pc, #124]	; (8004844 <HAL_TIM_PWM_Start_DMA+0x384>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d00e      	beq.n	80047e8 <HAL_TIM_PWM_Start_DMA+0x328>
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a1a      	ldr	r2, [pc, #104]	; (8004838 <HAL_TIM_PWM_Start_DMA+0x378>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d009      	beq.n	80047e8 <HAL_TIM_PWM_Start_DMA+0x328>
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a1b      	ldr	r2, [pc, #108]	; (8004848 <HAL_TIM_PWM_Start_DMA+0x388>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d004      	beq.n	80047e8 <HAL_TIM_PWM_Start_DMA+0x328>
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a1a      	ldr	r2, [pc, #104]	; (800484c <HAL_TIM_PWM_Start_DMA+0x38c>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d111      	bne.n	800480c <HAL_TIM_PWM_Start_DMA+0x34c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	f003 0307 	and.w	r3, r3, #7
 80047f2:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	2b06      	cmp	r3, #6
 80047f8:	d010      	beq.n	800481c <HAL_TIM_PWM_Start_DMA+0x35c>
      {
        __HAL_TIM_ENABLE(htim);
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	681a      	ldr	r2, [r3, #0]
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f042 0201 	orr.w	r2, r2, #1
 8004808:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800480a:	e007      	b.n	800481c <HAL_TIM_PWM_Start_DMA+0x35c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	681a      	ldr	r2, [r3, #0]
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f042 0201 	orr.w	r2, r2, #1
 800481a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800481c:	7dfb      	ldrb	r3, [r7, #23]
}
 800481e:	4618      	mov	r0, r3
 8004820:	3718      	adds	r7, #24
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}
 8004826:	bf00      	nop
 8004828:	080050fb 	.word	0x080050fb
 800482c:	080051a3 	.word	0x080051a3
 8004830:	08005069 	.word	0x08005069
 8004834:	40010000 	.word	0x40010000
 8004838:	40010400 	.word	0x40010400
 800483c:	40000400 	.word	0x40000400
 8004840:	40000800 	.word	0x40000800
 8004844:	40000c00 	.word	0x40000c00
 8004848:	40014000 	.word	0x40014000
 800484c:	40001800 	.word	0x40001800

08004850 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b084      	sub	sp, #16
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
 8004858:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800485a:	2300      	movs	r3, #0
 800485c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	2b0c      	cmp	r3, #12
 8004862:	d855      	bhi.n	8004910 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8004864:	a201      	add	r2, pc, #4	; (adr r2, 800486c <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8004866:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800486a:	bf00      	nop
 800486c:	080048a1 	.word	0x080048a1
 8004870:	08004911 	.word	0x08004911
 8004874:	08004911 	.word	0x08004911
 8004878:	08004911 	.word	0x08004911
 800487c:	080048bd 	.word	0x080048bd
 8004880:	08004911 	.word	0x08004911
 8004884:	08004911 	.word	0x08004911
 8004888:	08004911 	.word	0x08004911
 800488c:	080048d9 	.word	0x080048d9
 8004890:	08004911 	.word	0x08004911
 8004894:	08004911 	.word	0x08004911
 8004898:	08004911 	.word	0x08004911
 800489c:	080048f5 	.word	0x080048f5
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	68da      	ldr	r2, [r3, #12]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80048ae:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b4:	4618      	mov	r0, r3
 80048b6:	f7fd fd0f 	bl	80022d8 <HAL_DMA_Abort_IT>
      break;
 80048ba:	e02c      	b.n	8004916 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	68da      	ldr	r2, [r3, #12]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048ca:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048d0:	4618      	mov	r0, r3
 80048d2:	f7fd fd01 	bl	80022d8 <HAL_DMA_Abort_IT>
      break;
 80048d6:	e01e      	b.n	8004916 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	68da      	ldr	r2, [r3, #12]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80048e6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ec:	4618      	mov	r0, r3
 80048ee:	f7fd fcf3 	bl	80022d8 <HAL_DMA_Abort_IT>
      break;
 80048f2:	e010      	b.n	8004916 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	68da      	ldr	r2, [r3, #12]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004902:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004908:	4618      	mov	r0, r3
 800490a:	f7fd fce5 	bl	80022d8 <HAL_DMA_Abort_IT>
      break;
 800490e:	e002      	b.n	8004916 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8004910:	2301      	movs	r3, #1
 8004912:	73fb      	strb	r3, [r7, #15]
      break;
 8004914:	bf00      	nop
  }

  if (status == HAL_OK)
 8004916:	7bfb      	ldrb	r3, [r7, #15]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d161      	bne.n	80049e0 <HAL_TIM_PWM_Stop_DMA+0x190>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	2200      	movs	r2, #0
 8004922:	6839      	ldr	r1, [r7, #0]
 8004924:	4618      	mov	r0, r3
 8004926:	f000 fec1 	bl	80056ac <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a2f      	ldr	r2, [pc, #188]	; (80049ec <HAL_TIM_PWM_Stop_DMA+0x19c>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d004      	beq.n	800493e <HAL_TIM_PWM_Stop_DMA+0xee>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a2d      	ldr	r2, [pc, #180]	; (80049f0 <HAL_TIM_PWM_Stop_DMA+0x1a0>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d101      	bne.n	8004942 <HAL_TIM_PWM_Stop_DMA+0xf2>
 800493e:	2301      	movs	r3, #1
 8004940:	e000      	b.n	8004944 <HAL_TIM_PWM_Stop_DMA+0xf4>
 8004942:	2300      	movs	r3, #0
 8004944:	2b00      	cmp	r3, #0
 8004946:	d017      	beq.n	8004978 <HAL_TIM_PWM_Stop_DMA+0x128>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	6a1a      	ldr	r2, [r3, #32]
 800494e:	f241 1311 	movw	r3, #4369	; 0x1111
 8004952:	4013      	ands	r3, r2
 8004954:	2b00      	cmp	r3, #0
 8004956:	d10f      	bne.n	8004978 <HAL_TIM_PWM_Stop_DMA+0x128>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	6a1a      	ldr	r2, [r3, #32]
 800495e:	f240 4344 	movw	r3, #1092	; 0x444
 8004962:	4013      	ands	r3, r2
 8004964:	2b00      	cmp	r3, #0
 8004966:	d107      	bne.n	8004978 <HAL_TIM_PWM_Stop_DMA+0x128>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004976:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	6a1a      	ldr	r2, [r3, #32]
 800497e:	f241 1311 	movw	r3, #4369	; 0x1111
 8004982:	4013      	ands	r3, r2
 8004984:	2b00      	cmp	r3, #0
 8004986:	d10f      	bne.n	80049a8 <HAL_TIM_PWM_Stop_DMA+0x158>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	6a1a      	ldr	r2, [r3, #32]
 800498e:	f240 4344 	movw	r3, #1092	; 0x444
 8004992:	4013      	ands	r3, r2
 8004994:	2b00      	cmp	r3, #0
 8004996:	d107      	bne.n	80049a8 <HAL_TIM_PWM_Stop_DMA+0x158>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	681a      	ldr	r2, [r3, #0]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f022 0201 	bic.w	r2, r2, #1
 80049a6:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d104      	bne.n	80049b8 <HAL_TIM_PWM_Stop_DMA+0x168>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2201      	movs	r2, #1
 80049b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049b6:	e013      	b.n	80049e0 <HAL_TIM_PWM_Stop_DMA+0x190>
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	2b04      	cmp	r3, #4
 80049bc:	d104      	bne.n	80049c8 <HAL_TIM_PWM_Stop_DMA+0x178>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2201      	movs	r2, #1
 80049c2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80049c6:	e00b      	b.n	80049e0 <HAL_TIM_PWM_Stop_DMA+0x190>
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	2b08      	cmp	r3, #8
 80049cc:	d104      	bne.n	80049d8 <HAL_TIM_PWM_Stop_DMA+0x188>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2201      	movs	r2, #1
 80049d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80049d6:	e003      	b.n	80049e0 <HAL_TIM_PWM_Stop_DMA+0x190>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2201      	movs	r2, #1
 80049dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 80049e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	3710      	adds	r7, #16
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}
 80049ea:	bf00      	nop
 80049ec:	40010000 	.word	0x40010000
 80049f0:	40010400 	.word	0x40010400

080049f4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b086      	sub	sp, #24
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
 80049fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d101      	bne.n	8004a08 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004a04:	2301      	movs	r3, #1
 8004a06:	e097      	b.n	8004b38 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a0e:	b2db      	uxtb	r3, r3
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d106      	bne.n	8004a22 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2200      	movs	r2, #0
 8004a18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004a1c:	6878      	ldr	r0, [r7, #4]
 8004a1e:	f7fc ff07 	bl	8001830 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2202      	movs	r2, #2
 8004a26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	689b      	ldr	r3, [r3, #8]
 8004a30:	687a      	ldr	r2, [r7, #4]
 8004a32:	6812      	ldr	r2, [r2, #0]
 8004a34:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a38:	f023 0307 	bic.w	r3, r3, #7
 8004a3c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681a      	ldr	r2, [r3, #0]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	3304      	adds	r3, #4
 8004a46:	4619      	mov	r1, r3
 8004a48:	4610      	mov	r0, r2
 8004a4a:	f000 fbdf 	bl	800520c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	699b      	ldr	r3, [r3, #24]
 8004a5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	6a1b      	ldr	r3, [r3, #32]
 8004a64:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	697a      	ldr	r2, [r7, #20]
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a76:	f023 0303 	bic.w	r3, r3, #3
 8004a7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	689a      	ldr	r2, [r3, #8]
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	699b      	ldr	r3, [r3, #24]
 8004a84:	021b      	lsls	r3, r3, #8
 8004a86:	4313      	orrs	r3, r2
 8004a88:	693a      	ldr	r2, [r7, #16]
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004a94:	f023 030c 	bic.w	r3, r3, #12
 8004a98:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004aa0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004aa4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	68da      	ldr	r2, [r3, #12]
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	69db      	ldr	r3, [r3, #28]
 8004aae:	021b      	lsls	r3, r3, #8
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	693a      	ldr	r2, [r7, #16]
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	691b      	ldr	r3, [r3, #16]
 8004abc:	011a      	lsls	r2, r3, #4
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	6a1b      	ldr	r3, [r3, #32]
 8004ac2:	031b      	lsls	r3, r3, #12
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	693a      	ldr	r2, [r7, #16]
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004ad2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004ada:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	685a      	ldr	r2, [r3, #4]
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	695b      	ldr	r3, [r3, #20]
 8004ae4:	011b      	lsls	r3, r3, #4
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	68fa      	ldr	r2, [r7, #12]
 8004aea:	4313      	orrs	r3, r2
 8004aec:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	697a      	ldr	r2, [r7, #20]
 8004af4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	693a      	ldr	r2, [r7, #16]
 8004afc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	68fa      	ldr	r2, [r7, #12]
 8004b04:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2201      	movs	r2, #1
 8004b0a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2201      	movs	r2, #1
 8004b12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2201      	movs	r2, #1
 8004b1a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2201      	movs	r2, #1
 8004b22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2201      	movs	r2, #1
 8004b2a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2201      	movs	r2, #1
 8004b32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b36:	2300      	movs	r3, #0
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	3718      	adds	r7, #24
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}

08004b40 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b084      	sub	sp, #16
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
 8004b48:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b50:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004b58:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004b60:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004b68:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d110      	bne.n	8004b92 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004b70:	7bfb      	ldrb	r3, [r7, #15]
 8004b72:	2b01      	cmp	r3, #1
 8004b74:	d102      	bne.n	8004b7c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004b76:	7b7b      	ldrb	r3, [r7, #13]
 8004b78:	2b01      	cmp	r3, #1
 8004b7a:	d001      	beq.n	8004b80 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	e069      	b.n	8004c54 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2202      	movs	r2, #2
 8004b84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2202      	movs	r2, #2
 8004b8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b90:	e031      	b.n	8004bf6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	2b04      	cmp	r3, #4
 8004b96:	d110      	bne.n	8004bba <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004b98:	7bbb      	ldrb	r3, [r7, #14]
 8004b9a:	2b01      	cmp	r3, #1
 8004b9c:	d102      	bne.n	8004ba4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004b9e:	7b3b      	ldrb	r3, [r7, #12]
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	d001      	beq.n	8004ba8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	e055      	b.n	8004c54 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2202      	movs	r2, #2
 8004bac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2202      	movs	r2, #2
 8004bb4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004bb8:	e01d      	b.n	8004bf6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004bba:	7bfb      	ldrb	r3, [r7, #15]
 8004bbc:	2b01      	cmp	r3, #1
 8004bbe:	d108      	bne.n	8004bd2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004bc0:	7bbb      	ldrb	r3, [r7, #14]
 8004bc2:	2b01      	cmp	r3, #1
 8004bc4:	d105      	bne.n	8004bd2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004bc6:	7b7b      	ldrb	r3, [r7, #13]
 8004bc8:	2b01      	cmp	r3, #1
 8004bca:	d102      	bne.n	8004bd2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004bcc:	7b3b      	ldrb	r3, [r7, #12]
 8004bce:	2b01      	cmp	r3, #1
 8004bd0:	d001      	beq.n	8004bd6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	e03e      	b.n	8004c54 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2202      	movs	r2, #2
 8004bda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2202      	movs	r2, #2
 8004be2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2202      	movs	r2, #2
 8004bea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2202      	movs	r2, #2
 8004bf2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d003      	beq.n	8004c04 <HAL_TIM_Encoder_Start+0xc4>
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	2b04      	cmp	r3, #4
 8004c00:	d008      	beq.n	8004c14 <HAL_TIM_Encoder_Start+0xd4>
 8004c02:	e00f      	b.n	8004c24 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	2201      	movs	r2, #1
 8004c0a:	2100      	movs	r1, #0
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	f000 fd4d 	bl	80056ac <TIM_CCxChannelCmd>
      break;
 8004c12:	e016      	b.n	8004c42 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	2201      	movs	r2, #1
 8004c1a:	2104      	movs	r1, #4
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	f000 fd45 	bl	80056ac <TIM_CCxChannelCmd>
      break;
 8004c22:	e00e      	b.n	8004c42 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	2201      	movs	r2, #1
 8004c2a:	2100      	movs	r1, #0
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	f000 fd3d 	bl	80056ac <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	2201      	movs	r2, #1
 8004c38:	2104      	movs	r1, #4
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f000 fd36 	bl	80056ac <TIM_CCxChannelCmd>
      break;
 8004c40:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	681a      	ldr	r2, [r3, #0]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f042 0201 	orr.w	r2, r2, #1
 8004c50:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004c52:	2300      	movs	r3, #0
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	3710      	adds	r7, #16
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bd80      	pop	{r7, pc}

08004c5c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b082      	sub	sp, #8
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	691b      	ldr	r3, [r3, #16]
 8004c6a:	f003 0302 	and.w	r3, r3, #2
 8004c6e:	2b02      	cmp	r3, #2
 8004c70:	d122      	bne.n	8004cb8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	68db      	ldr	r3, [r3, #12]
 8004c78:	f003 0302 	and.w	r3, r3, #2
 8004c7c:	2b02      	cmp	r3, #2
 8004c7e:	d11b      	bne.n	8004cb8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f06f 0202 	mvn.w	r2, #2
 8004c88:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2201      	movs	r2, #1
 8004c8e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	699b      	ldr	r3, [r3, #24]
 8004c96:	f003 0303 	and.w	r3, r3, #3
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d003      	beq.n	8004ca6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f000 f9b0 	bl	8005004 <HAL_TIM_IC_CaptureCallback>
 8004ca4:	e005      	b.n	8004cb2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	f000 f9a2 	bl	8004ff0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cac:	6878      	ldr	r0, [r7, #4]
 8004cae:	f000 f9b3 	bl	8005018 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	691b      	ldr	r3, [r3, #16]
 8004cbe:	f003 0304 	and.w	r3, r3, #4
 8004cc2:	2b04      	cmp	r3, #4
 8004cc4:	d122      	bne.n	8004d0c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	68db      	ldr	r3, [r3, #12]
 8004ccc:	f003 0304 	and.w	r3, r3, #4
 8004cd0:	2b04      	cmp	r3, #4
 8004cd2:	d11b      	bne.n	8004d0c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f06f 0204 	mvn.w	r2, #4
 8004cdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2202      	movs	r2, #2
 8004ce2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	699b      	ldr	r3, [r3, #24]
 8004cea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d003      	beq.n	8004cfa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	f000 f986 	bl	8005004 <HAL_TIM_IC_CaptureCallback>
 8004cf8:	e005      	b.n	8004d06 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f000 f978 	bl	8004ff0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	f000 f989 	bl	8005018 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	691b      	ldr	r3, [r3, #16]
 8004d12:	f003 0308 	and.w	r3, r3, #8
 8004d16:	2b08      	cmp	r3, #8
 8004d18:	d122      	bne.n	8004d60 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	68db      	ldr	r3, [r3, #12]
 8004d20:	f003 0308 	and.w	r3, r3, #8
 8004d24:	2b08      	cmp	r3, #8
 8004d26:	d11b      	bne.n	8004d60 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f06f 0208 	mvn.w	r2, #8
 8004d30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2204      	movs	r2, #4
 8004d36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	69db      	ldr	r3, [r3, #28]
 8004d3e:	f003 0303 	and.w	r3, r3, #3
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d003      	beq.n	8004d4e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f000 f95c 	bl	8005004 <HAL_TIM_IC_CaptureCallback>
 8004d4c:	e005      	b.n	8004d5a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f000 f94e 	bl	8004ff0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d54:	6878      	ldr	r0, [r7, #4]
 8004d56:	f000 f95f 	bl	8005018 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	691b      	ldr	r3, [r3, #16]
 8004d66:	f003 0310 	and.w	r3, r3, #16
 8004d6a:	2b10      	cmp	r3, #16
 8004d6c:	d122      	bne.n	8004db4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	68db      	ldr	r3, [r3, #12]
 8004d74:	f003 0310 	and.w	r3, r3, #16
 8004d78:	2b10      	cmp	r3, #16
 8004d7a:	d11b      	bne.n	8004db4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f06f 0210 	mvn.w	r2, #16
 8004d84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2208      	movs	r2, #8
 8004d8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	69db      	ldr	r3, [r3, #28]
 8004d92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d003      	beq.n	8004da2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	f000 f932 	bl	8005004 <HAL_TIM_IC_CaptureCallback>
 8004da0:	e005      	b.n	8004dae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004da2:	6878      	ldr	r0, [r7, #4]
 8004da4:	f000 f924 	bl	8004ff0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004da8:	6878      	ldr	r0, [r7, #4]
 8004daa:	f000 f935 	bl	8005018 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2200      	movs	r2, #0
 8004db2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	691b      	ldr	r3, [r3, #16]
 8004dba:	f003 0301 	and.w	r3, r3, #1
 8004dbe:	2b01      	cmp	r3, #1
 8004dc0:	d10e      	bne.n	8004de0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	68db      	ldr	r3, [r3, #12]
 8004dc8:	f003 0301 	and.w	r3, r3, #1
 8004dcc:	2b01      	cmp	r3, #1
 8004dce:	d107      	bne.n	8004de0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f06f 0201 	mvn.w	r2, #1
 8004dd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	f7fb fe3e 	bl	8000a5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	691b      	ldr	r3, [r3, #16]
 8004de6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dea:	2b80      	cmp	r3, #128	; 0x80
 8004dec:	d10e      	bne.n	8004e0c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	68db      	ldr	r3, [r3, #12]
 8004df4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004df8:	2b80      	cmp	r3, #128	; 0x80
 8004dfa:	d107      	bne.n	8004e0c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004e04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	f000 fcfc 	bl	8005804 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	691b      	ldr	r3, [r3, #16]
 8004e12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e16:	2b40      	cmp	r3, #64	; 0x40
 8004e18:	d10e      	bne.n	8004e38 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	68db      	ldr	r3, [r3, #12]
 8004e20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e24:	2b40      	cmp	r3, #64	; 0x40
 8004e26:	d107      	bne.n	8004e38 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004e30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	f000 f904 	bl	8005040 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	691b      	ldr	r3, [r3, #16]
 8004e3e:	f003 0320 	and.w	r3, r3, #32
 8004e42:	2b20      	cmp	r3, #32
 8004e44:	d10e      	bne.n	8004e64 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	68db      	ldr	r3, [r3, #12]
 8004e4c:	f003 0320 	and.w	r3, r3, #32
 8004e50:	2b20      	cmp	r3, #32
 8004e52:	d107      	bne.n	8004e64 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f06f 0220 	mvn.w	r2, #32
 8004e5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	f000 fcc6 	bl	80057f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004e64:	bf00      	nop
 8004e66:	3708      	adds	r7, #8
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}

08004e6c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b086      	sub	sp, #24
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	60f8      	str	r0, [r7, #12]
 8004e74:	60b9      	str	r1, [r7, #8]
 8004e76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e78:	2300      	movs	r3, #0
 8004e7a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e82:	2b01      	cmp	r3, #1
 8004e84:	d101      	bne.n	8004e8a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004e86:	2302      	movs	r3, #2
 8004e88:	e0ae      	b.n	8004fe8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2201      	movs	r2, #1
 8004e8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2b0c      	cmp	r3, #12
 8004e96:	f200 809f 	bhi.w	8004fd8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004e9a:	a201      	add	r2, pc, #4	; (adr r2, 8004ea0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004e9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ea0:	08004ed5 	.word	0x08004ed5
 8004ea4:	08004fd9 	.word	0x08004fd9
 8004ea8:	08004fd9 	.word	0x08004fd9
 8004eac:	08004fd9 	.word	0x08004fd9
 8004eb0:	08004f15 	.word	0x08004f15
 8004eb4:	08004fd9 	.word	0x08004fd9
 8004eb8:	08004fd9 	.word	0x08004fd9
 8004ebc:	08004fd9 	.word	0x08004fd9
 8004ec0:	08004f57 	.word	0x08004f57
 8004ec4:	08004fd9 	.word	0x08004fd9
 8004ec8:	08004fd9 	.word	0x08004fd9
 8004ecc:	08004fd9 	.word	0x08004fd9
 8004ed0:	08004f97 	.word	0x08004f97
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	68b9      	ldr	r1, [r7, #8]
 8004eda:	4618      	mov	r0, r3
 8004edc:	f000 fa36 	bl	800534c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	699a      	ldr	r2, [r3, #24]
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f042 0208 	orr.w	r2, r2, #8
 8004eee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	699a      	ldr	r2, [r3, #24]
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f022 0204 	bic.w	r2, r2, #4
 8004efe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	6999      	ldr	r1, [r3, #24]
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	691a      	ldr	r2, [r3, #16]
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	430a      	orrs	r2, r1
 8004f10:	619a      	str	r2, [r3, #24]
      break;
 8004f12:	e064      	b.n	8004fde <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	68b9      	ldr	r1, [r7, #8]
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f000 fa86 	bl	800542c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	699a      	ldr	r2, [r3, #24]
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	699a      	ldr	r2, [r3, #24]
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	6999      	ldr	r1, [r3, #24]
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	691b      	ldr	r3, [r3, #16]
 8004f4a:	021a      	lsls	r2, r3, #8
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	430a      	orrs	r2, r1
 8004f52:	619a      	str	r2, [r3, #24]
      break;
 8004f54:	e043      	b.n	8004fde <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	68b9      	ldr	r1, [r7, #8]
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	f000 fadb 	bl	8005518 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	69da      	ldr	r2, [r3, #28]
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f042 0208 	orr.w	r2, r2, #8
 8004f70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	69da      	ldr	r2, [r3, #28]
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f022 0204 	bic.w	r2, r2, #4
 8004f80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	69d9      	ldr	r1, [r3, #28]
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	691a      	ldr	r2, [r3, #16]
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	430a      	orrs	r2, r1
 8004f92:	61da      	str	r2, [r3, #28]
      break;
 8004f94:	e023      	b.n	8004fde <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	68b9      	ldr	r1, [r7, #8]
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	f000 fb2f 	bl	8005600 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	69da      	ldr	r2, [r3, #28]
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004fb0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	69da      	ldr	r2, [r3, #28]
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fc0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	69d9      	ldr	r1, [r3, #28]
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	691b      	ldr	r3, [r3, #16]
 8004fcc:	021a      	lsls	r2, r3, #8
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	430a      	orrs	r2, r1
 8004fd4:	61da      	str	r2, [r3, #28]
      break;
 8004fd6:	e002      	b.n	8004fde <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004fd8:	2301      	movs	r3, #1
 8004fda:	75fb      	strb	r3, [r7, #23]
      break;
 8004fdc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004fe6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	3718      	adds	r7, #24
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bd80      	pop	{r7, pc}

08004ff0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b083      	sub	sp, #12
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004ff8:	bf00      	nop
 8004ffa:	370c      	adds	r7, #12
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005002:	4770      	bx	lr

08005004 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005004:	b480      	push	{r7}
 8005006:	b083      	sub	sp, #12
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800500c:	bf00      	nop
 800500e:	370c      	adds	r7, #12
 8005010:	46bd      	mov	sp, r7
 8005012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005016:	4770      	bx	lr

08005018 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005018:	b480      	push	{r7}
 800501a:	b083      	sub	sp, #12
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005020:	bf00      	nop
 8005022:	370c      	adds	r7, #12
 8005024:	46bd      	mov	sp, r7
 8005026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502a:	4770      	bx	lr

0800502c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800502c:	b480      	push	{r7}
 800502e:	b083      	sub	sp, #12
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8005034:	bf00      	nop
 8005036:	370c      	adds	r7, #12
 8005038:	46bd      	mov	sp, r7
 800503a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503e:	4770      	bx	lr

08005040 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005040:	b480      	push	{r7}
 8005042:	b083      	sub	sp, #12
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005048:	bf00      	nop
 800504a:	370c      	adds	r7, #12
 800504c:	46bd      	mov	sp, r7
 800504e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005052:	4770      	bx	lr

08005054 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8005054:	b480      	push	{r7}
 8005056:	b083      	sub	sp, #12
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800505c:	bf00      	nop
 800505e:	370c      	adds	r7, #12
 8005060:	46bd      	mov	sp, r7
 8005062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005066:	4770      	bx	lr

08005068 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b084      	sub	sp, #16
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005074:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800507a:	687a      	ldr	r2, [r7, #4]
 800507c:	429a      	cmp	r2, r3
 800507e:	d107      	bne.n	8005090 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	2201      	movs	r2, #1
 8005084:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	2201      	movs	r2, #1
 800508a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800508e:	e02a      	b.n	80050e6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005094:	687a      	ldr	r2, [r7, #4]
 8005096:	429a      	cmp	r2, r3
 8005098:	d107      	bne.n	80050aa <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	2202      	movs	r2, #2
 800509e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2201      	movs	r2, #1
 80050a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050a8:	e01d      	b.n	80050e6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ae:	687a      	ldr	r2, [r7, #4]
 80050b0:	429a      	cmp	r2, r3
 80050b2:	d107      	bne.n	80050c4 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2204      	movs	r2, #4
 80050b8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	2201      	movs	r2, #1
 80050be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050c2:	e010      	b.n	80050e6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050c8:	687a      	ldr	r2, [r7, #4]
 80050ca:	429a      	cmp	r2, r3
 80050cc:	d107      	bne.n	80050de <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2208      	movs	r2, #8
 80050d2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	2201      	movs	r2, #1
 80050d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80050dc:	e003      	b.n	80050e6 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	2201      	movs	r2, #1
 80050e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80050e6:	68f8      	ldr	r0, [r7, #12]
 80050e8:	f7ff ffb4 	bl	8005054 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2200      	movs	r2, #0
 80050f0:	771a      	strb	r2, [r3, #28]
}
 80050f2:	bf00      	nop
 80050f4:	3710      	adds	r7, #16
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}

080050fa <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80050fa:	b580      	push	{r7, lr}
 80050fc:	b084      	sub	sp, #16
 80050fe:	af00      	add	r7, sp, #0
 8005100:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005106:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800510c:	687a      	ldr	r2, [r7, #4]
 800510e:	429a      	cmp	r2, r3
 8005110:	d10b      	bne.n	800512a <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	2201      	movs	r2, #1
 8005116:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	69db      	ldr	r3, [r3, #28]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d136      	bne.n	800518e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2201      	movs	r2, #1
 8005124:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005128:	e031      	b.n	800518e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800512e:	687a      	ldr	r2, [r7, #4]
 8005130:	429a      	cmp	r2, r3
 8005132:	d10b      	bne.n	800514c <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	2202      	movs	r2, #2
 8005138:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	69db      	ldr	r3, [r3, #28]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d125      	bne.n	800518e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	2201      	movs	r2, #1
 8005146:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800514a:	e020      	b.n	800518e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005150:	687a      	ldr	r2, [r7, #4]
 8005152:	429a      	cmp	r2, r3
 8005154:	d10b      	bne.n	800516e <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2204      	movs	r2, #4
 800515a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	69db      	ldr	r3, [r3, #28]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d114      	bne.n	800518e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	2201      	movs	r2, #1
 8005168:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800516c:	e00f      	b.n	800518e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005172:	687a      	ldr	r2, [r7, #4]
 8005174:	429a      	cmp	r2, r3
 8005176:	d10a      	bne.n	800518e <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	2208      	movs	r2, #8
 800517c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	69db      	ldr	r3, [r3, #28]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d103      	bne.n	800518e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	2201      	movs	r2, #1
 800518a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800518e:	68f8      	ldr	r0, [r7, #12]
 8005190:	f7ff ff42 	bl	8005018 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	2200      	movs	r2, #0
 8005198:	771a      	strb	r2, [r3, #28]
}
 800519a:	bf00      	nop
 800519c:	3710      	adds	r7, #16
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd80      	pop	{r7, pc}

080051a2 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80051a2:	b580      	push	{r7, lr}
 80051a4:	b084      	sub	sp, #16
 80051a6:	af00      	add	r7, sp, #0
 80051a8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ae:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b4:	687a      	ldr	r2, [r7, #4]
 80051b6:	429a      	cmp	r2, r3
 80051b8:	d103      	bne.n	80051c2 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	2201      	movs	r2, #1
 80051be:	771a      	strb	r2, [r3, #28]
 80051c0:	e019      	b.n	80051f6 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051c6:	687a      	ldr	r2, [r7, #4]
 80051c8:	429a      	cmp	r2, r3
 80051ca:	d103      	bne.n	80051d4 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	2202      	movs	r2, #2
 80051d0:	771a      	strb	r2, [r3, #28]
 80051d2:	e010      	b.n	80051f6 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051d8:	687a      	ldr	r2, [r7, #4]
 80051da:	429a      	cmp	r2, r3
 80051dc:	d103      	bne.n	80051e6 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2204      	movs	r2, #4
 80051e2:	771a      	strb	r2, [r3, #28]
 80051e4:	e007      	b.n	80051f6 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ea:	687a      	ldr	r2, [r7, #4]
 80051ec:	429a      	cmp	r2, r3
 80051ee:	d102      	bne.n	80051f6 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	2208      	movs	r2, #8
 80051f4:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80051f6:	68f8      	ldr	r0, [r7, #12]
 80051f8:	f7ff ff18 	bl	800502c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	2200      	movs	r2, #0
 8005200:	771a      	strb	r2, [r3, #28]
}
 8005202:	bf00      	nop
 8005204:	3710      	adds	r7, #16
 8005206:	46bd      	mov	sp, r7
 8005208:	bd80      	pop	{r7, pc}
	...

0800520c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800520c:	b480      	push	{r7}
 800520e:	b085      	sub	sp, #20
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
 8005214:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	4a40      	ldr	r2, [pc, #256]	; (8005320 <TIM_Base_SetConfig+0x114>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d013      	beq.n	800524c <TIM_Base_SetConfig+0x40>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800522a:	d00f      	beq.n	800524c <TIM_Base_SetConfig+0x40>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	4a3d      	ldr	r2, [pc, #244]	; (8005324 <TIM_Base_SetConfig+0x118>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d00b      	beq.n	800524c <TIM_Base_SetConfig+0x40>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	4a3c      	ldr	r2, [pc, #240]	; (8005328 <TIM_Base_SetConfig+0x11c>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d007      	beq.n	800524c <TIM_Base_SetConfig+0x40>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	4a3b      	ldr	r2, [pc, #236]	; (800532c <TIM_Base_SetConfig+0x120>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d003      	beq.n	800524c <TIM_Base_SetConfig+0x40>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	4a3a      	ldr	r2, [pc, #232]	; (8005330 <TIM_Base_SetConfig+0x124>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d108      	bne.n	800525e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005252:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	68fa      	ldr	r2, [r7, #12]
 800525a:	4313      	orrs	r3, r2
 800525c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	4a2f      	ldr	r2, [pc, #188]	; (8005320 <TIM_Base_SetConfig+0x114>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d02b      	beq.n	80052be <TIM_Base_SetConfig+0xb2>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800526c:	d027      	beq.n	80052be <TIM_Base_SetConfig+0xb2>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	4a2c      	ldr	r2, [pc, #176]	; (8005324 <TIM_Base_SetConfig+0x118>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d023      	beq.n	80052be <TIM_Base_SetConfig+0xb2>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	4a2b      	ldr	r2, [pc, #172]	; (8005328 <TIM_Base_SetConfig+0x11c>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d01f      	beq.n	80052be <TIM_Base_SetConfig+0xb2>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	4a2a      	ldr	r2, [pc, #168]	; (800532c <TIM_Base_SetConfig+0x120>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d01b      	beq.n	80052be <TIM_Base_SetConfig+0xb2>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	4a29      	ldr	r2, [pc, #164]	; (8005330 <TIM_Base_SetConfig+0x124>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d017      	beq.n	80052be <TIM_Base_SetConfig+0xb2>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	4a28      	ldr	r2, [pc, #160]	; (8005334 <TIM_Base_SetConfig+0x128>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d013      	beq.n	80052be <TIM_Base_SetConfig+0xb2>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	4a27      	ldr	r2, [pc, #156]	; (8005338 <TIM_Base_SetConfig+0x12c>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d00f      	beq.n	80052be <TIM_Base_SetConfig+0xb2>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	4a26      	ldr	r2, [pc, #152]	; (800533c <TIM_Base_SetConfig+0x130>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d00b      	beq.n	80052be <TIM_Base_SetConfig+0xb2>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	4a25      	ldr	r2, [pc, #148]	; (8005340 <TIM_Base_SetConfig+0x134>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d007      	beq.n	80052be <TIM_Base_SetConfig+0xb2>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	4a24      	ldr	r2, [pc, #144]	; (8005344 <TIM_Base_SetConfig+0x138>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d003      	beq.n	80052be <TIM_Base_SetConfig+0xb2>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	4a23      	ldr	r2, [pc, #140]	; (8005348 <TIM_Base_SetConfig+0x13c>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d108      	bne.n	80052d0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	68db      	ldr	r3, [r3, #12]
 80052ca:	68fa      	ldr	r2, [r7, #12]
 80052cc:	4313      	orrs	r3, r2
 80052ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	695b      	ldr	r3, [r3, #20]
 80052da:	4313      	orrs	r3, r2
 80052dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	68fa      	ldr	r2, [r7, #12]
 80052e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	689a      	ldr	r2, [r3, #8]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	681a      	ldr	r2, [r3, #0]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	4a0a      	ldr	r2, [pc, #40]	; (8005320 <TIM_Base_SetConfig+0x114>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d003      	beq.n	8005304 <TIM_Base_SetConfig+0xf8>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	4a0c      	ldr	r2, [pc, #48]	; (8005330 <TIM_Base_SetConfig+0x124>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d103      	bne.n	800530c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	691a      	ldr	r2, [r3, #16]
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2201      	movs	r2, #1
 8005310:	615a      	str	r2, [r3, #20]
}
 8005312:	bf00      	nop
 8005314:	3714      	adds	r7, #20
 8005316:	46bd      	mov	sp, r7
 8005318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531c:	4770      	bx	lr
 800531e:	bf00      	nop
 8005320:	40010000 	.word	0x40010000
 8005324:	40000400 	.word	0x40000400
 8005328:	40000800 	.word	0x40000800
 800532c:	40000c00 	.word	0x40000c00
 8005330:	40010400 	.word	0x40010400
 8005334:	40014000 	.word	0x40014000
 8005338:	40014400 	.word	0x40014400
 800533c:	40014800 	.word	0x40014800
 8005340:	40001800 	.word	0x40001800
 8005344:	40001c00 	.word	0x40001c00
 8005348:	40002000 	.word	0x40002000

0800534c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800534c:	b480      	push	{r7}
 800534e:	b087      	sub	sp, #28
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
 8005354:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6a1b      	ldr	r3, [r3, #32]
 800535a:	f023 0201 	bic.w	r2, r3, #1
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6a1b      	ldr	r3, [r3, #32]
 8005366:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	699b      	ldr	r3, [r3, #24]
 8005372:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800537a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	f023 0303 	bic.w	r3, r3, #3
 8005382:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	68fa      	ldr	r2, [r7, #12]
 800538a:	4313      	orrs	r3, r2
 800538c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	f023 0302 	bic.w	r3, r3, #2
 8005394:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	689b      	ldr	r3, [r3, #8]
 800539a:	697a      	ldr	r2, [r7, #20]
 800539c:	4313      	orrs	r3, r2
 800539e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	4a20      	ldr	r2, [pc, #128]	; (8005424 <TIM_OC1_SetConfig+0xd8>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d003      	beq.n	80053b0 <TIM_OC1_SetConfig+0x64>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	4a1f      	ldr	r2, [pc, #124]	; (8005428 <TIM_OC1_SetConfig+0xdc>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d10c      	bne.n	80053ca <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	f023 0308 	bic.w	r3, r3, #8
 80053b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	68db      	ldr	r3, [r3, #12]
 80053bc:	697a      	ldr	r2, [r7, #20]
 80053be:	4313      	orrs	r3, r2
 80053c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	f023 0304 	bic.w	r3, r3, #4
 80053c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	4a15      	ldr	r2, [pc, #84]	; (8005424 <TIM_OC1_SetConfig+0xd8>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d003      	beq.n	80053da <TIM_OC1_SetConfig+0x8e>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	4a14      	ldr	r2, [pc, #80]	; (8005428 <TIM_OC1_SetConfig+0xdc>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d111      	bne.n	80053fe <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80053e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80053e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	695b      	ldr	r3, [r3, #20]
 80053ee:	693a      	ldr	r2, [r7, #16]
 80053f0:	4313      	orrs	r3, r2
 80053f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	699b      	ldr	r3, [r3, #24]
 80053f8:	693a      	ldr	r2, [r7, #16]
 80053fa:	4313      	orrs	r3, r2
 80053fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	693a      	ldr	r2, [r7, #16]
 8005402:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	68fa      	ldr	r2, [r7, #12]
 8005408:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	685a      	ldr	r2, [r3, #4]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	697a      	ldr	r2, [r7, #20]
 8005416:	621a      	str	r2, [r3, #32]
}
 8005418:	bf00      	nop
 800541a:	371c      	adds	r7, #28
 800541c:	46bd      	mov	sp, r7
 800541e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005422:	4770      	bx	lr
 8005424:	40010000 	.word	0x40010000
 8005428:	40010400 	.word	0x40010400

0800542c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800542c:	b480      	push	{r7}
 800542e:	b087      	sub	sp, #28
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
 8005434:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6a1b      	ldr	r3, [r3, #32]
 800543a:	f023 0210 	bic.w	r2, r3, #16
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6a1b      	ldr	r3, [r3, #32]
 8005446:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	699b      	ldr	r3, [r3, #24]
 8005452:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800545a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005462:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	021b      	lsls	r3, r3, #8
 800546a:	68fa      	ldr	r2, [r7, #12]
 800546c:	4313      	orrs	r3, r2
 800546e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	f023 0320 	bic.w	r3, r3, #32
 8005476:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	689b      	ldr	r3, [r3, #8]
 800547c:	011b      	lsls	r3, r3, #4
 800547e:	697a      	ldr	r2, [r7, #20]
 8005480:	4313      	orrs	r3, r2
 8005482:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	4a22      	ldr	r2, [pc, #136]	; (8005510 <TIM_OC2_SetConfig+0xe4>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d003      	beq.n	8005494 <TIM_OC2_SetConfig+0x68>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	4a21      	ldr	r2, [pc, #132]	; (8005514 <TIM_OC2_SetConfig+0xe8>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d10d      	bne.n	80054b0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800549a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	68db      	ldr	r3, [r3, #12]
 80054a0:	011b      	lsls	r3, r3, #4
 80054a2:	697a      	ldr	r2, [r7, #20]
 80054a4:	4313      	orrs	r3, r2
 80054a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054ae:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	4a17      	ldr	r2, [pc, #92]	; (8005510 <TIM_OC2_SetConfig+0xe4>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d003      	beq.n	80054c0 <TIM_OC2_SetConfig+0x94>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	4a16      	ldr	r2, [pc, #88]	; (8005514 <TIM_OC2_SetConfig+0xe8>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d113      	bne.n	80054e8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80054c6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80054ce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	695b      	ldr	r3, [r3, #20]
 80054d4:	009b      	lsls	r3, r3, #2
 80054d6:	693a      	ldr	r2, [r7, #16]
 80054d8:	4313      	orrs	r3, r2
 80054da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	699b      	ldr	r3, [r3, #24]
 80054e0:	009b      	lsls	r3, r3, #2
 80054e2:	693a      	ldr	r2, [r7, #16]
 80054e4:	4313      	orrs	r3, r2
 80054e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	693a      	ldr	r2, [r7, #16]
 80054ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	68fa      	ldr	r2, [r7, #12]
 80054f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	685a      	ldr	r2, [r3, #4]
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	697a      	ldr	r2, [r7, #20]
 8005500:	621a      	str	r2, [r3, #32]
}
 8005502:	bf00      	nop
 8005504:	371c      	adds	r7, #28
 8005506:	46bd      	mov	sp, r7
 8005508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550c:	4770      	bx	lr
 800550e:	bf00      	nop
 8005510:	40010000 	.word	0x40010000
 8005514:	40010400 	.word	0x40010400

08005518 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005518:	b480      	push	{r7}
 800551a:	b087      	sub	sp, #28
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
 8005520:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6a1b      	ldr	r3, [r3, #32]
 8005526:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6a1b      	ldr	r3, [r3, #32]
 8005532:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	69db      	ldr	r3, [r3, #28]
 800553e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005546:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	f023 0303 	bic.w	r3, r3, #3
 800554e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	68fa      	ldr	r2, [r7, #12]
 8005556:	4313      	orrs	r3, r2
 8005558:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005560:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	689b      	ldr	r3, [r3, #8]
 8005566:	021b      	lsls	r3, r3, #8
 8005568:	697a      	ldr	r2, [r7, #20]
 800556a:	4313      	orrs	r3, r2
 800556c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	4a21      	ldr	r2, [pc, #132]	; (80055f8 <TIM_OC3_SetConfig+0xe0>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d003      	beq.n	800557e <TIM_OC3_SetConfig+0x66>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	4a20      	ldr	r2, [pc, #128]	; (80055fc <TIM_OC3_SetConfig+0xe4>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d10d      	bne.n	800559a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005584:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	68db      	ldr	r3, [r3, #12]
 800558a:	021b      	lsls	r3, r3, #8
 800558c:	697a      	ldr	r2, [r7, #20]
 800558e:	4313      	orrs	r3, r2
 8005590:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005598:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	4a16      	ldr	r2, [pc, #88]	; (80055f8 <TIM_OC3_SetConfig+0xe0>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d003      	beq.n	80055aa <TIM_OC3_SetConfig+0x92>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	4a15      	ldr	r2, [pc, #84]	; (80055fc <TIM_OC3_SetConfig+0xe4>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d113      	bne.n	80055d2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80055aa:	693b      	ldr	r3, [r7, #16]
 80055ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80055b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80055b2:	693b      	ldr	r3, [r7, #16]
 80055b4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80055b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	695b      	ldr	r3, [r3, #20]
 80055be:	011b      	lsls	r3, r3, #4
 80055c0:	693a      	ldr	r2, [r7, #16]
 80055c2:	4313      	orrs	r3, r2
 80055c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	699b      	ldr	r3, [r3, #24]
 80055ca:	011b      	lsls	r3, r3, #4
 80055cc:	693a      	ldr	r2, [r7, #16]
 80055ce:	4313      	orrs	r3, r2
 80055d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	693a      	ldr	r2, [r7, #16]
 80055d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	68fa      	ldr	r2, [r7, #12]
 80055dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	685a      	ldr	r2, [r3, #4]
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	697a      	ldr	r2, [r7, #20]
 80055ea:	621a      	str	r2, [r3, #32]
}
 80055ec:	bf00      	nop
 80055ee:	371c      	adds	r7, #28
 80055f0:	46bd      	mov	sp, r7
 80055f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f6:	4770      	bx	lr
 80055f8:	40010000 	.word	0x40010000
 80055fc:	40010400 	.word	0x40010400

08005600 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005600:	b480      	push	{r7}
 8005602:	b087      	sub	sp, #28
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
 8005608:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6a1b      	ldr	r3, [r3, #32]
 800560e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6a1b      	ldr	r3, [r3, #32]
 800561a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	69db      	ldr	r3, [r3, #28]
 8005626:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800562e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005636:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	021b      	lsls	r3, r3, #8
 800563e:	68fa      	ldr	r2, [r7, #12]
 8005640:	4313      	orrs	r3, r2
 8005642:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005644:	693b      	ldr	r3, [r7, #16]
 8005646:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800564a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	689b      	ldr	r3, [r3, #8]
 8005650:	031b      	lsls	r3, r3, #12
 8005652:	693a      	ldr	r2, [r7, #16]
 8005654:	4313      	orrs	r3, r2
 8005656:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	4a12      	ldr	r2, [pc, #72]	; (80056a4 <TIM_OC4_SetConfig+0xa4>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d003      	beq.n	8005668 <TIM_OC4_SetConfig+0x68>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	4a11      	ldr	r2, [pc, #68]	; (80056a8 <TIM_OC4_SetConfig+0xa8>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d109      	bne.n	800567c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800566e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	695b      	ldr	r3, [r3, #20]
 8005674:	019b      	lsls	r3, r3, #6
 8005676:	697a      	ldr	r2, [r7, #20]
 8005678:	4313      	orrs	r3, r2
 800567a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	697a      	ldr	r2, [r7, #20]
 8005680:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	68fa      	ldr	r2, [r7, #12]
 8005686:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	685a      	ldr	r2, [r3, #4]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	693a      	ldr	r2, [r7, #16]
 8005694:	621a      	str	r2, [r3, #32]
}
 8005696:	bf00      	nop
 8005698:	371c      	adds	r7, #28
 800569a:	46bd      	mov	sp, r7
 800569c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a0:	4770      	bx	lr
 80056a2:	bf00      	nop
 80056a4:	40010000 	.word	0x40010000
 80056a8:	40010400 	.word	0x40010400

080056ac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b087      	sub	sp, #28
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	60f8      	str	r0, [r7, #12]
 80056b4:	60b9      	str	r1, [r7, #8]
 80056b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	f003 031f 	and.w	r3, r3, #31
 80056be:	2201      	movs	r2, #1
 80056c0:	fa02 f303 	lsl.w	r3, r2, r3
 80056c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	6a1a      	ldr	r2, [r3, #32]
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	43db      	mvns	r3, r3
 80056ce:	401a      	ands	r2, r3
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	6a1a      	ldr	r2, [r3, #32]
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	f003 031f 	and.w	r3, r3, #31
 80056de:	6879      	ldr	r1, [r7, #4]
 80056e0:	fa01 f303 	lsl.w	r3, r1, r3
 80056e4:	431a      	orrs	r2, r3
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	621a      	str	r2, [r3, #32]
}
 80056ea:	bf00      	nop
 80056ec:	371c      	adds	r7, #28
 80056ee:	46bd      	mov	sp, r7
 80056f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f4:	4770      	bx	lr
	...

080056f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80056f8:	b480      	push	{r7}
 80056fa:	b085      	sub	sp, #20
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
 8005700:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005708:	2b01      	cmp	r3, #1
 800570a:	d101      	bne.n	8005710 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800570c:	2302      	movs	r3, #2
 800570e:	e05a      	b.n	80057c6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2201      	movs	r2, #1
 8005714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2202      	movs	r2, #2
 800571c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	689b      	ldr	r3, [r3, #8]
 800572e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005736:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	68fa      	ldr	r2, [r7, #12]
 800573e:	4313      	orrs	r3, r2
 8005740:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	68fa      	ldr	r2, [r7, #12]
 8005748:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4a21      	ldr	r2, [pc, #132]	; (80057d4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d022      	beq.n	800579a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800575c:	d01d      	beq.n	800579a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	4a1d      	ldr	r2, [pc, #116]	; (80057d8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d018      	beq.n	800579a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4a1b      	ldr	r2, [pc, #108]	; (80057dc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d013      	beq.n	800579a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4a1a      	ldr	r2, [pc, #104]	; (80057e0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d00e      	beq.n	800579a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4a18      	ldr	r2, [pc, #96]	; (80057e4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d009      	beq.n	800579a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4a17      	ldr	r2, [pc, #92]	; (80057e8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d004      	beq.n	800579a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4a15      	ldr	r2, [pc, #84]	; (80057ec <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d10c      	bne.n	80057b4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	685b      	ldr	r3, [r3, #4]
 80057a6:	68ba      	ldr	r2, [r7, #8]
 80057a8:	4313      	orrs	r3, r2
 80057aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	68ba      	ldr	r2, [r7, #8]
 80057b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2201      	movs	r2, #1
 80057b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2200      	movs	r2, #0
 80057c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80057c4:	2300      	movs	r3, #0
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	3714      	adds	r7, #20
 80057ca:	46bd      	mov	sp, r7
 80057cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d0:	4770      	bx	lr
 80057d2:	bf00      	nop
 80057d4:	40010000 	.word	0x40010000
 80057d8:	40000400 	.word	0x40000400
 80057dc:	40000800 	.word	0x40000800
 80057e0:	40000c00 	.word	0x40000c00
 80057e4:	40010400 	.word	0x40010400
 80057e8:	40014000 	.word	0x40014000
 80057ec:	40001800 	.word	0x40001800

080057f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80057f0:	b480      	push	{r7}
 80057f2:	b083      	sub	sp, #12
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80057f8:	bf00      	nop
 80057fa:	370c      	adds	r7, #12
 80057fc:	46bd      	mov	sp, r7
 80057fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005802:	4770      	bx	lr

08005804 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005804:	b480      	push	{r7}
 8005806:	b083      	sub	sp, #12
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800580c:	bf00      	nop
 800580e:	370c      	adds	r7, #12
 8005810:	46bd      	mov	sp, r7
 8005812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005816:	4770      	bx	lr

08005818 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b082      	sub	sp, #8
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d101      	bne.n	800582a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005826:	2301      	movs	r3, #1
 8005828:	e03f      	b.n	80058aa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005830:	b2db      	uxtb	r3, r3
 8005832:	2b00      	cmp	r3, #0
 8005834:	d106      	bne.n	8005844 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2200      	movs	r2, #0
 800583a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	f7fc f94a 	bl	8001ad8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2224      	movs	r2, #36	; 0x24
 8005848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	68da      	ldr	r2, [r3, #12]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800585a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800585c:	6878      	ldr	r0, [r7, #4]
 800585e:	f000 fe9b 	bl	8006598 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	691a      	ldr	r2, [r3, #16]
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005870:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	695a      	ldr	r2, [r3, #20]
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005880:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	68da      	ldr	r2, [r3, #12]
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005890:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2200      	movs	r2, #0
 8005896:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2220      	movs	r2, #32
 800589c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2220      	movs	r2, #32
 80058a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80058a8:	2300      	movs	r3, #0
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	3708      	adds	r7, #8
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}

080058b2 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80058b2:	b580      	push	{r7, lr}
 80058b4:	b08c      	sub	sp, #48	; 0x30
 80058b6:	af00      	add	r7, sp, #0
 80058b8:	60f8      	str	r0, [r7, #12]
 80058ba:	60b9      	str	r1, [r7, #8]
 80058bc:	4613      	mov	r3, r2
 80058be:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80058c6:	b2db      	uxtb	r3, r3
 80058c8:	2b20      	cmp	r3, #32
 80058ca:	d152      	bne.n	8005972 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d002      	beq.n	80058d8 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 80058d2:	88fb      	ldrh	r3, [r7, #6]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d101      	bne.n	80058dc <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 80058d8:	2301      	movs	r3, #1
 80058da:	e04b      	b.n	8005974 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058e2:	2b01      	cmp	r3, #1
 80058e4:	d101      	bne.n	80058ea <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 80058e6:	2302      	movs	r3, #2
 80058e8:	e044      	b.n	8005974 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	2201      	movs	r2, #1
 80058ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	2201      	movs	r2, #1
 80058f6:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80058f8:	88fb      	ldrh	r3, [r7, #6]
 80058fa:	461a      	mov	r2, r3
 80058fc:	68b9      	ldr	r1, [r7, #8]
 80058fe:	68f8      	ldr	r0, [r7, #12]
 8005900:	f000 fbea 	bl	80060d8 <UART_Start_Receive_DMA>
 8005904:	4603      	mov	r3, r0
 8005906:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800590a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800590e:	2b00      	cmp	r3, #0
 8005910:	d12c      	bne.n	800596c <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005916:	2b01      	cmp	r3, #1
 8005918:	d125      	bne.n	8005966 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800591a:	2300      	movs	r3, #0
 800591c:	613b      	str	r3, [r7, #16]
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	613b      	str	r3, [r7, #16]
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	613b      	str	r3, [r7, #16]
 800592e:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	330c      	adds	r3, #12
 8005936:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005938:	69bb      	ldr	r3, [r7, #24]
 800593a:	e853 3f00 	ldrex	r3, [r3]
 800593e:	617b      	str	r3, [r7, #20]
   return(result);
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	f043 0310 	orr.w	r3, r3, #16
 8005946:	62bb      	str	r3, [r7, #40]	; 0x28
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	330c      	adds	r3, #12
 800594e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005950:	627a      	str	r2, [r7, #36]	; 0x24
 8005952:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005954:	6a39      	ldr	r1, [r7, #32]
 8005956:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005958:	e841 2300 	strex	r3, r2, [r1]
 800595c:	61fb      	str	r3, [r7, #28]
   return(result);
 800595e:	69fb      	ldr	r3, [r7, #28]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d1e5      	bne.n	8005930 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 8005964:	e002      	b.n	800596c <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8005966:	2301      	movs	r3, #1
 8005968:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800596c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005970:	e000      	b.n	8005974 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8005972:	2302      	movs	r3, #2
  }
}
 8005974:	4618      	mov	r0, r3
 8005976:	3730      	adds	r7, #48	; 0x30
 8005978:	46bd      	mov	sp, r7
 800597a:	bd80      	pop	{r7, pc}

0800597c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b0ba      	sub	sp, #232	; 0xe8
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	68db      	ldr	r3, [r3, #12]
 8005994:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	695b      	ldr	r3, [r3, #20]
 800599e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80059a2:	2300      	movs	r3, #0
 80059a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80059a8:	2300      	movs	r3, #0
 80059aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80059ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059b2:	f003 030f 	and.w	r3, r3, #15
 80059b6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80059ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d10f      	bne.n	80059e2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80059c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059c6:	f003 0320 	and.w	r3, r3, #32
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d009      	beq.n	80059e2 <HAL_UART_IRQHandler+0x66>
 80059ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059d2:	f003 0320 	and.w	r3, r3, #32
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d003      	beq.n	80059e2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f000 fd21 	bl	8006422 <UART_Receive_IT>
      return;
 80059e0:	e256      	b.n	8005e90 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80059e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	f000 80de 	beq.w	8005ba8 <HAL_UART_IRQHandler+0x22c>
 80059ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80059f0:	f003 0301 	and.w	r3, r3, #1
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d106      	bne.n	8005a06 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80059f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059fc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	f000 80d1 	beq.w	8005ba8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005a06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a0a:	f003 0301 	and.w	r3, r3, #1
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d00b      	beq.n	8005a2a <HAL_UART_IRQHandler+0xae>
 8005a12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d005      	beq.n	8005a2a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a22:	f043 0201 	orr.w	r2, r3, #1
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005a2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a2e:	f003 0304 	and.w	r3, r3, #4
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d00b      	beq.n	8005a4e <HAL_UART_IRQHandler+0xd2>
 8005a36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a3a:	f003 0301 	and.w	r3, r3, #1
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d005      	beq.n	8005a4e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a46:	f043 0202 	orr.w	r2, r3, #2
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005a4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a52:	f003 0302 	and.w	r3, r3, #2
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d00b      	beq.n	8005a72 <HAL_UART_IRQHandler+0xf6>
 8005a5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a5e:	f003 0301 	and.w	r3, r3, #1
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d005      	beq.n	8005a72 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a6a:	f043 0204 	orr.w	r2, r3, #4
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005a72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a76:	f003 0308 	and.w	r3, r3, #8
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d011      	beq.n	8005aa2 <HAL_UART_IRQHandler+0x126>
 8005a7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a82:	f003 0320 	and.w	r3, r3, #32
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d105      	bne.n	8005a96 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005a8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a8e:	f003 0301 	and.w	r3, r3, #1
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d005      	beq.n	8005aa2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a9a:	f043 0208 	orr.w	r2, r3, #8
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	f000 81ed 	beq.w	8005e86 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005aac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ab0:	f003 0320 	and.w	r3, r3, #32
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d008      	beq.n	8005aca <HAL_UART_IRQHandler+0x14e>
 8005ab8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005abc:	f003 0320 	and.w	r3, r3, #32
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d002      	beq.n	8005aca <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005ac4:	6878      	ldr	r0, [r7, #4]
 8005ac6:	f000 fcac 	bl	8006422 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	695b      	ldr	r3, [r3, #20]
 8005ad0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ad4:	2b40      	cmp	r3, #64	; 0x40
 8005ad6:	bf0c      	ite	eq
 8005ad8:	2301      	moveq	r3, #1
 8005ada:	2300      	movne	r3, #0
 8005adc:	b2db      	uxtb	r3, r3
 8005ade:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ae6:	f003 0308 	and.w	r3, r3, #8
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d103      	bne.n	8005af6 <HAL_UART_IRQHandler+0x17a>
 8005aee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d04f      	beq.n	8005b96 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	f000 fbb4 	bl	8006264 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	695b      	ldr	r3, [r3, #20]
 8005b02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b06:	2b40      	cmp	r3, #64	; 0x40
 8005b08:	d141      	bne.n	8005b8e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	3314      	adds	r3, #20
 8005b10:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b14:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005b18:	e853 3f00 	ldrex	r3, [r3]
 8005b1c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005b20:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005b24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b28:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	3314      	adds	r3, #20
 8005b32:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005b36:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005b3a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b3e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005b42:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005b46:	e841 2300 	strex	r3, r2, [r1]
 8005b4a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005b4e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d1d9      	bne.n	8005b0a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d013      	beq.n	8005b86 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b62:	4a7d      	ldr	r2, [pc, #500]	; (8005d58 <HAL_UART_IRQHandler+0x3dc>)
 8005b64:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	f7fc fbb4 	bl	80022d8 <HAL_DMA_Abort_IT>
 8005b70:	4603      	mov	r3, r0
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d016      	beq.n	8005ba4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b7c:	687a      	ldr	r2, [r7, #4]
 8005b7e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005b80:	4610      	mov	r0, r2
 8005b82:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b84:	e00e      	b.n	8005ba4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f000 f9a4 	bl	8005ed4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b8c:	e00a      	b.n	8005ba4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f000 f9a0 	bl	8005ed4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b94:	e006      	b.n	8005ba4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005b96:	6878      	ldr	r0, [r7, #4]
 8005b98:	f000 f99c 	bl	8005ed4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005ba2:	e170      	b.n	8005e86 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ba4:	bf00      	nop
    return;
 8005ba6:	e16e      	b.n	8005e86 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bac:	2b01      	cmp	r3, #1
 8005bae:	f040 814a 	bne.w	8005e46 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005bb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bb6:	f003 0310 	and.w	r3, r3, #16
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	f000 8143 	beq.w	8005e46 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005bc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bc4:	f003 0310 	and.w	r3, r3, #16
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	f000 813c 	beq.w	8005e46 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005bce:	2300      	movs	r3, #0
 8005bd0:	60bb      	str	r3, [r7, #8]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	60bb      	str	r3, [r7, #8]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	685b      	ldr	r3, [r3, #4]
 8005be0:	60bb      	str	r3, [r7, #8]
 8005be2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	695b      	ldr	r3, [r3, #20]
 8005bea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bee:	2b40      	cmp	r3, #64	; 0x40
 8005bf0:	f040 80b4 	bne.w	8005d5c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	685b      	ldr	r3, [r3, #4]
 8005bfc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005c00:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	f000 8140 	beq.w	8005e8a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005c0e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005c12:	429a      	cmp	r2, r3
 8005c14:	f080 8139 	bcs.w	8005e8a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005c1e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c24:	69db      	ldr	r3, [r3, #28]
 8005c26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c2a:	f000 8088 	beq.w	8005d3e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	330c      	adds	r3, #12
 8005c34:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c38:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005c3c:	e853 3f00 	ldrex	r3, [r3]
 8005c40:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005c44:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005c48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c4c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	330c      	adds	r3, #12
 8005c56:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005c5a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005c5e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c62:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005c66:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005c6a:	e841 2300 	strex	r3, r2, [r1]
 8005c6e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005c72:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d1d9      	bne.n	8005c2e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	3314      	adds	r3, #20
 8005c80:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c84:	e853 3f00 	ldrex	r3, [r3]
 8005c88:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005c8a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c8c:	f023 0301 	bic.w	r3, r3, #1
 8005c90:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	3314      	adds	r3, #20
 8005c9a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005c9e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005ca2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ca4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005ca6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005caa:	e841 2300 	strex	r3, r2, [r1]
 8005cae:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005cb0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d1e1      	bne.n	8005c7a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	3314      	adds	r3, #20
 8005cbc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cbe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005cc0:	e853 3f00 	ldrex	r3, [r3]
 8005cc4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005cc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005cc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ccc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	3314      	adds	r3, #20
 8005cd6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005cda:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005cdc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cde:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005ce0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005ce2:	e841 2300 	strex	r3, r2, [r1]
 8005ce6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005ce8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d1e3      	bne.n	8005cb6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2220      	movs	r2, #32
 8005cf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	330c      	adds	r3, #12
 8005d02:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d06:	e853 3f00 	ldrex	r3, [r3]
 8005d0a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005d0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d0e:	f023 0310 	bic.w	r3, r3, #16
 8005d12:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	330c      	adds	r3, #12
 8005d1c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005d20:	65ba      	str	r2, [r7, #88]	; 0x58
 8005d22:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d24:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005d26:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005d28:	e841 2300 	strex	r3, r2, [r1]
 8005d2c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005d2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d1e3      	bne.n	8005cfc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d38:	4618      	mov	r0, r3
 8005d3a:	f7fc fa5d 	bl	80021f8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d46:	b29b      	uxth	r3, r3
 8005d48:	1ad3      	subs	r3, r2, r3
 8005d4a:	b29b      	uxth	r3, r3
 8005d4c:	4619      	mov	r1, r3
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	f7fa ff1e 	bl	8000b90 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005d54:	e099      	b.n	8005e8a <HAL_UART_IRQHandler+0x50e>
 8005d56:	bf00      	nop
 8005d58:	0800632b 	.word	0x0800632b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d64:	b29b      	uxth	r3, r3
 8005d66:	1ad3      	subs	r3, r2, r3
 8005d68:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d70:	b29b      	uxth	r3, r3
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	f000 808b 	beq.w	8005e8e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005d78:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	f000 8086 	beq.w	8005e8e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	330c      	adds	r3, #12
 8005d88:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d8c:	e853 3f00 	ldrex	r3, [r3]
 8005d90:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005d92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d94:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005d98:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	330c      	adds	r3, #12
 8005da2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005da6:	647a      	str	r2, [r7, #68]	; 0x44
 8005da8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005daa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005dac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005dae:	e841 2300 	strex	r3, r2, [r1]
 8005db2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005db4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d1e3      	bne.n	8005d82 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	3314      	adds	r3, #20
 8005dc0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc4:	e853 3f00 	ldrex	r3, [r3]
 8005dc8:	623b      	str	r3, [r7, #32]
   return(result);
 8005dca:	6a3b      	ldr	r3, [r7, #32]
 8005dcc:	f023 0301 	bic.w	r3, r3, #1
 8005dd0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	3314      	adds	r3, #20
 8005dda:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005dde:	633a      	str	r2, [r7, #48]	; 0x30
 8005de0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005de2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005de4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005de6:	e841 2300 	strex	r3, r2, [r1]
 8005dea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d1e3      	bne.n	8005dba <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2220      	movs	r2, #32
 8005df6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	330c      	adds	r3, #12
 8005e06:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	e853 3f00 	ldrex	r3, [r3]
 8005e0e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	f023 0310 	bic.w	r3, r3, #16
 8005e16:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	330c      	adds	r3, #12
 8005e20:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005e24:	61fa      	str	r2, [r7, #28]
 8005e26:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e28:	69b9      	ldr	r1, [r7, #24]
 8005e2a:	69fa      	ldr	r2, [r7, #28]
 8005e2c:	e841 2300 	strex	r3, r2, [r1]
 8005e30:	617b      	str	r3, [r7, #20]
   return(result);
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d1e3      	bne.n	8005e00 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005e38:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005e3c:	4619      	mov	r1, r3
 8005e3e:	6878      	ldr	r0, [r7, #4]
 8005e40:	f7fa fea6 	bl	8000b90 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005e44:	e023      	b.n	8005e8e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005e46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d009      	beq.n	8005e66 <HAL_UART_IRQHandler+0x4ea>
 8005e52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d003      	beq.n	8005e66 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f000 fa77 	bl	8006352 <UART_Transmit_IT>
    return;
 8005e64:	e014      	b.n	8005e90 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005e66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d00e      	beq.n	8005e90 <HAL_UART_IRQHandler+0x514>
 8005e72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d008      	beq.n	8005e90 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005e7e:	6878      	ldr	r0, [r7, #4]
 8005e80:	f000 fab7 	bl	80063f2 <UART_EndTransmit_IT>
    return;
 8005e84:	e004      	b.n	8005e90 <HAL_UART_IRQHandler+0x514>
    return;
 8005e86:	bf00      	nop
 8005e88:	e002      	b.n	8005e90 <HAL_UART_IRQHandler+0x514>
      return;
 8005e8a:	bf00      	nop
 8005e8c:	e000      	b.n	8005e90 <HAL_UART_IRQHandler+0x514>
      return;
 8005e8e:	bf00      	nop
  }
}
 8005e90:	37e8      	adds	r7, #232	; 0xe8
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bd80      	pop	{r7, pc}
 8005e96:	bf00      	nop

08005e98 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b083      	sub	sp, #12
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005ea0:	bf00      	nop
 8005ea2:	370c      	adds	r7, #12
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eaa:	4770      	bx	lr

08005eac <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005eac:	b480      	push	{r7}
 8005eae:	b083      	sub	sp, #12
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005eb4:	bf00      	nop
 8005eb6:	370c      	adds	r7, #12
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebe:	4770      	bx	lr

08005ec0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b083      	sub	sp, #12
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005ec8:	bf00      	nop
 8005eca:	370c      	adds	r7, #12
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed2:	4770      	bx	lr

08005ed4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	b083      	sub	sp, #12
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005edc:	bf00      	nop
 8005ede:	370c      	adds	r7, #12
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee6:	4770      	bx	lr

08005ee8 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b09c      	sub	sp, #112	; 0x70
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ef4:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d172      	bne.n	8005fea <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8005f04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f06:	2200      	movs	r2, #0
 8005f08:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005f0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	330c      	adds	r3, #12
 8005f10:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f14:	e853 3f00 	ldrex	r3, [r3]
 8005f18:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005f1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f20:	66bb      	str	r3, [r7, #104]	; 0x68
 8005f22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	330c      	adds	r3, #12
 8005f28:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005f2a:	65ba      	str	r2, [r7, #88]	; 0x58
 8005f2c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f2e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005f30:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005f32:	e841 2300 	strex	r3, r2, [r1]
 8005f36:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005f38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d1e5      	bne.n	8005f0a <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	3314      	adds	r3, #20
 8005f44:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f48:	e853 3f00 	ldrex	r3, [r3]
 8005f4c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005f4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f50:	f023 0301 	bic.w	r3, r3, #1
 8005f54:	667b      	str	r3, [r7, #100]	; 0x64
 8005f56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	3314      	adds	r3, #20
 8005f5c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005f5e:	647a      	str	r2, [r7, #68]	; 0x44
 8005f60:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f62:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005f64:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f66:	e841 2300 	strex	r3, r2, [r1]
 8005f6a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005f6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d1e5      	bne.n	8005f3e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	3314      	adds	r3, #20
 8005f78:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f7c:	e853 3f00 	ldrex	r3, [r3]
 8005f80:	623b      	str	r3, [r7, #32]
   return(result);
 8005f82:	6a3b      	ldr	r3, [r7, #32]
 8005f84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f88:	663b      	str	r3, [r7, #96]	; 0x60
 8005f8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	3314      	adds	r3, #20
 8005f90:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005f92:	633a      	str	r2, [r7, #48]	; 0x30
 8005f94:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f96:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005f98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f9a:	e841 2300 	strex	r3, r2, [r1]
 8005f9e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d1e5      	bne.n	8005f72 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005fa6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fa8:	2220      	movs	r2, #32
 8005faa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fb2:	2b01      	cmp	r3, #1
 8005fb4:	d119      	bne.n	8005fea <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	330c      	adds	r3, #12
 8005fbc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fbe:	693b      	ldr	r3, [r7, #16]
 8005fc0:	e853 3f00 	ldrex	r3, [r3]
 8005fc4:	60fb      	str	r3, [r7, #12]
   return(result);
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	f023 0310 	bic.w	r3, r3, #16
 8005fcc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005fce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	330c      	adds	r3, #12
 8005fd4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005fd6:	61fa      	str	r2, [r7, #28]
 8005fd8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fda:	69b9      	ldr	r1, [r7, #24]
 8005fdc:	69fa      	ldr	r2, [r7, #28]
 8005fde:	e841 2300 	strex	r3, r2, [r1]
 8005fe2:	617b      	str	r3, [r7, #20]
   return(result);
 8005fe4:	697b      	ldr	r3, [r7, #20]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d1e5      	bne.n	8005fb6 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fee:	2b01      	cmp	r3, #1
 8005ff0:	d106      	bne.n	8006000 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005ff2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ff4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005ff6:	4619      	mov	r1, r3
 8005ff8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005ffa:	f7fa fdc9 	bl	8000b90 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005ffe:	e002      	b.n	8006006 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8006000:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006002:	f7ff ff53 	bl	8005eac <HAL_UART_RxCpltCallback>
}
 8006006:	bf00      	nop
 8006008:	3770      	adds	r7, #112	; 0x70
 800600a:	46bd      	mov	sp, r7
 800600c:	bd80      	pop	{r7, pc}

0800600e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800600e:	b580      	push	{r7, lr}
 8006010:	b084      	sub	sp, #16
 8006012:	af00      	add	r7, sp, #0
 8006014:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800601a:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006020:	2b01      	cmp	r3, #1
 8006022:	d108      	bne.n	8006036 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006028:	085b      	lsrs	r3, r3, #1
 800602a:	b29b      	uxth	r3, r3
 800602c:	4619      	mov	r1, r3
 800602e:	68f8      	ldr	r0, [r7, #12]
 8006030:	f7fa fdae 	bl	8000b90 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006034:	e002      	b.n	800603c <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8006036:	68f8      	ldr	r0, [r7, #12]
 8006038:	f7ff ff42 	bl	8005ec0 <HAL_UART_RxHalfCpltCallback>
}
 800603c:	bf00      	nop
 800603e:	3710      	adds	r7, #16
 8006040:	46bd      	mov	sp, r7
 8006042:	bd80      	pop	{r7, pc}

08006044 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b084      	sub	sp, #16
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800604c:	2300      	movs	r3, #0
 800604e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006054:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	695b      	ldr	r3, [r3, #20]
 800605c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006060:	2b80      	cmp	r3, #128	; 0x80
 8006062:	bf0c      	ite	eq
 8006064:	2301      	moveq	r3, #1
 8006066:	2300      	movne	r3, #0
 8006068:	b2db      	uxtb	r3, r3
 800606a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006072:	b2db      	uxtb	r3, r3
 8006074:	2b21      	cmp	r3, #33	; 0x21
 8006076:	d108      	bne.n	800608a <UART_DMAError+0x46>
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d005      	beq.n	800608a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	2200      	movs	r2, #0
 8006082:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006084:	68b8      	ldr	r0, [r7, #8]
 8006086:	f000 f8c5 	bl	8006214 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	695b      	ldr	r3, [r3, #20]
 8006090:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006094:	2b40      	cmp	r3, #64	; 0x40
 8006096:	bf0c      	ite	eq
 8006098:	2301      	moveq	r3, #1
 800609a:	2300      	movne	r3, #0
 800609c:	b2db      	uxtb	r3, r3
 800609e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80060a6:	b2db      	uxtb	r3, r3
 80060a8:	2b22      	cmp	r3, #34	; 0x22
 80060aa:	d108      	bne.n	80060be <UART_DMAError+0x7a>
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d005      	beq.n	80060be <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	2200      	movs	r2, #0
 80060b6:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80060b8:	68b8      	ldr	r0, [r7, #8]
 80060ba:	f000 f8d3 	bl	8006264 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060c2:	f043 0210 	orr.w	r2, r3, #16
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80060ca:	68b8      	ldr	r0, [r7, #8]
 80060cc:	f7ff ff02 	bl	8005ed4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80060d0:	bf00      	nop
 80060d2:	3710      	adds	r7, #16
 80060d4:	46bd      	mov	sp, r7
 80060d6:	bd80      	pop	{r7, pc}

080060d8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b098      	sub	sp, #96	; 0x60
 80060dc:	af00      	add	r7, sp, #0
 80060de:	60f8      	str	r0, [r7, #12]
 80060e0:	60b9      	str	r1, [r7, #8]
 80060e2:	4613      	mov	r3, r2
 80060e4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80060e6:	68ba      	ldr	r2, [r7, #8]
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	88fa      	ldrh	r2, [r7, #6]
 80060f0:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	2200      	movs	r2, #0
 80060f6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	2222      	movs	r2, #34	; 0x22
 80060fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006104:	4a40      	ldr	r2, [pc, #256]	; (8006208 <UART_Start_Receive_DMA+0x130>)
 8006106:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800610c:	4a3f      	ldr	r2, [pc, #252]	; (800620c <UART_Start_Receive_DMA+0x134>)
 800610e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006114:	4a3e      	ldr	r2, [pc, #248]	; (8006210 <UART_Start_Receive_DMA+0x138>)
 8006116:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800611c:	2200      	movs	r2, #0
 800611e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006120:	f107 0308 	add.w	r3, r7, #8
 8006124:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	3304      	adds	r3, #4
 8006130:	4619      	mov	r1, r3
 8006132:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006134:	681a      	ldr	r2, [r3, #0]
 8006136:	88fb      	ldrh	r3, [r7, #6]
 8006138:	f7fc f806 	bl	8002148 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800613c:	2300      	movs	r3, #0
 800613e:	613b      	str	r3, [r7, #16]
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	613b      	str	r3, [r7, #16]
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	685b      	ldr	r3, [r3, #4]
 800614e:	613b      	str	r3, [r7, #16]
 8006150:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	2200      	movs	r2, #0
 8006156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	691b      	ldr	r3, [r3, #16]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d019      	beq.n	8006196 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	330c      	adds	r3, #12
 8006168:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800616a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800616c:	e853 3f00 	ldrex	r3, [r3]
 8006170:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006172:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006174:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006178:	65bb      	str	r3, [r7, #88]	; 0x58
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	330c      	adds	r3, #12
 8006180:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006182:	64fa      	str	r2, [r7, #76]	; 0x4c
 8006184:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006186:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006188:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800618a:	e841 2300 	strex	r3, r2, [r1]
 800618e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006190:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006192:	2b00      	cmp	r3, #0
 8006194:	d1e5      	bne.n	8006162 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	3314      	adds	r3, #20
 800619c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800619e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061a0:	e853 3f00 	ldrex	r3, [r3]
 80061a4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80061a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061a8:	f043 0301 	orr.w	r3, r3, #1
 80061ac:	657b      	str	r3, [r7, #84]	; 0x54
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	3314      	adds	r3, #20
 80061b4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80061b6:	63ba      	str	r2, [r7, #56]	; 0x38
 80061b8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ba:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80061bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80061be:	e841 2300 	strex	r3, r2, [r1]
 80061c2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80061c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d1e5      	bne.n	8006196 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	3314      	adds	r3, #20
 80061d0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061d2:	69bb      	ldr	r3, [r7, #24]
 80061d4:	e853 3f00 	ldrex	r3, [r3]
 80061d8:	617b      	str	r3, [r7, #20]
   return(result);
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80061e0:	653b      	str	r3, [r7, #80]	; 0x50
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	3314      	adds	r3, #20
 80061e8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80061ea:	627a      	str	r2, [r7, #36]	; 0x24
 80061ec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ee:	6a39      	ldr	r1, [r7, #32]
 80061f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061f2:	e841 2300 	strex	r3, r2, [r1]
 80061f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80061f8:	69fb      	ldr	r3, [r7, #28]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d1e5      	bne.n	80061ca <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 80061fe:	2300      	movs	r3, #0
}
 8006200:	4618      	mov	r0, r3
 8006202:	3760      	adds	r7, #96	; 0x60
 8006204:	46bd      	mov	sp, r7
 8006206:	bd80      	pop	{r7, pc}
 8006208:	08005ee9 	.word	0x08005ee9
 800620c:	0800600f 	.word	0x0800600f
 8006210:	08006045 	.word	0x08006045

08006214 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006214:	b480      	push	{r7}
 8006216:	b089      	sub	sp, #36	; 0x24
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	330c      	adds	r3, #12
 8006222:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	e853 3f00 	ldrex	r3, [r3]
 800622a:	60bb      	str	r3, [r7, #8]
   return(result);
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006232:	61fb      	str	r3, [r7, #28]
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	330c      	adds	r3, #12
 800623a:	69fa      	ldr	r2, [r7, #28]
 800623c:	61ba      	str	r2, [r7, #24]
 800623e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006240:	6979      	ldr	r1, [r7, #20]
 8006242:	69ba      	ldr	r2, [r7, #24]
 8006244:	e841 2300 	strex	r3, r2, [r1]
 8006248:	613b      	str	r3, [r7, #16]
   return(result);
 800624a:	693b      	ldr	r3, [r7, #16]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d1e5      	bne.n	800621c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2220      	movs	r2, #32
 8006254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8006258:	bf00      	nop
 800625a:	3724      	adds	r7, #36	; 0x24
 800625c:	46bd      	mov	sp, r7
 800625e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006262:	4770      	bx	lr

08006264 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006264:	b480      	push	{r7}
 8006266:	b095      	sub	sp, #84	; 0x54
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	330c      	adds	r3, #12
 8006272:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006274:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006276:	e853 3f00 	ldrex	r3, [r3]
 800627a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800627c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800627e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006282:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	330c      	adds	r3, #12
 800628a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800628c:	643a      	str	r2, [r7, #64]	; 0x40
 800628e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006290:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006292:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006294:	e841 2300 	strex	r3, r2, [r1]
 8006298:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800629a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800629c:	2b00      	cmp	r3, #0
 800629e:	d1e5      	bne.n	800626c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	3314      	adds	r3, #20
 80062a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062a8:	6a3b      	ldr	r3, [r7, #32]
 80062aa:	e853 3f00 	ldrex	r3, [r3]
 80062ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80062b0:	69fb      	ldr	r3, [r7, #28]
 80062b2:	f023 0301 	bic.w	r3, r3, #1
 80062b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	3314      	adds	r3, #20
 80062be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80062c0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80062c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80062c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80062c8:	e841 2300 	strex	r3, r2, [r1]
 80062cc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80062ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d1e5      	bne.n	80062a0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062d8:	2b01      	cmp	r3, #1
 80062da:	d119      	bne.n	8006310 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	330c      	adds	r3, #12
 80062e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	e853 3f00 	ldrex	r3, [r3]
 80062ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	f023 0310 	bic.w	r3, r3, #16
 80062f2:	647b      	str	r3, [r7, #68]	; 0x44
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	330c      	adds	r3, #12
 80062fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80062fc:	61ba      	str	r2, [r7, #24]
 80062fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006300:	6979      	ldr	r1, [r7, #20]
 8006302:	69ba      	ldr	r2, [r7, #24]
 8006304:	e841 2300 	strex	r3, r2, [r1]
 8006308:	613b      	str	r3, [r7, #16]
   return(result);
 800630a:	693b      	ldr	r3, [r7, #16]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d1e5      	bne.n	80062dc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2220      	movs	r2, #32
 8006314:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2200      	movs	r2, #0
 800631c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800631e:	bf00      	nop
 8006320:	3754      	adds	r7, #84	; 0x54
 8006322:	46bd      	mov	sp, r7
 8006324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006328:	4770      	bx	lr

0800632a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800632a:	b580      	push	{r7, lr}
 800632c:	b084      	sub	sp, #16
 800632e:	af00      	add	r7, sp, #0
 8006330:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006336:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	2200      	movs	r2, #0
 800633c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	2200      	movs	r2, #0
 8006342:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006344:	68f8      	ldr	r0, [r7, #12]
 8006346:	f7ff fdc5 	bl	8005ed4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800634a:	bf00      	nop
 800634c:	3710      	adds	r7, #16
 800634e:	46bd      	mov	sp, r7
 8006350:	bd80      	pop	{r7, pc}

08006352 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006352:	b480      	push	{r7}
 8006354:	b085      	sub	sp, #20
 8006356:	af00      	add	r7, sp, #0
 8006358:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006360:	b2db      	uxtb	r3, r3
 8006362:	2b21      	cmp	r3, #33	; 0x21
 8006364:	d13e      	bne.n	80063e4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	689b      	ldr	r3, [r3, #8]
 800636a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800636e:	d114      	bne.n	800639a <UART_Transmit_IT+0x48>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	691b      	ldr	r3, [r3, #16]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d110      	bne.n	800639a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6a1b      	ldr	r3, [r3, #32]
 800637c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	881b      	ldrh	r3, [r3, #0]
 8006382:	461a      	mov	r2, r3
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800638c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6a1b      	ldr	r3, [r3, #32]
 8006392:	1c9a      	adds	r2, r3, #2
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	621a      	str	r2, [r3, #32]
 8006398:	e008      	b.n	80063ac <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6a1b      	ldr	r3, [r3, #32]
 800639e:	1c59      	adds	r1, r3, #1
 80063a0:	687a      	ldr	r2, [r7, #4]
 80063a2:	6211      	str	r1, [r2, #32]
 80063a4:	781a      	ldrb	r2, [r3, #0]
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80063b0:	b29b      	uxth	r3, r3
 80063b2:	3b01      	subs	r3, #1
 80063b4:	b29b      	uxth	r3, r3
 80063b6:	687a      	ldr	r2, [r7, #4]
 80063b8:	4619      	mov	r1, r3
 80063ba:	84d1      	strh	r1, [r2, #38]	; 0x26
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d10f      	bne.n	80063e0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	68da      	ldr	r2, [r3, #12]
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80063ce:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	68da      	ldr	r2, [r3, #12]
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80063de:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80063e0:	2300      	movs	r3, #0
 80063e2:	e000      	b.n	80063e6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80063e4:	2302      	movs	r3, #2
  }
}
 80063e6:	4618      	mov	r0, r3
 80063e8:	3714      	adds	r7, #20
 80063ea:	46bd      	mov	sp, r7
 80063ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f0:	4770      	bx	lr

080063f2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80063f2:	b580      	push	{r7, lr}
 80063f4:	b082      	sub	sp, #8
 80063f6:	af00      	add	r7, sp, #0
 80063f8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	68da      	ldr	r2, [r3, #12]
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006408:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2220      	movs	r2, #32
 800640e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006412:	6878      	ldr	r0, [r7, #4]
 8006414:	f7ff fd40 	bl	8005e98 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006418:	2300      	movs	r3, #0
}
 800641a:	4618      	mov	r0, r3
 800641c:	3708      	adds	r7, #8
 800641e:	46bd      	mov	sp, r7
 8006420:	bd80      	pop	{r7, pc}

08006422 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006422:	b580      	push	{r7, lr}
 8006424:	b08c      	sub	sp, #48	; 0x30
 8006426:	af00      	add	r7, sp, #0
 8006428:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006430:	b2db      	uxtb	r3, r3
 8006432:	2b22      	cmp	r3, #34	; 0x22
 8006434:	f040 80ab 	bne.w	800658e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	689b      	ldr	r3, [r3, #8]
 800643c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006440:	d117      	bne.n	8006472 <UART_Receive_IT+0x50>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	691b      	ldr	r3, [r3, #16]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d113      	bne.n	8006472 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800644a:	2300      	movs	r3, #0
 800644c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006452:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	685b      	ldr	r3, [r3, #4]
 800645a:	b29b      	uxth	r3, r3
 800645c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006460:	b29a      	uxth	r2, r3
 8006462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006464:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800646a:	1c9a      	adds	r2, r3, #2
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	629a      	str	r2, [r3, #40]	; 0x28
 8006470:	e026      	b.n	80064c0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006476:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006478:	2300      	movs	r3, #0
 800647a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	689b      	ldr	r3, [r3, #8]
 8006480:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006484:	d007      	beq.n	8006496 <UART_Receive_IT+0x74>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	689b      	ldr	r3, [r3, #8]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d10a      	bne.n	80064a4 <UART_Receive_IT+0x82>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	691b      	ldr	r3, [r3, #16]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d106      	bne.n	80064a4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	685b      	ldr	r3, [r3, #4]
 800649c:	b2da      	uxtb	r2, r3
 800649e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064a0:	701a      	strb	r2, [r3, #0]
 80064a2:	e008      	b.n	80064b6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	685b      	ldr	r3, [r3, #4]
 80064aa:	b2db      	uxtb	r3, r3
 80064ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064b0:	b2da      	uxtb	r2, r3
 80064b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064b4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064ba:	1c5a      	adds	r2, r3, #1
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80064c4:	b29b      	uxth	r3, r3
 80064c6:	3b01      	subs	r3, #1
 80064c8:	b29b      	uxth	r3, r3
 80064ca:	687a      	ldr	r2, [r7, #4]
 80064cc:	4619      	mov	r1, r3
 80064ce:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d15a      	bne.n	800658a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	68da      	ldr	r2, [r3, #12]
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f022 0220 	bic.w	r2, r2, #32
 80064e2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	68da      	ldr	r2, [r3, #12]
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80064f2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	695a      	ldr	r2, [r3, #20]
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f022 0201 	bic.w	r2, r2, #1
 8006502:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2220      	movs	r2, #32
 8006508:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006510:	2b01      	cmp	r3, #1
 8006512:	d135      	bne.n	8006580 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2200      	movs	r2, #0
 8006518:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	330c      	adds	r3, #12
 8006520:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006522:	697b      	ldr	r3, [r7, #20]
 8006524:	e853 3f00 	ldrex	r3, [r3]
 8006528:	613b      	str	r3, [r7, #16]
   return(result);
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	f023 0310 	bic.w	r3, r3, #16
 8006530:	627b      	str	r3, [r7, #36]	; 0x24
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	330c      	adds	r3, #12
 8006538:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800653a:	623a      	str	r2, [r7, #32]
 800653c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800653e:	69f9      	ldr	r1, [r7, #28]
 8006540:	6a3a      	ldr	r2, [r7, #32]
 8006542:	e841 2300 	strex	r3, r2, [r1]
 8006546:	61bb      	str	r3, [r7, #24]
   return(result);
 8006548:	69bb      	ldr	r3, [r7, #24]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d1e5      	bne.n	800651a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f003 0310 	and.w	r3, r3, #16
 8006558:	2b10      	cmp	r3, #16
 800655a:	d10a      	bne.n	8006572 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800655c:	2300      	movs	r3, #0
 800655e:	60fb      	str	r3, [r7, #12]
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	60fb      	str	r3, [r7, #12]
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	685b      	ldr	r3, [r3, #4]
 800656e:	60fb      	str	r3, [r7, #12]
 8006570:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006576:	4619      	mov	r1, r3
 8006578:	6878      	ldr	r0, [r7, #4]
 800657a:	f7fa fb09 	bl	8000b90 <HAL_UARTEx_RxEventCallback>
 800657e:	e002      	b.n	8006586 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006580:	6878      	ldr	r0, [r7, #4]
 8006582:	f7ff fc93 	bl	8005eac <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006586:	2300      	movs	r3, #0
 8006588:	e002      	b.n	8006590 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800658a:	2300      	movs	r3, #0
 800658c:	e000      	b.n	8006590 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800658e:	2302      	movs	r3, #2
  }
}
 8006590:	4618      	mov	r0, r3
 8006592:	3730      	adds	r7, #48	; 0x30
 8006594:	46bd      	mov	sp, r7
 8006596:	bd80      	pop	{r7, pc}

08006598 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006598:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800659c:	b0c0      	sub	sp, #256	; 0x100
 800659e:	af00      	add	r7, sp, #0
 80065a0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80065a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	691b      	ldr	r3, [r3, #16]
 80065ac:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80065b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065b4:	68d9      	ldr	r1, [r3, #12]
 80065b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065ba:	681a      	ldr	r2, [r3, #0]
 80065bc:	ea40 0301 	orr.w	r3, r0, r1
 80065c0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80065c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065c6:	689a      	ldr	r2, [r3, #8]
 80065c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065cc:	691b      	ldr	r3, [r3, #16]
 80065ce:	431a      	orrs	r2, r3
 80065d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065d4:	695b      	ldr	r3, [r3, #20]
 80065d6:	431a      	orrs	r2, r3
 80065d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065dc:	69db      	ldr	r3, [r3, #28]
 80065de:	4313      	orrs	r3, r2
 80065e0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80065e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	68db      	ldr	r3, [r3, #12]
 80065ec:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80065f0:	f021 010c 	bic.w	r1, r1, #12
 80065f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065f8:	681a      	ldr	r2, [r3, #0]
 80065fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80065fe:	430b      	orrs	r3, r1
 8006600:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006602:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	695b      	ldr	r3, [r3, #20]
 800660a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800660e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006612:	6999      	ldr	r1, [r3, #24]
 8006614:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006618:	681a      	ldr	r2, [r3, #0]
 800661a:	ea40 0301 	orr.w	r3, r0, r1
 800661e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006620:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006624:	681a      	ldr	r2, [r3, #0]
 8006626:	4b8f      	ldr	r3, [pc, #572]	; (8006864 <UART_SetConfig+0x2cc>)
 8006628:	429a      	cmp	r2, r3
 800662a:	d005      	beq.n	8006638 <UART_SetConfig+0xa0>
 800662c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006630:	681a      	ldr	r2, [r3, #0]
 8006632:	4b8d      	ldr	r3, [pc, #564]	; (8006868 <UART_SetConfig+0x2d0>)
 8006634:	429a      	cmp	r2, r3
 8006636:	d104      	bne.n	8006642 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006638:	f7fd f922 	bl	8003880 <HAL_RCC_GetPCLK2Freq>
 800663c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006640:	e003      	b.n	800664a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006642:	f7fd f909 	bl	8003858 <HAL_RCC_GetPCLK1Freq>
 8006646:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800664a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800664e:	69db      	ldr	r3, [r3, #28]
 8006650:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006654:	f040 810c 	bne.w	8006870 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006658:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800665c:	2200      	movs	r2, #0
 800665e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006662:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006666:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800666a:	4622      	mov	r2, r4
 800666c:	462b      	mov	r3, r5
 800666e:	1891      	adds	r1, r2, r2
 8006670:	65b9      	str	r1, [r7, #88]	; 0x58
 8006672:	415b      	adcs	r3, r3
 8006674:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006676:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800667a:	4621      	mov	r1, r4
 800667c:	eb12 0801 	adds.w	r8, r2, r1
 8006680:	4629      	mov	r1, r5
 8006682:	eb43 0901 	adc.w	r9, r3, r1
 8006686:	f04f 0200 	mov.w	r2, #0
 800668a:	f04f 0300 	mov.w	r3, #0
 800668e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006692:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006696:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800669a:	4690      	mov	r8, r2
 800669c:	4699      	mov	r9, r3
 800669e:	4623      	mov	r3, r4
 80066a0:	eb18 0303 	adds.w	r3, r8, r3
 80066a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80066a8:	462b      	mov	r3, r5
 80066aa:	eb49 0303 	adc.w	r3, r9, r3
 80066ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80066b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066b6:	685b      	ldr	r3, [r3, #4]
 80066b8:	2200      	movs	r2, #0
 80066ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80066be:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80066c2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80066c6:	460b      	mov	r3, r1
 80066c8:	18db      	adds	r3, r3, r3
 80066ca:	653b      	str	r3, [r7, #80]	; 0x50
 80066cc:	4613      	mov	r3, r2
 80066ce:	eb42 0303 	adc.w	r3, r2, r3
 80066d2:	657b      	str	r3, [r7, #84]	; 0x54
 80066d4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80066d8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80066dc:	f7f9 fdf0 	bl	80002c0 <__aeabi_uldivmod>
 80066e0:	4602      	mov	r2, r0
 80066e2:	460b      	mov	r3, r1
 80066e4:	4b61      	ldr	r3, [pc, #388]	; (800686c <UART_SetConfig+0x2d4>)
 80066e6:	fba3 2302 	umull	r2, r3, r3, r2
 80066ea:	095b      	lsrs	r3, r3, #5
 80066ec:	011c      	lsls	r4, r3, #4
 80066ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80066f2:	2200      	movs	r2, #0
 80066f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80066f8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80066fc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006700:	4642      	mov	r2, r8
 8006702:	464b      	mov	r3, r9
 8006704:	1891      	adds	r1, r2, r2
 8006706:	64b9      	str	r1, [r7, #72]	; 0x48
 8006708:	415b      	adcs	r3, r3
 800670a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800670c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006710:	4641      	mov	r1, r8
 8006712:	eb12 0a01 	adds.w	sl, r2, r1
 8006716:	4649      	mov	r1, r9
 8006718:	eb43 0b01 	adc.w	fp, r3, r1
 800671c:	f04f 0200 	mov.w	r2, #0
 8006720:	f04f 0300 	mov.w	r3, #0
 8006724:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006728:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800672c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006730:	4692      	mov	sl, r2
 8006732:	469b      	mov	fp, r3
 8006734:	4643      	mov	r3, r8
 8006736:	eb1a 0303 	adds.w	r3, sl, r3
 800673a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800673e:	464b      	mov	r3, r9
 8006740:	eb4b 0303 	adc.w	r3, fp, r3
 8006744:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006748:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800674c:	685b      	ldr	r3, [r3, #4]
 800674e:	2200      	movs	r2, #0
 8006750:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006754:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006758:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800675c:	460b      	mov	r3, r1
 800675e:	18db      	adds	r3, r3, r3
 8006760:	643b      	str	r3, [r7, #64]	; 0x40
 8006762:	4613      	mov	r3, r2
 8006764:	eb42 0303 	adc.w	r3, r2, r3
 8006768:	647b      	str	r3, [r7, #68]	; 0x44
 800676a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800676e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006772:	f7f9 fda5 	bl	80002c0 <__aeabi_uldivmod>
 8006776:	4602      	mov	r2, r0
 8006778:	460b      	mov	r3, r1
 800677a:	4611      	mov	r1, r2
 800677c:	4b3b      	ldr	r3, [pc, #236]	; (800686c <UART_SetConfig+0x2d4>)
 800677e:	fba3 2301 	umull	r2, r3, r3, r1
 8006782:	095b      	lsrs	r3, r3, #5
 8006784:	2264      	movs	r2, #100	; 0x64
 8006786:	fb02 f303 	mul.w	r3, r2, r3
 800678a:	1acb      	subs	r3, r1, r3
 800678c:	00db      	lsls	r3, r3, #3
 800678e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006792:	4b36      	ldr	r3, [pc, #216]	; (800686c <UART_SetConfig+0x2d4>)
 8006794:	fba3 2302 	umull	r2, r3, r3, r2
 8006798:	095b      	lsrs	r3, r3, #5
 800679a:	005b      	lsls	r3, r3, #1
 800679c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80067a0:	441c      	add	r4, r3
 80067a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80067a6:	2200      	movs	r2, #0
 80067a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80067ac:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80067b0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80067b4:	4642      	mov	r2, r8
 80067b6:	464b      	mov	r3, r9
 80067b8:	1891      	adds	r1, r2, r2
 80067ba:	63b9      	str	r1, [r7, #56]	; 0x38
 80067bc:	415b      	adcs	r3, r3
 80067be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80067c0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80067c4:	4641      	mov	r1, r8
 80067c6:	1851      	adds	r1, r2, r1
 80067c8:	6339      	str	r1, [r7, #48]	; 0x30
 80067ca:	4649      	mov	r1, r9
 80067cc:	414b      	adcs	r3, r1
 80067ce:	637b      	str	r3, [r7, #52]	; 0x34
 80067d0:	f04f 0200 	mov.w	r2, #0
 80067d4:	f04f 0300 	mov.w	r3, #0
 80067d8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80067dc:	4659      	mov	r1, fp
 80067de:	00cb      	lsls	r3, r1, #3
 80067e0:	4651      	mov	r1, sl
 80067e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80067e6:	4651      	mov	r1, sl
 80067e8:	00ca      	lsls	r2, r1, #3
 80067ea:	4610      	mov	r0, r2
 80067ec:	4619      	mov	r1, r3
 80067ee:	4603      	mov	r3, r0
 80067f0:	4642      	mov	r2, r8
 80067f2:	189b      	adds	r3, r3, r2
 80067f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80067f8:	464b      	mov	r3, r9
 80067fa:	460a      	mov	r2, r1
 80067fc:	eb42 0303 	adc.w	r3, r2, r3
 8006800:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006804:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006808:	685b      	ldr	r3, [r3, #4]
 800680a:	2200      	movs	r2, #0
 800680c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006810:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006814:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006818:	460b      	mov	r3, r1
 800681a:	18db      	adds	r3, r3, r3
 800681c:	62bb      	str	r3, [r7, #40]	; 0x28
 800681e:	4613      	mov	r3, r2
 8006820:	eb42 0303 	adc.w	r3, r2, r3
 8006824:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006826:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800682a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800682e:	f7f9 fd47 	bl	80002c0 <__aeabi_uldivmod>
 8006832:	4602      	mov	r2, r0
 8006834:	460b      	mov	r3, r1
 8006836:	4b0d      	ldr	r3, [pc, #52]	; (800686c <UART_SetConfig+0x2d4>)
 8006838:	fba3 1302 	umull	r1, r3, r3, r2
 800683c:	095b      	lsrs	r3, r3, #5
 800683e:	2164      	movs	r1, #100	; 0x64
 8006840:	fb01 f303 	mul.w	r3, r1, r3
 8006844:	1ad3      	subs	r3, r2, r3
 8006846:	00db      	lsls	r3, r3, #3
 8006848:	3332      	adds	r3, #50	; 0x32
 800684a:	4a08      	ldr	r2, [pc, #32]	; (800686c <UART_SetConfig+0x2d4>)
 800684c:	fba2 2303 	umull	r2, r3, r2, r3
 8006850:	095b      	lsrs	r3, r3, #5
 8006852:	f003 0207 	and.w	r2, r3, #7
 8006856:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	4422      	add	r2, r4
 800685e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006860:	e105      	b.n	8006a6e <UART_SetConfig+0x4d6>
 8006862:	bf00      	nop
 8006864:	40011000 	.word	0x40011000
 8006868:	40011400 	.word	0x40011400
 800686c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006870:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006874:	2200      	movs	r2, #0
 8006876:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800687a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800687e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006882:	4642      	mov	r2, r8
 8006884:	464b      	mov	r3, r9
 8006886:	1891      	adds	r1, r2, r2
 8006888:	6239      	str	r1, [r7, #32]
 800688a:	415b      	adcs	r3, r3
 800688c:	627b      	str	r3, [r7, #36]	; 0x24
 800688e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006892:	4641      	mov	r1, r8
 8006894:	1854      	adds	r4, r2, r1
 8006896:	4649      	mov	r1, r9
 8006898:	eb43 0501 	adc.w	r5, r3, r1
 800689c:	f04f 0200 	mov.w	r2, #0
 80068a0:	f04f 0300 	mov.w	r3, #0
 80068a4:	00eb      	lsls	r3, r5, #3
 80068a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80068aa:	00e2      	lsls	r2, r4, #3
 80068ac:	4614      	mov	r4, r2
 80068ae:	461d      	mov	r5, r3
 80068b0:	4643      	mov	r3, r8
 80068b2:	18e3      	adds	r3, r4, r3
 80068b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80068b8:	464b      	mov	r3, r9
 80068ba:	eb45 0303 	adc.w	r3, r5, r3
 80068be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80068c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068c6:	685b      	ldr	r3, [r3, #4]
 80068c8:	2200      	movs	r2, #0
 80068ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80068ce:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80068d2:	f04f 0200 	mov.w	r2, #0
 80068d6:	f04f 0300 	mov.w	r3, #0
 80068da:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80068de:	4629      	mov	r1, r5
 80068e0:	008b      	lsls	r3, r1, #2
 80068e2:	4621      	mov	r1, r4
 80068e4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80068e8:	4621      	mov	r1, r4
 80068ea:	008a      	lsls	r2, r1, #2
 80068ec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80068f0:	f7f9 fce6 	bl	80002c0 <__aeabi_uldivmod>
 80068f4:	4602      	mov	r2, r0
 80068f6:	460b      	mov	r3, r1
 80068f8:	4b60      	ldr	r3, [pc, #384]	; (8006a7c <UART_SetConfig+0x4e4>)
 80068fa:	fba3 2302 	umull	r2, r3, r3, r2
 80068fe:	095b      	lsrs	r3, r3, #5
 8006900:	011c      	lsls	r4, r3, #4
 8006902:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006906:	2200      	movs	r2, #0
 8006908:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800690c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006910:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006914:	4642      	mov	r2, r8
 8006916:	464b      	mov	r3, r9
 8006918:	1891      	adds	r1, r2, r2
 800691a:	61b9      	str	r1, [r7, #24]
 800691c:	415b      	adcs	r3, r3
 800691e:	61fb      	str	r3, [r7, #28]
 8006920:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006924:	4641      	mov	r1, r8
 8006926:	1851      	adds	r1, r2, r1
 8006928:	6139      	str	r1, [r7, #16]
 800692a:	4649      	mov	r1, r9
 800692c:	414b      	adcs	r3, r1
 800692e:	617b      	str	r3, [r7, #20]
 8006930:	f04f 0200 	mov.w	r2, #0
 8006934:	f04f 0300 	mov.w	r3, #0
 8006938:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800693c:	4659      	mov	r1, fp
 800693e:	00cb      	lsls	r3, r1, #3
 8006940:	4651      	mov	r1, sl
 8006942:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006946:	4651      	mov	r1, sl
 8006948:	00ca      	lsls	r2, r1, #3
 800694a:	4610      	mov	r0, r2
 800694c:	4619      	mov	r1, r3
 800694e:	4603      	mov	r3, r0
 8006950:	4642      	mov	r2, r8
 8006952:	189b      	adds	r3, r3, r2
 8006954:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006958:	464b      	mov	r3, r9
 800695a:	460a      	mov	r2, r1
 800695c:	eb42 0303 	adc.w	r3, r2, r3
 8006960:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006964:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006968:	685b      	ldr	r3, [r3, #4]
 800696a:	2200      	movs	r2, #0
 800696c:	67bb      	str	r3, [r7, #120]	; 0x78
 800696e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006970:	f04f 0200 	mov.w	r2, #0
 8006974:	f04f 0300 	mov.w	r3, #0
 8006978:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800697c:	4649      	mov	r1, r9
 800697e:	008b      	lsls	r3, r1, #2
 8006980:	4641      	mov	r1, r8
 8006982:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006986:	4641      	mov	r1, r8
 8006988:	008a      	lsls	r2, r1, #2
 800698a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800698e:	f7f9 fc97 	bl	80002c0 <__aeabi_uldivmod>
 8006992:	4602      	mov	r2, r0
 8006994:	460b      	mov	r3, r1
 8006996:	4b39      	ldr	r3, [pc, #228]	; (8006a7c <UART_SetConfig+0x4e4>)
 8006998:	fba3 1302 	umull	r1, r3, r3, r2
 800699c:	095b      	lsrs	r3, r3, #5
 800699e:	2164      	movs	r1, #100	; 0x64
 80069a0:	fb01 f303 	mul.w	r3, r1, r3
 80069a4:	1ad3      	subs	r3, r2, r3
 80069a6:	011b      	lsls	r3, r3, #4
 80069a8:	3332      	adds	r3, #50	; 0x32
 80069aa:	4a34      	ldr	r2, [pc, #208]	; (8006a7c <UART_SetConfig+0x4e4>)
 80069ac:	fba2 2303 	umull	r2, r3, r2, r3
 80069b0:	095b      	lsrs	r3, r3, #5
 80069b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80069b6:	441c      	add	r4, r3
 80069b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80069bc:	2200      	movs	r2, #0
 80069be:	673b      	str	r3, [r7, #112]	; 0x70
 80069c0:	677a      	str	r2, [r7, #116]	; 0x74
 80069c2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80069c6:	4642      	mov	r2, r8
 80069c8:	464b      	mov	r3, r9
 80069ca:	1891      	adds	r1, r2, r2
 80069cc:	60b9      	str	r1, [r7, #8]
 80069ce:	415b      	adcs	r3, r3
 80069d0:	60fb      	str	r3, [r7, #12]
 80069d2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80069d6:	4641      	mov	r1, r8
 80069d8:	1851      	adds	r1, r2, r1
 80069da:	6039      	str	r1, [r7, #0]
 80069dc:	4649      	mov	r1, r9
 80069de:	414b      	adcs	r3, r1
 80069e0:	607b      	str	r3, [r7, #4]
 80069e2:	f04f 0200 	mov.w	r2, #0
 80069e6:	f04f 0300 	mov.w	r3, #0
 80069ea:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80069ee:	4659      	mov	r1, fp
 80069f0:	00cb      	lsls	r3, r1, #3
 80069f2:	4651      	mov	r1, sl
 80069f4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80069f8:	4651      	mov	r1, sl
 80069fa:	00ca      	lsls	r2, r1, #3
 80069fc:	4610      	mov	r0, r2
 80069fe:	4619      	mov	r1, r3
 8006a00:	4603      	mov	r3, r0
 8006a02:	4642      	mov	r2, r8
 8006a04:	189b      	adds	r3, r3, r2
 8006a06:	66bb      	str	r3, [r7, #104]	; 0x68
 8006a08:	464b      	mov	r3, r9
 8006a0a:	460a      	mov	r2, r1
 8006a0c:	eb42 0303 	adc.w	r3, r2, r3
 8006a10:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006a12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a16:	685b      	ldr	r3, [r3, #4]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	663b      	str	r3, [r7, #96]	; 0x60
 8006a1c:	667a      	str	r2, [r7, #100]	; 0x64
 8006a1e:	f04f 0200 	mov.w	r2, #0
 8006a22:	f04f 0300 	mov.w	r3, #0
 8006a26:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006a2a:	4649      	mov	r1, r9
 8006a2c:	008b      	lsls	r3, r1, #2
 8006a2e:	4641      	mov	r1, r8
 8006a30:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006a34:	4641      	mov	r1, r8
 8006a36:	008a      	lsls	r2, r1, #2
 8006a38:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006a3c:	f7f9 fc40 	bl	80002c0 <__aeabi_uldivmod>
 8006a40:	4602      	mov	r2, r0
 8006a42:	460b      	mov	r3, r1
 8006a44:	4b0d      	ldr	r3, [pc, #52]	; (8006a7c <UART_SetConfig+0x4e4>)
 8006a46:	fba3 1302 	umull	r1, r3, r3, r2
 8006a4a:	095b      	lsrs	r3, r3, #5
 8006a4c:	2164      	movs	r1, #100	; 0x64
 8006a4e:	fb01 f303 	mul.w	r3, r1, r3
 8006a52:	1ad3      	subs	r3, r2, r3
 8006a54:	011b      	lsls	r3, r3, #4
 8006a56:	3332      	adds	r3, #50	; 0x32
 8006a58:	4a08      	ldr	r2, [pc, #32]	; (8006a7c <UART_SetConfig+0x4e4>)
 8006a5a:	fba2 2303 	umull	r2, r3, r2, r3
 8006a5e:	095b      	lsrs	r3, r3, #5
 8006a60:	f003 020f 	and.w	r2, r3, #15
 8006a64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	4422      	add	r2, r4
 8006a6c:	609a      	str	r2, [r3, #8]
}
 8006a6e:	bf00      	nop
 8006a70:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006a74:	46bd      	mov	sp, r7
 8006a76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006a7a:	bf00      	nop
 8006a7c:	51eb851f 	.word	0x51eb851f

08006a80 <__errno>:
 8006a80:	4b01      	ldr	r3, [pc, #4]	; (8006a88 <__errno+0x8>)
 8006a82:	6818      	ldr	r0, [r3, #0]
 8006a84:	4770      	bx	lr
 8006a86:	bf00      	nop
 8006a88:	20000020 	.word	0x20000020

08006a8c <__libc_init_array>:
 8006a8c:	b570      	push	{r4, r5, r6, lr}
 8006a8e:	4d0d      	ldr	r5, [pc, #52]	; (8006ac4 <__libc_init_array+0x38>)
 8006a90:	4c0d      	ldr	r4, [pc, #52]	; (8006ac8 <__libc_init_array+0x3c>)
 8006a92:	1b64      	subs	r4, r4, r5
 8006a94:	10a4      	asrs	r4, r4, #2
 8006a96:	2600      	movs	r6, #0
 8006a98:	42a6      	cmp	r6, r4
 8006a9a:	d109      	bne.n	8006ab0 <__libc_init_array+0x24>
 8006a9c:	4d0b      	ldr	r5, [pc, #44]	; (8006acc <__libc_init_array+0x40>)
 8006a9e:	4c0c      	ldr	r4, [pc, #48]	; (8006ad0 <__libc_init_array+0x44>)
 8006aa0:	f000 fc8e 	bl	80073c0 <_init>
 8006aa4:	1b64      	subs	r4, r4, r5
 8006aa6:	10a4      	asrs	r4, r4, #2
 8006aa8:	2600      	movs	r6, #0
 8006aaa:	42a6      	cmp	r6, r4
 8006aac:	d105      	bne.n	8006aba <__libc_init_array+0x2e>
 8006aae:	bd70      	pop	{r4, r5, r6, pc}
 8006ab0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ab4:	4798      	blx	r3
 8006ab6:	3601      	adds	r6, #1
 8006ab8:	e7ee      	b.n	8006a98 <__libc_init_array+0xc>
 8006aba:	f855 3b04 	ldr.w	r3, [r5], #4
 8006abe:	4798      	blx	r3
 8006ac0:	3601      	adds	r6, #1
 8006ac2:	e7f2      	b.n	8006aaa <__libc_init_array+0x1e>
 8006ac4:	080089b4 	.word	0x080089b4
 8006ac8:	080089b4 	.word	0x080089b4
 8006acc:	080089b4 	.word	0x080089b4
 8006ad0:	080089b8 	.word	0x080089b8

08006ad4 <memset>:
 8006ad4:	4402      	add	r2, r0
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d100      	bne.n	8006ade <memset+0xa>
 8006adc:	4770      	bx	lr
 8006ade:	f803 1b01 	strb.w	r1, [r3], #1
 8006ae2:	e7f9      	b.n	8006ad8 <memset+0x4>

08006ae4 <siprintf>:
 8006ae4:	b40e      	push	{r1, r2, r3}
 8006ae6:	b500      	push	{lr}
 8006ae8:	b09c      	sub	sp, #112	; 0x70
 8006aea:	ab1d      	add	r3, sp, #116	; 0x74
 8006aec:	9002      	str	r0, [sp, #8]
 8006aee:	9006      	str	r0, [sp, #24]
 8006af0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006af4:	4809      	ldr	r0, [pc, #36]	; (8006b1c <siprintf+0x38>)
 8006af6:	9107      	str	r1, [sp, #28]
 8006af8:	9104      	str	r1, [sp, #16]
 8006afa:	4909      	ldr	r1, [pc, #36]	; (8006b20 <siprintf+0x3c>)
 8006afc:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b00:	9105      	str	r1, [sp, #20]
 8006b02:	6800      	ldr	r0, [r0, #0]
 8006b04:	9301      	str	r3, [sp, #4]
 8006b06:	a902      	add	r1, sp, #8
 8006b08:	f000 f868 	bl	8006bdc <_svfiprintf_r>
 8006b0c:	9b02      	ldr	r3, [sp, #8]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	701a      	strb	r2, [r3, #0]
 8006b12:	b01c      	add	sp, #112	; 0x70
 8006b14:	f85d eb04 	ldr.w	lr, [sp], #4
 8006b18:	b003      	add	sp, #12
 8006b1a:	4770      	bx	lr
 8006b1c:	20000020 	.word	0x20000020
 8006b20:	ffff0208 	.word	0xffff0208

08006b24 <__ssputs_r>:
 8006b24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b28:	688e      	ldr	r6, [r1, #8]
 8006b2a:	429e      	cmp	r6, r3
 8006b2c:	4682      	mov	sl, r0
 8006b2e:	460c      	mov	r4, r1
 8006b30:	4690      	mov	r8, r2
 8006b32:	461f      	mov	r7, r3
 8006b34:	d838      	bhi.n	8006ba8 <__ssputs_r+0x84>
 8006b36:	898a      	ldrh	r2, [r1, #12]
 8006b38:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006b3c:	d032      	beq.n	8006ba4 <__ssputs_r+0x80>
 8006b3e:	6825      	ldr	r5, [r4, #0]
 8006b40:	6909      	ldr	r1, [r1, #16]
 8006b42:	eba5 0901 	sub.w	r9, r5, r1
 8006b46:	6965      	ldr	r5, [r4, #20]
 8006b48:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006b4c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006b50:	3301      	adds	r3, #1
 8006b52:	444b      	add	r3, r9
 8006b54:	106d      	asrs	r5, r5, #1
 8006b56:	429d      	cmp	r5, r3
 8006b58:	bf38      	it	cc
 8006b5a:	461d      	movcc	r5, r3
 8006b5c:	0553      	lsls	r3, r2, #21
 8006b5e:	d531      	bpl.n	8006bc4 <__ssputs_r+0xa0>
 8006b60:	4629      	mov	r1, r5
 8006b62:	f000 fb63 	bl	800722c <_malloc_r>
 8006b66:	4606      	mov	r6, r0
 8006b68:	b950      	cbnz	r0, 8006b80 <__ssputs_r+0x5c>
 8006b6a:	230c      	movs	r3, #12
 8006b6c:	f8ca 3000 	str.w	r3, [sl]
 8006b70:	89a3      	ldrh	r3, [r4, #12]
 8006b72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b76:	81a3      	strh	r3, [r4, #12]
 8006b78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006b7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b80:	6921      	ldr	r1, [r4, #16]
 8006b82:	464a      	mov	r2, r9
 8006b84:	f000 fabe 	bl	8007104 <memcpy>
 8006b88:	89a3      	ldrh	r3, [r4, #12]
 8006b8a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006b8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b92:	81a3      	strh	r3, [r4, #12]
 8006b94:	6126      	str	r6, [r4, #16]
 8006b96:	6165      	str	r5, [r4, #20]
 8006b98:	444e      	add	r6, r9
 8006b9a:	eba5 0509 	sub.w	r5, r5, r9
 8006b9e:	6026      	str	r6, [r4, #0]
 8006ba0:	60a5      	str	r5, [r4, #8]
 8006ba2:	463e      	mov	r6, r7
 8006ba4:	42be      	cmp	r6, r7
 8006ba6:	d900      	bls.n	8006baa <__ssputs_r+0x86>
 8006ba8:	463e      	mov	r6, r7
 8006baa:	6820      	ldr	r0, [r4, #0]
 8006bac:	4632      	mov	r2, r6
 8006bae:	4641      	mov	r1, r8
 8006bb0:	f000 fab6 	bl	8007120 <memmove>
 8006bb4:	68a3      	ldr	r3, [r4, #8]
 8006bb6:	1b9b      	subs	r3, r3, r6
 8006bb8:	60a3      	str	r3, [r4, #8]
 8006bba:	6823      	ldr	r3, [r4, #0]
 8006bbc:	4433      	add	r3, r6
 8006bbe:	6023      	str	r3, [r4, #0]
 8006bc0:	2000      	movs	r0, #0
 8006bc2:	e7db      	b.n	8006b7c <__ssputs_r+0x58>
 8006bc4:	462a      	mov	r2, r5
 8006bc6:	f000 fba5 	bl	8007314 <_realloc_r>
 8006bca:	4606      	mov	r6, r0
 8006bcc:	2800      	cmp	r0, #0
 8006bce:	d1e1      	bne.n	8006b94 <__ssputs_r+0x70>
 8006bd0:	6921      	ldr	r1, [r4, #16]
 8006bd2:	4650      	mov	r0, sl
 8006bd4:	f000 fabe 	bl	8007154 <_free_r>
 8006bd8:	e7c7      	b.n	8006b6a <__ssputs_r+0x46>
	...

08006bdc <_svfiprintf_r>:
 8006bdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006be0:	4698      	mov	r8, r3
 8006be2:	898b      	ldrh	r3, [r1, #12]
 8006be4:	061b      	lsls	r3, r3, #24
 8006be6:	b09d      	sub	sp, #116	; 0x74
 8006be8:	4607      	mov	r7, r0
 8006bea:	460d      	mov	r5, r1
 8006bec:	4614      	mov	r4, r2
 8006bee:	d50e      	bpl.n	8006c0e <_svfiprintf_r+0x32>
 8006bf0:	690b      	ldr	r3, [r1, #16]
 8006bf2:	b963      	cbnz	r3, 8006c0e <_svfiprintf_r+0x32>
 8006bf4:	2140      	movs	r1, #64	; 0x40
 8006bf6:	f000 fb19 	bl	800722c <_malloc_r>
 8006bfa:	6028      	str	r0, [r5, #0]
 8006bfc:	6128      	str	r0, [r5, #16]
 8006bfe:	b920      	cbnz	r0, 8006c0a <_svfiprintf_r+0x2e>
 8006c00:	230c      	movs	r3, #12
 8006c02:	603b      	str	r3, [r7, #0]
 8006c04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006c08:	e0d1      	b.n	8006dae <_svfiprintf_r+0x1d2>
 8006c0a:	2340      	movs	r3, #64	; 0x40
 8006c0c:	616b      	str	r3, [r5, #20]
 8006c0e:	2300      	movs	r3, #0
 8006c10:	9309      	str	r3, [sp, #36]	; 0x24
 8006c12:	2320      	movs	r3, #32
 8006c14:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006c18:	f8cd 800c 	str.w	r8, [sp, #12]
 8006c1c:	2330      	movs	r3, #48	; 0x30
 8006c1e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006dc8 <_svfiprintf_r+0x1ec>
 8006c22:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006c26:	f04f 0901 	mov.w	r9, #1
 8006c2a:	4623      	mov	r3, r4
 8006c2c:	469a      	mov	sl, r3
 8006c2e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006c32:	b10a      	cbz	r2, 8006c38 <_svfiprintf_r+0x5c>
 8006c34:	2a25      	cmp	r2, #37	; 0x25
 8006c36:	d1f9      	bne.n	8006c2c <_svfiprintf_r+0x50>
 8006c38:	ebba 0b04 	subs.w	fp, sl, r4
 8006c3c:	d00b      	beq.n	8006c56 <_svfiprintf_r+0x7a>
 8006c3e:	465b      	mov	r3, fp
 8006c40:	4622      	mov	r2, r4
 8006c42:	4629      	mov	r1, r5
 8006c44:	4638      	mov	r0, r7
 8006c46:	f7ff ff6d 	bl	8006b24 <__ssputs_r>
 8006c4a:	3001      	adds	r0, #1
 8006c4c:	f000 80aa 	beq.w	8006da4 <_svfiprintf_r+0x1c8>
 8006c50:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006c52:	445a      	add	r2, fp
 8006c54:	9209      	str	r2, [sp, #36]	; 0x24
 8006c56:	f89a 3000 	ldrb.w	r3, [sl]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	f000 80a2 	beq.w	8006da4 <_svfiprintf_r+0x1c8>
 8006c60:	2300      	movs	r3, #0
 8006c62:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006c66:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006c6a:	f10a 0a01 	add.w	sl, sl, #1
 8006c6e:	9304      	str	r3, [sp, #16]
 8006c70:	9307      	str	r3, [sp, #28]
 8006c72:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006c76:	931a      	str	r3, [sp, #104]	; 0x68
 8006c78:	4654      	mov	r4, sl
 8006c7a:	2205      	movs	r2, #5
 8006c7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c80:	4851      	ldr	r0, [pc, #324]	; (8006dc8 <_svfiprintf_r+0x1ec>)
 8006c82:	f7f9 facd 	bl	8000220 <memchr>
 8006c86:	9a04      	ldr	r2, [sp, #16]
 8006c88:	b9d8      	cbnz	r0, 8006cc2 <_svfiprintf_r+0xe6>
 8006c8a:	06d0      	lsls	r0, r2, #27
 8006c8c:	bf44      	itt	mi
 8006c8e:	2320      	movmi	r3, #32
 8006c90:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006c94:	0711      	lsls	r1, r2, #28
 8006c96:	bf44      	itt	mi
 8006c98:	232b      	movmi	r3, #43	; 0x2b
 8006c9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006c9e:	f89a 3000 	ldrb.w	r3, [sl]
 8006ca2:	2b2a      	cmp	r3, #42	; 0x2a
 8006ca4:	d015      	beq.n	8006cd2 <_svfiprintf_r+0xf6>
 8006ca6:	9a07      	ldr	r2, [sp, #28]
 8006ca8:	4654      	mov	r4, sl
 8006caa:	2000      	movs	r0, #0
 8006cac:	f04f 0c0a 	mov.w	ip, #10
 8006cb0:	4621      	mov	r1, r4
 8006cb2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006cb6:	3b30      	subs	r3, #48	; 0x30
 8006cb8:	2b09      	cmp	r3, #9
 8006cba:	d94e      	bls.n	8006d5a <_svfiprintf_r+0x17e>
 8006cbc:	b1b0      	cbz	r0, 8006cec <_svfiprintf_r+0x110>
 8006cbe:	9207      	str	r2, [sp, #28]
 8006cc0:	e014      	b.n	8006cec <_svfiprintf_r+0x110>
 8006cc2:	eba0 0308 	sub.w	r3, r0, r8
 8006cc6:	fa09 f303 	lsl.w	r3, r9, r3
 8006cca:	4313      	orrs	r3, r2
 8006ccc:	9304      	str	r3, [sp, #16]
 8006cce:	46a2      	mov	sl, r4
 8006cd0:	e7d2      	b.n	8006c78 <_svfiprintf_r+0x9c>
 8006cd2:	9b03      	ldr	r3, [sp, #12]
 8006cd4:	1d19      	adds	r1, r3, #4
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	9103      	str	r1, [sp, #12]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	bfbb      	ittet	lt
 8006cde:	425b      	neglt	r3, r3
 8006ce0:	f042 0202 	orrlt.w	r2, r2, #2
 8006ce4:	9307      	strge	r3, [sp, #28]
 8006ce6:	9307      	strlt	r3, [sp, #28]
 8006ce8:	bfb8      	it	lt
 8006cea:	9204      	strlt	r2, [sp, #16]
 8006cec:	7823      	ldrb	r3, [r4, #0]
 8006cee:	2b2e      	cmp	r3, #46	; 0x2e
 8006cf0:	d10c      	bne.n	8006d0c <_svfiprintf_r+0x130>
 8006cf2:	7863      	ldrb	r3, [r4, #1]
 8006cf4:	2b2a      	cmp	r3, #42	; 0x2a
 8006cf6:	d135      	bne.n	8006d64 <_svfiprintf_r+0x188>
 8006cf8:	9b03      	ldr	r3, [sp, #12]
 8006cfa:	1d1a      	adds	r2, r3, #4
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	9203      	str	r2, [sp, #12]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	bfb8      	it	lt
 8006d04:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006d08:	3402      	adds	r4, #2
 8006d0a:	9305      	str	r3, [sp, #20]
 8006d0c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006dd8 <_svfiprintf_r+0x1fc>
 8006d10:	7821      	ldrb	r1, [r4, #0]
 8006d12:	2203      	movs	r2, #3
 8006d14:	4650      	mov	r0, sl
 8006d16:	f7f9 fa83 	bl	8000220 <memchr>
 8006d1a:	b140      	cbz	r0, 8006d2e <_svfiprintf_r+0x152>
 8006d1c:	2340      	movs	r3, #64	; 0x40
 8006d1e:	eba0 000a 	sub.w	r0, r0, sl
 8006d22:	fa03 f000 	lsl.w	r0, r3, r0
 8006d26:	9b04      	ldr	r3, [sp, #16]
 8006d28:	4303      	orrs	r3, r0
 8006d2a:	3401      	adds	r4, #1
 8006d2c:	9304      	str	r3, [sp, #16]
 8006d2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d32:	4826      	ldr	r0, [pc, #152]	; (8006dcc <_svfiprintf_r+0x1f0>)
 8006d34:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006d38:	2206      	movs	r2, #6
 8006d3a:	f7f9 fa71 	bl	8000220 <memchr>
 8006d3e:	2800      	cmp	r0, #0
 8006d40:	d038      	beq.n	8006db4 <_svfiprintf_r+0x1d8>
 8006d42:	4b23      	ldr	r3, [pc, #140]	; (8006dd0 <_svfiprintf_r+0x1f4>)
 8006d44:	bb1b      	cbnz	r3, 8006d8e <_svfiprintf_r+0x1b2>
 8006d46:	9b03      	ldr	r3, [sp, #12]
 8006d48:	3307      	adds	r3, #7
 8006d4a:	f023 0307 	bic.w	r3, r3, #7
 8006d4e:	3308      	adds	r3, #8
 8006d50:	9303      	str	r3, [sp, #12]
 8006d52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d54:	4433      	add	r3, r6
 8006d56:	9309      	str	r3, [sp, #36]	; 0x24
 8006d58:	e767      	b.n	8006c2a <_svfiprintf_r+0x4e>
 8006d5a:	fb0c 3202 	mla	r2, ip, r2, r3
 8006d5e:	460c      	mov	r4, r1
 8006d60:	2001      	movs	r0, #1
 8006d62:	e7a5      	b.n	8006cb0 <_svfiprintf_r+0xd4>
 8006d64:	2300      	movs	r3, #0
 8006d66:	3401      	adds	r4, #1
 8006d68:	9305      	str	r3, [sp, #20]
 8006d6a:	4619      	mov	r1, r3
 8006d6c:	f04f 0c0a 	mov.w	ip, #10
 8006d70:	4620      	mov	r0, r4
 8006d72:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006d76:	3a30      	subs	r2, #48	; 0x30
 8006d78:	2a09      	cmp	r2, #9
 8006d7a:	d903      	bls.n	8006d84 <_svfiprintf_r+0x1a8>
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d0c5      	beq.n	8006d0c <_svfiprintf_r+0x130>
 8006d80:	9105      	str	r1, [sp, #20]
 8006d82:	e7c3      	b.n	8006d0c <_svfiprintf_r+0x130>
 8006d84:	fb0c 2101 	mla	r1, ip, r1, r2
 8006d88:	4604      	mov	r4, r0
 8006d8a:	2301      	movs	r3, #1
 8006d8c:	e7f0      	b.n	8006d70 <_svfiprintf_r+0x194>
 8006d8e:	ab03      	add	r3, sp, #12
 8006d90:	9300      	str	r3, [sp, #0]
 8006d92:	462a      	mov	r2, r5
 8006d94:	4b0f      	ldr	r3, [pc, #60]	; (8006dd4 <_svfiprintf_r+0x1f8>)
 8006d96:	a904      	add	r1, sp, #16
 8006d98:	4638      	mov	r0, r7
 8006d9a:	f3af 8000 	nop.w
 8006d9e:	1c42      	adds	r2, r0, #1
 8006da0:	4606      	mov	r6, r0
 8006da2:	d1d6      	bne.n	8006d52 <_svfiprintf_r+0x176>
 8006da4:	89ab      	ldrh	r3, [r5, #12]
 8006da6:	065b      	lsls	r3, r3, #25
 8006da8:	f53f af2c 	bmi.w	8006c04 <_svfiprintf_r+0x28>
 8006dac:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006dae:	b01d      	add	sp, #116	; 0x74
 8006db0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006db4:	ab03      	add	r3, sp, #12
 8006db6:	9300      	str	r3, [sp, #0]
 8006db8:	462a      	mov	r2, r5
 8006dba:	4b06      	ldr	r3, [pc, #24]	; (8006dd4 <_svfiprintf_r+0x1f8>)
 8006dbc:	a904      	add	r1, sp, #16
 8006dbe:	4638      	mov	r0, r7
 8006dc0:	f000 f87a 	bl	8006eb8 <_printf_i>
 8006dc4:	e7eb      	b.n	8006d9e <_svfiprintf_r+0x1c2>
 8006dc6:	bf00      	nop
 8006dc8:	08008978 	.word	0x08008978
 8006dcc:	08008982 	.word	0x08008982
 8006dd0:	00000000 	.word	0x00000000
 8006dd4:	08006b25 	.word	0x08006b25
 8006dd8:	0800897e 	.word	0x0800897e

08006ddc <_printf_common>:
 8006ddc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006de0:	4616      	mov	r6, r2
 8006de2:	4699      	mov	r9, r3
 8006de4:	688a      	ldr	r2, [r1, #8]
 8006de6:	690b      	ldr	r3, [r1, #16]
 8006de8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006dec:	4293      	cmp	r3, r2
 8006dee:	bfb8      	it	lt
 8006df0:	4613      	movlt	r3, r2
 8006df2:	6033      	str	r3, [r6, #0]
 8006df4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006df8:	4607      	mov	r7, r0
 8006dfa:	460c      	mov	r4, r1
 8006dfc:	b10a      	cbz	r2, 8006e02 <_printf_common+0x26>
 8006dfe:	3301      	adds	r3, #1
 8006e00:	6033      	str	r3, [r6, #0]
 8006e02:	6823      	ldr	r3, [r4, #0]
 8006e04:	0699      	lsls	r1, r3, #26
 8006e06:	bf42      	ittt	mi
 8006e08:	6833      	ldrmi	r3, [r6, #0]
 8006e0a:	3302      	addmi	r3, #2
 8006e0c:	6033      	strmi	r3, [r6, #0]
 8006e0e:	6825      	ldr	r5, [r4, #0]
 8006e10:	f015 0506 	ands.w	r5, r5, #6
 8006e14:	d106      	bne.n	8006e24 <_printf_common+0x48>
 8006e16:	f104 0a19 	add.w	sl, r4, #25
 8006e1a:	68e3      	ldr	r3, [r4, #12]
 8006e1c:	6832      	ldr	r2, [r6, #0]
 8006e1e:	1a9b      	subs	r3, r3, r2
 8006e20:	42ab      	cmp	r3, r5
 8006e22:	dc26      	bgt.n	8006e72 <_printf_common+0x96>
 8006e24:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006e28:	1e13      	subs	r3, r2, #0
 8006e2a:	6822      	ldr	r2, [r4, #0]
 8006e2c:	bf18      	it	ne
 8006e2e:	2301      	movne	r3, #1
 8006e30:	0692      	lsls	r2, r2, #26
 8006e32:	d42b      	bmi.n	8006e8c <_printf_common+0xb0>
 8006e34:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006e38:	4649      	mov	r1, r9
 8006e3a:	4638      	mov	r0, r7
 8006e3c:	47c0      	blx	r8
 8006e3e:	3001      	adds	r0, #1
 8006e40:	d01e      	beq.n	8006e80 <_printf_common+0xa4>
 8006e42:	6823      	ldr	r3, [r4, #0]
 8006e44:	68e5      	ldr	r5, [r4, #12]
 8006e46:	6832      	ldr	r2, [r6, #0]
 8006e48:	f003 0306 	and.w	r3, r3, #6
 8006e4c:	2b04      	cmp	r3, #4
 8006e4e:	bf08      	it	eq
 8006e50:	1aad      	subeq	r5, r5, r2
 8006e52:	68a3      	ldr	r3, [r4, #8]
 8006e54:	6922      	ldr	r2, [r4, #16]
 8006e56:	bf0c      	ite	eq
 8006e58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006e5c:	2500      	movne	r5, #0
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	bfc4      	itt	gt
 8006e62:	1a9b      	subgt	r3, r3, r2
 8006e64:	18ed      	addgt	r5, r5, r3
 8006e66:	2600      	movs	r6, #0
 8006e68:	341a      	adds	r4, #26
 8006e6a:	42b5      	cmp	r5, r6
 8006e6c:	d11a      	bne.n	8006ea4 <_printf_common+0xc8>
 8006e6e:	2000      	movs	r0, #0
 8006e70:	e008      	b.n	8006e84 <_printf_common+0xa8>
 8006e72:	2301      	movs	r3, #1
 8006e74:	4652      	mov	r2, sl
 8006e76:	4649      	mov	r1, r9
 8006e78:	4638      	mov	r0, r7
 8006e7a:	47c0      	blx	r8
 8006e7c:	3001      	adds	r0, #1
 8006e7e:	d103      	bne.n	8006e88 <_printf_common+0xac>
 8006e80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e88:	3501      	adds	r5, #1
 8006e8a:	e7c6      	b.n	8006e1a <_printf_common+0x3e>
 8006e8c:	18e1      	adds	r1, r4, r3
 8006e8e:	1c5a      	adds	r2, r3, #1
 8006e90:	2030      	movs	r0, #48	; 0x30
 8006e92:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006e96:	4422      	add	r2, r4
 8006e98:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006e9c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006ea0:	3302      	adds	r3, #2
 8006ea2:	e7c7      	b.n	8006e34 <_printf_common+0x58>
 8006ea4:	2301      	movs	r3, #1
 8006ea6:	4622      	mov	r2, r4
 8006ea8:	4649      	mov	r1, r9
 8006eaa:	4638      	mov	r0, r7
 8006eac:	47c0      	blx	r8
 8006eae:	3001      	adds	r0, #1
 8006eb0:	d0e6      	beq.n	8006e80 <_printf_common+0xa4>
 8006eb2:	3601      	adds	r6, #1
 8006eb4:	e7d9      	b.n	8006e6a <_printf_common+0x8e>
	...

08006eb8 <_printf_i>:
 8006eb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006ebc:	7e0f      	ldrb	r7, [r1, #24]
 8006ebe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006ec0:	2f78      	cmp	r7, #120	; 0x78
 8006ec2:	4691      	mov	r9, r2
 8006ec4:	4680      	mov	r8, r0
 8006ec6:	460c      	mov	r4, r1
 8006ec8:	469a      	mov	sl, r3
 8006eca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006ece:	d807      	bhi.n	8006ee0 <_printf_i+0x28>
 8006ed0:	2f62      	cmp	r7, #98	; 0x62
 8006ed2:	d80a      	bhi.n	8006eea <_printf_i+0x32>
 8006ed4:	2f00      	cmp	r7, #0
 8006ed6:	f000 80d8 	beq.w	800708a <_printf_i+0x1d2>
 8006eda:	2f58      	cmp	r7, #88	; 0x58
 8006edc:	f000 80a3 	beq.w	8007026 <_printf_i+0x16e>
 8006ee0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006ee4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006ee8:	e03a      	b.n	8006f60 <_printf_i+0xa8>
 8006eea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006eee:	2b15      	cmp	r3, #21
 8006ef0:	d8f6      	bhi.n	8006ee0 <_printf_i+0x28>
 8006ef2:	a101      	add	r1, pc, #4	; (adr r1, 8006ef8 <_printf_i+0x40>)
 8006ef4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006ef8:	08006f51 	.word	0x08006f51
 8006efc:	08006f65 	.word	0x08006f65
 8006f00:	08006ee1 	.word	0x08006ee1
 8006f04:	08006ee1 	.word	0x08006ee1
 8006f08:	08006ee1 	.word	0x08006ee1
 8006f0c:	08006ee1 	.word	0x08006ee1
 8006f10:	08006f65 	.word	0x08006f65
 8006f14:	08006ee1 	.word	0x08006ee1
 8006f18:	08006ee1 	.word	0x08006ee1
 8006f1c:	08006ee1 	.word	0x08006ee1
 8006f20:	08006ee1 	.word	0x08006ee1
 8006f24:	08007071 	.word	0x08007071
 8006f28:	08006f95 	.word	0x08006f95
 8006f2c:	08007053 	.word	0x08007053
 8006f30:	08006ee1 	.word	0x08006ee1
 8006f34:	08006ee1 	.word	0x08006ee1
 8006f38:	08007093 	.word	0x08007093
 8006f3c:	08006ee1 	.word	0x08006ee1
 8006f40:	08006f95 	.word	0x08006f95
 8006f44:	08006ee1 	.word	0x08006ee1
 8006f48:	08006ee1 	.word	0x08006ee1
 8006f4c:	0800705b 	.word	0x0800705b
 8006f50:	682b      	ldr	r3, [r5, #0]
 8006f52:	1d1a      	adds	r2, r3, #4
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	602a      	str	r2, [r5, #0]
 8006f58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006f5c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006f60:	2301      	movs	r3, #1
 8006f62:	e0a3      	b.n	80070ac <_printf_i+0x1f4>
 8006f64:	6820      	ldr	r0, [r4, #0]
 8006f66:	6829      	ldr	r1, [r5, #0]
 8006f68:	0606      	lsls	r6, r0, #24
 8006f6a:	f101 0304 	add.w	r3, r1, #4
 8006f6e:	d50a      	bpl.n	8006f86 <_printf_i+0xce>
 8006f70:	680e      	ldr	r6, [r1, #0]
 8006f72:	602b      	str	r3, [r5, #0]
 8006f74:	2e00      	cmp	r6, #0
 8006f76:	da03      	bge.n	8006f80 <_printf_i+0xc8>
 8006f78:	232d      	movs	r3, #45	; 0x2d
 8006f7a:	4276      	negs	r6, r6
 8006f7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f80:	485e      	ldr	r0, [pc, #376]	; (80070fc <_printf_i+0x244>)
 8006f82:	230a      	movs	r3, #10
 8006f84:	e019      	b.n	8006fba <_printf_i+0x102>
 8006f86:	680e      	ldr	r6, [r1, #0]
 8006f88:	602b      	str	r3, [r5, #0]
 8006f8a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006f8e:	bf18      	it	ne
 8006f90:	b236      	sxthne	r6, r6
 8006f92:	e7ef      	b.n	8006f74 <_printf_i+0xbc>
 8006f94:	682b      	ldr	r3, [r5, #0]
 8006f96:	6820      	ldr	r0, [r4, #0]
 8006f98:	1d19      	adds	r1, r3, #4
 8006f9a:	6029      	str	r1, [r5, #0]
 8006f9c:	0601      	lsls	r1, r0, #24
 8006f9e:	d501      	bpl.n	8006fa4 <_printf_i+0xec>
 8006fa0:	681e      	ldr	r6, [r3, #0]
 8006fa2:	e002      	b.n	8006faa <_printf_i+0xf2>
 8006fa4:	0646      	lsls	r6, r0, #25
 8006fa6:	d5fb      	bpl.n	8006fa0 <_printf_i+0xe8>
 8006fa8:	881e      	ldrh	r6, [r3, #0]
 8006faa:	4854      	ldr	r0, [pc, #336]	; (80070fc <_printf_i+0x244>)
 8006fac:	2f6f      	cmp	r7, #111	; 0x6f
 8006fae:	bf0c      	ite	eq
 8006fb0:	2308      	moveq	r3, #8
 8006fb2:	230a      	movne	r3, #10
 8006fb4:	2100      	movs	r1, #0
 8006fb6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006fba:	6865      	ldr	r5, [r4, #4]
 8006fbc:	60a5      	str	r5, [r4, #8]
 8006fbe:	2d00      	cmp	r5, #0
 8006fc0:	bfa2      	ittt	ge
 8006fc2:	6821      	ldrge	r1, [r4, #0]
 8006fc4:	f021 0104 	bicge.w	r1, r1, #4
 8006fc8:	6021      	strge	r1, [r4, #0]
 8006fca:	b90e      	cbnz	r6, 8006fd0 <_printf_i+0x118>
 8006fcc:	2d00      	cmp	r5, #0
 8006fce:	d04d      	beq.n	800706c <_printf_i+0x1b4>
 8006fd0:	4615      	mov	r5, r2
 8006fd2:	fbb6 f1f3 	udiv	r1, r6, r3
 8006fd6:	fb03 6711 	mls	r7, r3, r1, r6
 8006fda:	5dc7      	ldrb	r7, [r0, r7]
 8006fdc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006fe0:	4637      	mov	r7, r6
 8006fe2:	42bb      	cmp	r3, r7
 8006fe4:	460e      	mov	r6, r1
 8006fe6:	d9f4      	bls.n	8006fd2 <_printf_i+0x11a>
 8006fe8:	2b08      	cmp	r3, #8
 8006fea:	d10b      	bne.n	8007004 <_printf_i+0x14c>
 8006fec:	6823      	ldr	r3, [r4, #0]
 8006fee:	07de      	lsls	r6, r3, #31
 8006ff0:	d508      	bpl.n	8007004 <_printf_i+0x14c>
 8006ff2:	6923      	ldr	r3, [r4, #16]
 8006ff4:	6861      	ldr	r1, [r4, #4]
 8006ff6:	4299      	cmp	r1, r3
 8006ff8:	bfde      	ittt	le
 8006ffa:	2330      	movle	r3, #48	; 0x30
 8006ffc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007000:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007004:	1b52      	subs	r2, r2, r5
 8007006:	6122      	str	r2, [r4, #16]
 8007008:	f8cd a000 	str.w	sl, [sp]
 800700c:	464b      	mov	r3, r9
 800700e:	aa03      	add	r2, sp, #12
 8007010:	4621      	mov	r1, r4
 8007012:	4640      	mov	r0, r8
 8007014:	f7ff fee2 	bl	8006ddc <_printf_common>
 8007018:	3001      	adds	r0, #1
 800701a:	d14c      	bne.n	80070b6 <_printf_i+0x1fe>
 800701c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007020:	b004      	add	sp, #16
 8007022:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007026:	4835      	ldr	r0, [pc, #212]	; (80070fc <_printf_i+0x244>)
 8007028:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800702c:	6829      	ldr	r1, [r5, #0]
 800702e:	6823      	ldr	r3, [r4, #0]
 8007030:	f851 6b04 	ldr.w	r6, [r1], #4
 8007034:	6029      	str	r1, [r5, #0]
 8007036:	061d      	lsls	r5, r3, #24
 8007038:	d514      	bpl.n	8007064 <_printf_i+0x1ac>
 800703a:	07df      	lsls	r7, r3, #31
 800703c:	bf44      	itt	mi
 800703e:	f043 0320 	orrmi.w	r3, r3, #32
 8007042:	6023      	strmi	r3, [r4, #0]
 8007044:	b91e      	cbnz	r6, 800704e <_printf_i+0x196>
 8007046:	6823      	ldr	r3, [r4, #0]
 8007048:	f023 0320 	bic.w	r3, r3, #32
 800704c:	6023      	str	r3, [r4, #0]
 800704e:	2310      	movs	r3, #16
 8007050:	e7b0      	b.n	8006fb4 <_printf_i+0xfc>
 8007052:	6823      	ldr	r3, [r4, #0]
 8007054:	f043 0320 	orr.w	r3, r3, #32
 8007058:	6023      	str	r3, [r4, #0]
 800705a:	2378      	movs	r3, #120	; 0x78
 800705c:	4828      	ldr	r0, [pc, #160]	; (8007100 <_printf_i+0x248>)
 800705e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007062:	e7e3      	b.n	800702c <_printf_i+0x174>
 8007064:	0659      	lsls	r1, r3, #25
 8007066:	bf48      	it	mi
 8007068:	b2b6      	uxthmi	r6, r6
 800706a:	e7e6      	b.n	800703a <_printf_i+0x182>
 800706c:	4615      	mov	r5, r2
 800706e:	e7bb      	b.n	8006fe8 <_printf_i+0x130>
 8007070:	682b      	ldr	r3, [r5, #0]
 8007072:	6826      	ldr	r6, [r4, #0]
 8007074:	6961      	ldr	r1, [r4, #20]
 8007076:	1d18      	adds	r0, r3, #4
 8007078:	6028      	str	r0, [r5, #0]
 800707a:	0635      	lsls	r5, r6, #24
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	d501      	bpl.n	8007084 <_printf_i+0x1cc>
 8007080:	6019      	str	r1, [r3, #0]
 8007082:	e002      	b.n	800708a <_printf_i+0x1d2>
 8007084:	0670      	lsls	r0, r6, #25
 8007086:	d5fb      	bpl.n	8007080 <_printf_i+0x1c8>
 8007088:	8019      	strh	r1, [r3, #0]
 800708a:	2300      	movs	r3, #0
 800708c:	6123      	str	r3, [r4, #16]
 800708e:	4615      	mov	r5, r2
 8007090:	e7ba      	b.n	8007008 <_printf_i+0x150>
 8007092:	682b      	ldr	r3, [r5, #0]
 8007094:	1d1a      	adds	r2, r3, #4
 8007096:	602a      	str	r2, [r5, #0]
 8007098:	681d      	ldr	r5, [r3, #0]
 800709a:	6862      	ldr	r2, [r4, #4]
 800709c:	2100      	movs	r1, #0
 800709e:	4628      	mov	r0, r5
 80070a0:	f7f9 f8be 	bl	8000220 <memchr>
 80070a4:	b108      	cbz	r0, 80070aa <_printf_i+0x1f2>
 80070a6:	1b40      	subs	r0, r0, r5
 80070a8:	6060      	str	r0, [r4, #4]
 80070aa:	6863      	ldr	r3, [r4, #4]
 80070ac:	6123      	str	r3, [r4, #16]
 80070ae:	2300      	movs	r3, #0
 80070b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80070b4:	e7a8      	b.n	8007008 <_printf_i+0x150>
 80070b6:	6923      	ldr	r3, [r4, #16]
 80070b8:	462a      	mov	r2, r5
 80070ba:	4649      	mov	r1, r9
 80070bc:	4640      	mov	r0, r8
 80070be:	47d0      	blx	sl
 80070c0:	3001      	adds	r0, #1
 80070c2:	d0ab      	beq.n	800701c <_printf_i+0x164>
 80070c4:	6823      	ldr	r3, [r4, #0]
 80070c6:	079b      	lsls	r3, r3, #30
 80070c8:	d413      	bmi.n	80070f2 <_printf_i+0x23a>
 80070ca:	68e0      	ldr	r0, [r4, #12]
 80070cc:	9b03      	ldr	r3, [sp, #12]
 80070ce:	4298      	cmp	r0, r3
 80070d0:	bfb8      	it	lt
 80070d2:	4618      	movlt	r0, r3
 80070d4:	e7a4      	b.n	8007020 <_printf_i+0x168>
 80070d6:	2301      	movs	r3, #1
 80070d8:	4632      	mov	r2, r6
 80070da:	4649      	mov	r1, r9
 80070dc:	4640      	mov	r0, r8
 80070de:	47d0      	blx	sl
 80070e0:	3001      	adds	r0, #1
 80070e2:	d09b      	beq.n	800701c <_printf_i+0x164>
 80070e4:	3501      	adds	r5, #1
 80070e6:	68e3      	ldr	r3, [r4, #12]
 80070e8:	9903      	ldr	r1, [sp, #12]
 80070ea:	1a5b      	subs	r3, r3, r1
 80070ec:	42ab      	cmp	r3, r5
 80070ee:	dcf2      	bgt.n	80070d6 <_printf_i+0x21e>
 80070f0:	e7eb      	b.n	80070ca <_printf_i+0x212>
 80070f2:	2500      	movs	r5, #0
 80070f4:	f104 0619 	add.w	r6, r4, #25
 80070f8:	e7f5      	b.n	80070e6 <_printf_i+0x22e>
 80070fa:	bf00      	nop
 80070fc:	08008989 	.word	0x08008989
 8007100:	0800899a 	.word	0x0800899a

08007104 <memcpy>:
 8007104:	440a      	add	r2, r1
 8007106:	4291      	cmp	r1, r2
 8007108:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800710c:	d100      	bne.n	8007110 <memcpy+0xc>
 800710e:	4770      	bx	lr
 8007110:	b510      	push	{r4, lr}
 8007112:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007116:	f803 4f01 	strb.w	r4, [r3, #1]!
 800711a:	4291      	cmp	r1, r2
 800711c:	d1f9      	bne.n	8007112 <memcpy+0xe>
 800711e:	bd10      	pop	{r4, pc}

08007120 <memmove>:
 8007120:	4288      	cmp	r0, r1
 8007122:	b510      	push	{r4, lr}
 8007124:	eb01 0402 	add.w	r4, r1, r2
 8007128:	d902      	bls.n	8007130 <memmove+0x10>
 800712a:	4284      	cmp	r4, r0
 800712c:	4623      	mov	r3, r4
 800712e:	d807      	bhi.n	8007140 <memmove+0x20>
 8007130:	1e43      	subs	r3, r0, #1
 8007132:	42a1      	cmp	r1, r4
 8007134:	d008      	beq.n	8007148 <memmove+0x28>
 8007136:	f811 2b01 	ldrb.w	r2, [r1], #1
 800713a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800713e:	e7f8      	b.n	8007132 <memmove+0x12>
 8007140:	4402      	add	r2, r0
 8007142:	4601      	mov	r1, r0
 8007144:	428a      	cmp	r2, r1
 8007146:	d100      	bne.n	800714a <memmove+0x2a>
 8007148:	bd10      	pop	{r4, pc}
 800714a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800714e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007152:	e7f7      	b.n	8007144 <memmove+0x24>

08007154 <_free_r>:
 8007154:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007156:	2900      	cmp	r1, #0
 8007158:	d044      	beq.n	80071e4 <_free_r+0x90>
 800715a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800715e:	9001      	str	r0, [sp, #4]
 8007160:	2b00      	cmp	r3, #0
 8007162:	f1a1 0404 	sub.w	r4, r1, #4
 8007166:	bfb8      	it	lt
 8007168:	18e4      	addlt	r4, r4, r3
 800716a:	f000 f913 	bl	8007394 <__malloc_lock>
 800716e:	4a1e      	ldr	r2, [pc, #120]	; (80071e8 <_free_r+0x94>)
 8007170:	9801      	ldr	r0, [sp, #4]
 8007172:	6813      	ldr	r3, [r2, #0]
 8007174:	b933      	cbnz	r3, 8007184 <_free_r+0x30>
 8007176:	6063      	str	r3, [r4, #4]
 8007178:	6014      	str	r4, [r2, #0]
 800717a:	b003      	add	sp, #12
 800717c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007180:	f000 b90e 	b.w	80073a0 <__malloc_unlock>
 8007184:	42a3      	cmp	r3, r4
 8007186:	d908      	bls.n	800719a <_free_r+0x46>
 8007188:	6825      	ldr	r5, [r4, #0]
 800718a:	1961      	adds	r1, r4, r5
 800718c:	428b      	cmp	r3, r1
 800718e:	bf01      	itttt	eq
 8007190:	6819      	ldreq	r1, [r3, #0]
 8007192:	685b      	ldreq	r3, [r3, #4]
 8007194:	1949      	addeq	r1, r1, r5
 8007196:	6021      	streq	r1, [r4, #0]
 8007198:	e7ed      	b.n	8007176 <_free_r+0x22>
 800719a:	461a      	mov	r2, r3
 800719c:	685b      	ldr	r3, [r3, #4]
 800719e:	b10b      	cbz	r3, 80071a4 <_free_r+0x50>
 80071a0:	42a3      	cmp	r3, r4
 80071a2:	d9fa      	bls.n	800719a <_free_r+0x46>
 80071a4:	6811      	ldr	r1, [r2, #0]
 80071a6:	1855      	adds	r5, r2, r1
 80071a8:	42a5      	cmp	r5, r4
 80071aa:	d10b      	bne.n	80071c4 <_free_r+0x70>
 80071ac:	6824      	ldr	r4, [r4, #0]
 80071ae:	4421      	add	r1, r4
 80071b0:	1854      	adds	r4, r2, r1
 80071b2:	42a3      	cmp	r3, r4
 80071b4:	6011      	str	r1, [r2, #0]
 80071b6:	d1e0      	bne.n	800717a <_free_r+0x26>
 80071b8:	681c      	ldr	r4, [r3, #0]
 80071ba:	685b      	ldr	r3, [r3, #4]
 80071bc:	6053      	str	r3, [r2, #4]
 80071be:	4421      	add	r1, r4
 80071c0:	6011      	str	r1, [r2, #0]
 80071c2:	e7da      	b.n	800717a <_free_r+0x26>
 80071c4:	d902      	bls.n	80071cc <_free_r+0x78>
 80071c6:	230c      	movs	r3, #12
 80071c8:	6003      	str	r3, [r0, #0]
 80071ca:	e7d6      	b.n	800717a <_free_r+0x26>
 80071cc:	6825      	ldr	r5, [r4, #0]
 80071ce:	1961      	adds	r1, r4, r5
 80071d0:	428b      	cmp	r3, r1
 80071d2:	bf04      	itt	eq
 80071d4:	6819      	ldreq	r1, [r3, #0]
 80071d6:	685b      	ldreq	r3, [r3, #4]
 80071d8:	6063      	str	r3, [r4, #4]
 80071da:	bf04      	itt	eq
 80071dc:	1949      	addeq	r1, r1, r5
 80071de:	6021      	streq	r1, [r4, #0]
 80071e0:	6054      	str	r4, [r2, #4]
 80071e2:	e7ca      	b.n	800717a <_free_r+0x26>
 80071e4:	b003      	add	sp, #12
 80071e6:	bd30      	pop	{r4, r5, pc}
 80071e8:	20000b40 	.word	0x20000b40

080071ec <sbrk_aligned>:
 80071ec:	b570      	push	{r4, r5, r6, lr}
 80071ee:	4e0e      	ldr	r6, [pc, #56]	; (8007228 <sbrk_aligned+0x3c>)
 80071f0:	460c      	mov	r4, r1
 80071f2:	6831      	ldr	r1, [r6, #0]
 80071f4:	4605      	mov	r5, r0
 80071f6:	b911      	cbnz	r1, 80071fe <sbrk_aligned+0x12>
 80071f8:	f000 f8bc 	bl	8007374 <_sbrk_r>
 80071fc:	6030      	str	r0, [r6, #0]
 80071fe:	4621      	mov	r1, r4
 8007200:	4628      	mov	r0, r5
 8007202:	f000 f8b7 	bl	8007374 <_sbrk_r>
 8007206:	1c43      	adds	r3, r0, #1
 8007208:	d00a      	beq.n	8007220 <sbrk_aligned+0x34>
 800720a:	1cc4      	adds	r4, r0, #3
 800720c:	f024 0403 	bic.w	r4, r4, #3
 8007210:	42a0      	cmp	r0, r4
 8007212:	d007      	beq.n	8007224 <sbrk_aligned+0x38>
 8007214:	1a21      	subs	r1, r4, r0
 8007216:	4628      	mov	r0, r5
 8007218:	f000 f8ac 	bl	8007374 <_sbrk_r>
 800721c:	3001      	adds	r0, #1
 800721e:	d101      	bne.n	8007224 <sbrk_aligned+0x38>
 8007220:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8007224:	4620      	mov	r0, r4
 8007226:	bd70      	pop	{r4, r5, r6, pc}
 8007228:	20000b44 	.word	0x20000b44

0800722c <_malloc_r>:
 800722c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007230:	1ccd      	adds	r5, r1, #3
 8007232:	f025 0503 	bic.w	r5, r5, #3
 8007236:	3508      	adds	r5, #8
 8007238:	2d0c      	cmp	r5, #12
 800723a:	bf38      	it	cc
 800723c:	250c      	movcc	r5, #12
 800723e:	2d00      	cmp	r5, #0
 8007240:	4607      	mov	r7, r0
 8007242:	db01      	blt.n	8007248 <_malloc_r+0x1c>
 8007244:	42a9      	cmp	r1, r5
 8007246:	d905      	bls.n	8007254 <_malloc_r+0x28>
 8007248:	230c      	movs	r3, #12
 800724a:	603b      	str	r3, [r7, #0]
 800724c:	2600      	movs	r6, #0
 800724e:	4630      	mov	r0, r6
 8007250:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007254:	4e2e      	ldr	r6, [pc, #184]	; (8007310 <_malloc_r+0xe4>)
 8007256:	f000 f89d 	bl	8007394 <__malloc_lock>
 800725a:	6833      	ldr	r3, [r6, #0]
 800725c:	461c      	mov	r4, r3
 800725e:	bb34      	cbnz	r4, 80072ae <_malloc_r+0x82>
 8007260:	4629      	mov	r1, r5
 8007262:	4638      	mov	r0, r7
 8007264:	f7ff ffc2 	bl	80071ec <sbrk_aligned>
 8007268:	1c43      	adds	r3, r0, #1
 800726a:	4604      	mov	r4, r0
 800726c:	d14d      	bne.n	800730a <_malloc_r+0xde>
 800726e:	6834      	ldr	r4, [r6, #0]
 8007270:	4626      	mov	r6, r4
 8007272:	2e00      	cmp	r6, #0
 8007274:	d140      	bne.n	80072f8 <_malloc_r+0xcc>
 8007276:	6823      	ldr	r3, [r4, #0]
 8007278:	4631      	mov	r1, r6
 800727a:	4638      	mov	r0, r7
 800727c:	eb04 0803 	add.w	r8, r4, r3
 8007280:	f000 f878 	bl	8007374 <_sbrk_r>
 8007284:	4580      	cmp	r8, r0
 8007286:	d13a      	bne.n	80072fe <_malloc_r+0xd2>
 8007288:	6821      	ldr	r1, [r4, #0]
 800728a:	3503      	adds	r5, #3
 800728c:	1a6d      	subs	r5, r5, r1
 800728e:	f025 0503 	bic.w	r5, r5, #3
 8007292:	3508      	adds	r5, #8
 8007294:	2d0c      	cmp	r5, #12
 8007296:	bf38      	it	cc
 8007298:	250c      	movcc	r5, #12
 800729a:	4629      	mov	r1, r5
 800729c:	4638      	mov	r0, r7
 800729e:	f7ff ffa5 	bl	80071ec <sbrk_aligned>
 80072a2:	3001      	adds	r0, #1
 80072a4:	d02b      	beq.n	80072fe <_malloc_r+0xd2>
 80072a6:	6823      	ldr	r3, [r4, #0]
 80072a8:	442b      	add	r3, r5
 80072aa:	6023      	str	r3, [r4, #0]
 80072ac:	e00e      	b.n	80072cc <_malloc_r+0xa0>
 80072ae:	6822      	ldr	r2, [r4, #0]
 80072b0:	1b52      	subs	r2, r2, r5
 80072b2:	d41e      	bmi.n	80072f2 <_malloc_r+0xc6>
 80072b4:	2a0b      	cmp	r2, #11
 80072b6:	d916      	bls.n	80072e6 <_malloc_r+0xba>
 80072b8:	1961      	adds	r1, r4, r5
 80072ba:	42a3      	cmp	r3, r4
 80072bc:	6025      	str	r5, [r4, #0]
 80072be:	bf18      	it	ne
 80072c0:	6059      	strne	r1, [r3, #4]
 80072c2:	6863      	ldr	r3, [r4, #4]
 80072c4:	bf08      	it	eq
 80072c6:	6031      	streq	r1, [r6, #0]
 80072c8:	5162      	str	r2, [r4, r5]
 80072ca:	604b      	str	r3, [r1, #4]
 80072cc:	4638      	mov	r0, r7
 80072ce:	f104 060b 	add.w	r6, r4, #11
 80072d2:	f000 f865 	bl	80073a0 <__malloc_unlock>
 80072d6:	f026 0607 	bic.w	r6, r6, #7
 80072da:	1d23      	adds	r3, r4, #4
 80072dc:	1af2      	subs	r2, r6, r3
 80072de:	d0b6      	beq.n	800724e <_malloc_r+0x22>
 80072e0:	1b9b      	subs	r3, r3, r6
 80072e2:	50a3      	str	r3, [r4, r2]
 80072e4:	e7b3      	b.n	800724e <_malloc_r+0x22>
 80072e6:	6862      	ldr	r2, [r4, #4]
 80072e8:	42a3      	cmp	r3, r4
 80072ea:	bf0c      	ite	eq
 80072ec:	6032      	streq	r2, [r6, #0]
 80072ee:	605a      	strne	r2, [r3, #4]
 80072f0:	e7ec      	b.n	80072cc <_malloc_r+0xa0>
 80072f2:	4623      	mov	r3, r4
 80072f4:	6864      	ldr	r4, [r4, #4]
 80072f6:	e7b2      	b.n	800725e <_malloc_r+0x32>
 80072f8:	4634      	mov	r4, r6
 80072fa:	6876      	ldr	r6, [r6, #4]
 80072fc:	e7b9      	b.n	8007272 <_malloc_r+0x46>
 80072fe:	230c      	movs	r3, #12
 8007300:	603b      	str	r3, [r7, #0]
 8007302:	4638      	mov	r0, r7
 8007304:	f000 f84c 	bl	80073a0 <__malloc_unlock>
 8007308:	e7a1      	b.n	800724e <_malloc_r+0x22>
 800730a:	6025      	str	r5, [r4, #0]
 800730c:	e7de      	b.n	80072cc <_malloc_r+0xa0>
 800730e:	bf00      	nop
 8007310:	20000b40 	.word	0x20000b40

08007314 <_realloc_r>:
 8007314:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007318:	4680      	mov	r8, r0
 800731a:	4614      	mov	r4, r2
 800731c:	460e      	mov	r6, r1
 800731e:	b921      	cbnz	r1, 800732a <_realloc_r+0x16>
 8007320:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007324:	4611      	mov	r1, r2
 8007326:	f7ff bf81 	b.w	800722c <_malloc_r>
 800732a:	b92a      	cbnz	r2, 8007338 <_realloc_r+0x24>
 800732c:	f7ff ff12 	bl	8007154 <_free_r>
 8007330:	4625      	mov	r5, r4
 8007332:	4628      	mov	r0, r5
 8007334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007338:	f000 f838 	bl	80073ac <_malloc_usable_size_r>
 800733c:	4284      	cmp	r4, r0
 800733e:	4607      	mov	r7, r0
 8007340:	d802      	bhi.n	8007348 <_realloc_r+0x34>
 8007342:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007346:	d812      	bhi.n	800736e <_realloc_r+0x5a>
 8007348:	4621      	mov	r1, r4
 800734a:	4640      	mov	r0, r8
 800734c:	f7ff ff6e 	bl	800722c <_malloc_r>
 8007350:	4605      	mov	r5, r0
 8007352:	2800      	cmp	r0, #0
 8007354:	d0ed      	beq.n	8007332 <_realloc_r+0x1e>
 8007356:	42bc      	cmp	r4, r7
 8007358:	4622      	mov	r2, r4
 800735a:	4631      	mov	r1, r6
 800735c:	bf28      	it	cs
 800735e:	463a      	movcs	r2, r7
 8007360:	f7ff fed0 	bl	8007104 <memcpy>
 8007364:	4631      	mov	r1, r6
 8007366:	4640      	mov	r0, r8
 8007368:	f7ff fef4 	bl	8007154 <_free_r>
 800736c:	e7e1      	b.n	8007332 <_realloc_r+0x1e>
 800736e:	4635      	mov	r5, r6
 8007370:	e7df      	b.n	8007332 <_realloc_r+0x1e>
	...

08007374 <_sbrk_r>:
 8007374:	b538      	push	{r3, r4, r5, lr}
 8007376:	4d06      	ldr	r5, [pc, #24]	; (8007390 <_sbrk_r+0x1c>)
 8007378:	2300      	movs	r3, #0
 800737a:	4604      	mov	r4, r0
 800737c:	4608      	mov	r0, r1
 800737e:	602b      	str	r3, [r5, #0]
 8007380:	f7fa f92c 	bl	80015dc <_sbrk>
 8007384:	1c43      	adds	r3, r0, #1
 8007386:	d102      	bne.n	800738e <_sbrk_r+0x1a>
 8007388:	682b      	ldr	r3, [r5, #0]
 800738a:	b103      	cbz	r3, 800738e <_sbrk_r+0x1a>
 800738c:	6023      	str	r3, [r4, #0]
 800738e:	bd38      	pop	{r3, r4, r5, pc}
 8007390:	20000b48 	.word	0x20000b48

08007394 <__malloc_lock>:
 8007394:	4801      	ldr	r0, [pc, #4]	; (800739c <__malloc_lock+0x8>)
 8007396:	f000 b811 	b.w	80073bc <__retarget_lock_acquire_recursive>
 800739a:	bf00      	nop
 800739c:	20000b4c 	.word	0x20000b4c

080073a0 <__malloc_unlock>:
 80073a0:	4801      	ldr	r0, [pc, #4]	; (80073a8 <__malloc_unlock+0x8>)
 80073a2:	f000 b80c 	b.w	80073be <__retarget_lock_release_recursive>
 80073a6:	bf00      	nop
 80073a8:	20000b4c 	.word	0x20000b4c

080073ac <_malloc_usable_size_r>:
 80073ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80073b0:	1f18      	subs	r0, r3, #4
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	bfbc      	itt	lt
 80073b6:	580b      	ldrlt	r3, [r1, r0]
 80073b8:	18c0      	addlt	r0, r0, r3
 80073ba:	4770      	bx	lr

080073bc <__retarget_lock_acquire_recursive>:
 80073bc:	4770      	bx	lr

080073be <__retarget_lock_release_recursive>:
 80073be:	4770      	bx	lr

080073c0 <_init>:
 80073c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073c2:	bf00      	nop
 80073c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073c6:	bc08      	pop	{r3}
 80073c8:	469e      	mov	lr, r3
 80073ca:	4770      	bx	lr

080073cc <_fini>:
 80073cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073ce:	bf00      	nop
 80073d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073d2:	bc08      	pop	{r3}
 80073d4:	469e      	mov	lr, r3
 80073d6:	4770      	bx	lr
